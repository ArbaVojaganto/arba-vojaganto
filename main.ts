
  const html = `

  
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <!--
      <link rel="stylesheet" href="stylesheet.css">
    -->
    <style>

      /* reset.css begin */

      /* http://meyerweb.com/eric/tools/css/reset/ 
         v2.0 | 20110126
         License: none (public domain)
      */

      html, body, div, span, applet, object, iframe,
      h1, h2, h3, h4, h5, h6, p, blockquote, pre,
      a, abbr, acronym, address, big, cite, code,
      del, dfn, em, img, ins, kbd, q, s, samp,
      small, strike, strong, sub, sup, tt, var,
      b, u, i, center,
      dl, dt, dd, ol, ul, li,
      fieldset, form, label, legend,
      table, caption, tbody, tfoot, thead, tr, th, td,
      article, aside, canvas, details, embed, 
      figure, figcaption, footer, header, hgroup, 
      menu, nav, output, ruby, section, summary,
      time, mark, audio, video {
      	margin: 0;
      	padding: 0;
      	border: 0;
      	font-size: 100%;
      	font: inherit;
      	vertical-align: baseline;
      }
      /* HTML5 display-role reset for older browsers */
      article, aside, details, figcaption, figure, 
      footer, header, hgroup, menu, nav, section {
      	display: block;
      }
      body {
      	line-height: 1;
      }
      ol, ul {
      	list-style: none;
      }
      blockquote, q {
      	quotes: none;
      }
      blockquote:before, blockquote:after,
      q:before, q:after {
      	content: '';
      	content: none;
      }
      table {
      	border-collapse: collapse;
      	border-spacing: 0;
      }
      /* reset.css end */




    body {
      overflow: hidden;
      margin: 0;
      border: 0;
      background-color: white;
    }

    #network-graph {
      position: relative;
      display: flex;
      justify-content: space-between;
    }

    #network-graph-canvas {
      position: absolute;
      z-index: 3;
    }

    #network-graph-global-menu {
      z-index:4;
    }

    #file-uploader{
      background-color: #f4f4f4;
      margin: 10px;
      padding: 10px;
      border: #ddd dashed 5px;
      min-height: 200px;
      text-align: center;
      display: grid;
    }
    #dragDropArea p{
        color: #999;
        font-weight: bold;
        font-size: 14px;
        font-size: 1.4em;
    }
    #dragDropArea .drag-drop-buttons{
        margin-top: 20px;
        font-size: 12px;
        font-size: 1.2em;
    }
    .drag-drop-buttons input{
        margin: auto;
    }

    img.uploaderPreview {
      width: 300px;
      height: 300px;
    }

    img.thumbnail {
      width: 500px; height: 500px;
      object-fit: contain;
    }


    #network-graph-local-menu {
      z-index: 5;
    }

    .node-detail {
      z-index: 5;
      display: grid;
    }

    .accordion-child {
      margin-left: 1em;
    }

    #open,
    #close {
      cursor:pointer;
      background: black;
      color: white;
    }

    #mask {
      background: rgba(0, 0, 0, 0.4);
      position: fixed;
      top: 0;
      bottom: 0;
      right: 0;
      left: 0;
      z-index: 10;
    }

    #modal {
      background: #fff;
      color: #555;
      width: 900px;
      height: 900px;
      padding: 40px;
      border-radius: 4px;
      position: absolute;
      top: 40px;
      left: 0;
      right: 0;
      margin: 0 auto;
      z-index: 11;
      transition: 0.4s;
    }

    #modal p {
      margin: 0 0 20px;
    } 

    #mask.hidden {
      display: none;
    }

    #modal.hidden {
      transform: translate(0, -1200px);
    }

    #modal iframe{
      position:absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    }


    #select-file {
      z-index: 12;
    }


    .accordion ul {
    	list-style: none;
    	margin:0;
    }
    label{
    	cursor: pointer;
    }
    .toggle{
      z-index: 12;
    }
    .toggle + ul{
    	max-height: 0;
    	overflow: hidden;
    	/*max-height: 500px;
    	transition: all .5s ease;
      */
    }
    .toggle:checked + ul{
      max-height: 1000px;
    	/*
    	transition: all 2s ease-in;
      */
    }

    .three-canvas {
      position: absolute;
      z-index: 2;
    }

    </style>

</head>

<body>

  <div id="mask" class="hidden"></div>
  <div id="modal" class="hidden"></div>

  <div id="network-graph">
  </div>

  <script>
    remoteStorageURL = "https://raw.githubusercontent.com/ArbaVojaganto/arba-vojaganto/main/"
  </script>
  <script src="data:text/plain;base64,Y29uc3QgSEVYX0NIQVJTID0gIjAxMjM0NTY3ODlhYmNkZWYiLnNwbGl0KCIiKTsKY29uc3QgRVhUUkEgPSBbCiAgICAtMjE0NzQ4MzY0OCwKICAgIDgzODg2MDgsCiAgICAzMjc2OCwKICAgIDEyOApdOwpjb25zdCBTSElGVCA9IFsKICAgIDI0LAogICAgMTYsCiAgICA4LAogICAgMApdOwpjb25zdCBLID0gWwogICAgMTExNjM1MjQwOCwKICAgIDE4OTk0NDc0NDEsCiAgICAzMDQ5MzIzNDcxLAogICAgMzkyMTAwOTU3MywKICAgIDk2MTk4NzE2MywKICAgIDE1MDg5NzA5OTMsCiAgICAyNDUzNjM1NzQ4LAogICAgMjg3MDc2MzIyMSwKICAgIDM2MjQzODEwODAsCiAgICAzMTA1OTg0MDEsCiAgICA2MDcyMjUyNzgsCiAgICAxNDI2ODgxOTg3LAogICAgMTkyNTA3ODM4OCwKICAgIDIxNjIwNzgyMDYsCiAgICAyNjE0ODg4MTAzLAogICAgMzI0ODIyMjU4MCwKICAgIDM4MzUzOTA0MDEsCiAgICA0MDIyMjI0Nzc0LAogICAgMjY0MzQ3MDc4LAogICAgNjA0ODA3NjI4LAogICAgNzcwMjU1OTgzLAogICAgMTI0OTE1MDEyMiwKICAgIDE1NTUwODE2OTIsCiAgICAxOTk2MDY0OTg2LAogICAgMjU1NDIyMDg4MiwKICAgIDI4MjE4MzQzNDksCiAgICAyOTUyOTk2ODA4LAogICAgMzIxMDMxMzY3MSwKICAgIDMzMzY1NzE4OTEsCiAgICAzNTg0NTI4NzExLAogICAgMTEzOTI2OTkzLAogICAgMzM4MjQxODk1LAogICAgNjY2MzA3MjA1LAogICAgNzczNTI5OTEyLAogICAgMTI5NDc1NzM3MiwKICAgIDEzOTYxODIyOTEsCiAgICAxNjk1MTgzNzAwLAogICAgMTk4NjY2MTA1MSwKICAgIDIxNzcwMjYzNTAsCiAgICAyNDU2OTU2MDM3LAogICAgMjczMDQ4NTkyMSwKICAgIDI4MjAzMDI0MTEsCiAgICAzMjU5NzMwODAwLAogICAgMzM0NTc2NDc3MSwKICAgIDM1MTYwNjU4MTcsCiAgICAzNjAwMzUyODA0LAogICAgNDA5NDU3MTkwOSwKICAgIDI3NTQyMzM0NCwKICAgIDQzMDIyNzczNCwKICAgIDUwNjk0ODYxNiwKICAgIDY1OTA2MDU1NiwKICAgIDg4Mzk5Nzg3NywKICAgIDk1ODEzOTU3MSwKICAgIDEzMjI4MjIyMTgsCiAgICAxNTM3MDAyMDYzLAogICAgMTc0Nzg3Mzc3OSwKICAgIDE5NTU1NjIyMjIsCiAgICAyMDI0MTA0ODE1LAogICAgMjIyNzczMDQ1MiwKICAgIDIzNjE4NTI0MjQsCiAgICAyNDI4NDM2NDc0LAogICAgMjc1NjczNDE4NywKICAgIDMyMDQwMzE0NzksCiAgICAzMzI5MzI1Mjk4LCAKXTsKY29uc3QgYmxvY2tzID0gW107CmNsYXNzIFNoYTI1NiB7CiAgICAjYmxvY2s7CiAgICAjYmxvY2tzOwogICAgI2J5dGVzOwogICAgI2ZpbmFsaXplZDsKICAgICNmaXJzdDsKICAgICNoMDsKICAgICNoMTsKICAgICNoMjsKICAgICNoMzsKICAgICNoNDsKICAgICNoNTsKICAgICNoNjsKICAgICNoNzsKICAgICNoYXNoZWQ7CiAgICAjaEJ5dGVzOwogICAgI2lzMjI0OwogICAgI2xhc3RCeXRlSW5kZXg9MDsKICAgICNzdGFydDsKICAgIGNvbnN0cnVjdG9yKGlzMjI0MSA9IGZhbHNlLCBzaGFyZWRNZW1vcnkxID0gZmFsc2UpewogICAgICAgIHRoaXMuaW5pdChpczIyNDEsIHNoYXJlZE1lbW9yeTEpOwogICAgfQogICAgaW5pdChpczIyNCwgc2hhcmVkTWVtb3J5KSB7CiAgICAgICAgaWYgKHNoYXJlZE1lbW9yeSkgewogICAgICAgICAgICBibG9ja3NbMF0gPSBibG9ja3NbMTZdID0gYmxvY2tzWzFdID0gYmxvY2tzWzJdID0gYmxvY2tzWzNdID0gYmxvY2tzWzRdID0gYmxvY2tzWzVdID0gYmxvY2tzWzZdID0gYmxvY2tzWzddID0gYmxvY2tzWzhdID0gYmxvY2tzWzldID0gYmxvY2tzWzEwXSA9IGJsb2Nrc1sxMV0gPSBibG9ja3NbMTJdID0gYmxvY2tzWzEzXSA9IGJsb2Nrc1sxNF0gPSBibG9ja3NbMTVdID0gMDsKICAgICAgICAgICAgdGhpcy4jYmxvY2tzID0gYmxvY2tzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuI2Jsb2NrcyA9IFsKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgIGlmIChpczIyNCkgewogICAgICAgICAgICB0aGlzLiNoMCA9IDMyMzgzNzEwMzI7CiAgICAgICAgICAgIHRoaXMuI2gxID0gOTE0MTUwNjYzOwogICAgICAgICAgICB0aGlzLiNoMiA9IDgxMjcwMjk5OTsKICAgICAgICAgICAgdGhpcy4jaDMgPSA0MTQ0OTEyNjk3OwogICAgICAgICAgICB0aGlzLiNoNCA9IDQyOTA3NzU4NTc7CiAgICAgICAgICAgIHRoaXMuI2g1ID0gMTc1MDYwMzAyNTsKICAgICAgICAgICAgdGhpcy4jaDYgPSAxNjk0MDc2ODM5OwogICAgICAgICAgICB0aGlzLiNoNyA9IDMyMDQwNzU0Mjg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4jaDAgPSAxNzc5MDMzNzAzOwogICAgICAgICAgICB0aGlzLiNoMSA9IDMxNDQxMzQyNzc7CiAgICAgICAgICAgIHRoaXMuI2gyID0gMTAxMzkwNDI0MjsKICAgICAgICAgICAgdGhpcy4jaDMgPSAyNzczNDgwNzYyOwogICAgICAgICAgICB0aGlzLiNoNCA9IDEzNTk4OTMxMTk7CiAgICAgICAgICAgIHRoaXMuI2g1ID0gMjYwMDgyMjkyNDsKICAgICAgICAgICAgdGhpcy4jaDYgPSA1Mjg3MzQ2MzU7CiAgICAgICAgICAgIHRoaXMuI2g3ID0gMTU0MTQ1OTIyNTsKICAgICAgICB9CiAgICAgICAgdGhpcy4jYmxvY2sgPSB0aGlzLiNzdGFydCA9IHRoaXMuI2J5dGVzID0gdGhpcy4jaEJ5dGVzID0gMDsKICAgICAgICB0aGlzLiNmaW5hbGl6ZWQgPSB0aGlzLiNoYXNoZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLiNmaXJzdCA9IHRydWU7CiAgICAgICAgdGhpcy4jaXMyMjQgPSBpczIyNDsKICAgIH0KICAgIHVwZGF0ZShtZXNzYWdlKSB7CiAgICAgICAgaWYgKHRoaXMuI2ZpbmFsaXplZCkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgbGV0IG1zZzsKICAgICAgICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7CiAgICAgICAgICAgIG1zZyA9IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1zZyA9IG1lc3NhZ2U7CiAgICAgICAgfQogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gbXNnLmxlbmd0aDsKICAgICAgICBjb25zdCBibG9ja3MxID0gdGhpcy4jYmxvY2tzOwogICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKXsKICAgICAgICAgICAgbGV0IGk7CiAgICAgICAgICAgIGlmICh0aGlzLiNoYXNoZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMuI2hhc2hlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgYmxvY2tzMVswXSA9IHRoaXMuI2Jsb2NrOwogICAgICAgICAgICAgICAgYmxvY2tzMVsxNl0gPSBibG9ja3MxWzFdID0gYmxvY2tzMVsyXSA9IGJsb2NrczFbM10gPSBibG9ja3MxWzRdID0gYmxvY2tzMVs1XSA9IGJsb2NrczFbNl0gPSBibG9ja3MxWzddID0gYmxvY2tzMVs4XSA9IGJsb2NrczFbOV0gPSBibG9ja3MxWzEwXSA9IGJsb2NrczFbMTFdID0gYmxvY2tzMVsxMl0gPSBibG9ja3MxWzEzXSA9IGJsb2NrczFbMTRdID0gYmxvY2tzMVsxNV0gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnICE9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgZm9yKGkgPSB0aGlzLiNzdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaSA8IDY0OyArK2luZGV4KXsKICAgICAgICAgICAgICAgICAgICBibG9ja3MxW2kgPj4gMl0gfD0gbXNnW2luZGV4XSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yKGkgPSB0aGlzLiNzdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaSA8IDY0OyArK2luZGV4KXsKICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IG1zZy5jaGFyQ29kZUF0KGluZGV4KTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8IDEyOCkgewogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MxW2kgPj4gMl0gfD0gY29kZSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDIwNDgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMVtpID4+IDJdIHw9ICgxOTIgfCBjb2RlID4+IDYpIDw8IFNISUZUWyhpKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczFbaSA+PiAyXSB8PSAoMTI4IHwgY29kZSAmIDYzKSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDU1Mjk2IHx8IGNvZGUgPj0gNTczNDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMVtpID4+IDJdIHw9ICgyMjQgfCBjb2RlID4+IDEyKSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MxW2kgPj4gMl0gfD0gKDEyOCB8IGNvZGUgPj4gNiAmIDYzKSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MxW2kgPj4gMl0gfD0gKDEyOCB8IGNvZGUgJiA2MykgPDwgU0hJRlRbKGkrKykgJiAzXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gNjU1MzYgKyAoKGNvZGUgJiAxMDIzKSA8PCAxMCB8IG1zZy5jaGFyQ29kZUF0KCsraW5kZXgpICYgMTAyMyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczFbaSA+PiAyXSB8PSAoMjQwIHwgY29kZSA+PiAxOCkgPDwgU0hJRlRbKGkrKykgJiAzXTsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMVtpID4+IDJdIHw9ICgxMjggfCBjb2RlID4+IDEyICYgNjMpIDw8IFNISUZUWyhpKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczFbaSA+PiAyXSB8PSAoMTI4IHwgY29kZSA+PiA2ICYgNjMpIDw8IFNISUZUWyhpKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczFbaSA+PiAyXSB8PSAoMTI4IHwgY29kZSAmIDYzKSA8PCBTSElGVFsoaSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiNsYXN0Qnl0ZUluZGV4ID0gaTsKICAgICAgICAgICAgdGhpcy4jYnl0ZXMgKz0gaSAtIHRoaXMuI3N0YXJ0OwogICAgICAgICAgICBpZiAoaSA+PSA2NCkgewogICAgICAgICAgICAgICAgdGhpcy4jYmxvY2sgPSBibG9ja3MxWzE2XTsKICAgICAgICAgICAgICAgIHRoaXMuI3N0YXJ0ID0gaSAtIDY0OwogICAgICAgICAgICAgICAgdGhpcy5oYXNoKCk7CiAgICAgICAgICAgICAgICB0aGlzLiNoYXNoZWQgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy4jc3RhcnQgPSBpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLiNieXRlcyA+IDQyOTQ5NjcyOTUpIHsKICAgICAgICAgICAgdGhpcy4jaEJ5dGVzICs9IHRoaXMuI2J5dGVzIC8gNDI5NDk2NzI5NiA8PCAwOwogICAgICAgICAgICB0aGlzLiNieXRlcyA9IHRoaXMuI2J5dGVzICUgNDI5NDk2NzI5NjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICBmaW5hbGl6ZSgpIHsKICAgICAgICBpZiAodGhpcy4jZmluYWxpemVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy4jZmluYWxpemVkID0gdHJ1ZTsKICAgICAgICBjb25zdCBibG9ja3MxID0gdGhpcy4jYmxvY2tzOwogICAgICAgIGNvbnN0IGkgPSB0aGlzLiNsYXN0Qnl0ZUluZGV4OwogICAgICAgIGJsb2NrczFbMTZdID0gdGhpcy4jYmxvY2s7CiAgICAgICAgYmxvY2tzMVtpID4+IDJdIHw9IEVYVFJBW2kgJiAzXTsKICAgICAgICB0aGlzLiNibG9jayA9IGJsb2NrczFbMTZdOwogICAgICAgIGlmIChpID49IDU2KSB7CiAgICAgICAgICAgIGlmICghdGhpcy4jaGFzaGVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhhc2goKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBibG9ja3MxWzBdID0gdGhpcy4jYmxvY2s7CiAgICAgICAgICAgIGJsb2NrczFbMTZdID0gYmxvY2tzMVsxXSA9IGJsb2NrczFbMl0gPSBibG9ja3MxWzNdID0gYmxvY2tzMVs0XSA9IGJsb2NrczFbNV0gPSBibG9ja3MxWzZdID0gYmxvY2tzMVs3XSA9IGJsb2NrczFbOF0gPSBibG9ja3MxWzldID0gYmxvY2tzMVsxMF0gPSBibG9ja3MxWzExXSA9IGJsb2NrczFbMTJdID0gYmxvY2tzMVsxM10gPSBibG9ja3MxWzE0XSA9IGJsb2NrczFbMTVdID0gMDsKICAgICAgICB9CiAgICAgICAgYmxvY2tzMVsxNF0gPSB0aGlzLiNoQnl0ZXMgPDwgMyB8IHRoaXMuI2J5dGVzID4+PiAyOTsKICAgICAgICBibG9ja3MxWzE1XSA9IHRoaXMuI2J5dGVzIDw8IDM7CiAgICAgICAgdGhpcy5oYXNoKCk7CiAgICB9CiAgICBoYXNoKCkgewogICAgICAgIGxldCBhID0gdGhpcy4jaDA7CiAgICAgICAgbGV0IGIgPSB0aGlzLiNoMTsKICAgICAgICBsZXQgYyA9IHRoaXMuI2gyOwogICAgICAgIGxldCBkID0gdGhpcy4jaDM7CiAgICAgICAgbGV0IGUgPSB0aGlzLiNoNDsKICAgICAgICBsZXQgZiA9IHRoaXMuI2g1OwogICAgICAgIGxldCBnID0gdGhpcy4jaDY7CiAgICAgICAgbGV0IGggPSB0aGlzLiNoNzsKICAgICAgICBjb25zdCBibG9ja3MxID0gdGhpcy4jYmxvY2tzOwogICAgICAgIGxldCBzMDsKICAgICAgICBsZXQgczE7CiAgICAgICAgbGV0IG1hajsKICAgICAgICBsZXQgdDE7CiAgICAgICAgbGV0IHQyOwogICAgICAgIGxldCBjaDsKICAgICAgICBsZXQgYWI7CiAgICAgICAgbGV0IGRhOwogICAgICAgIGxldCBjZDsKICAgICAgICBsZXQgYmM7CiAgICAgICAgZm9yKGxldCBqID0gMTY7IGogPCA2NDsgKytqKXsKICAgICAgICAgICAgdDEgPSBibG9ja3MxW2ogLSAxNV07CiAgICAgICAgICAgIHMwID0gKHQxID4+PiA3IHwgdDEgPDwgMjUpIF4gKHQxID4+PiAxOCB8IHQxIDw8IDE0KSBeIHQxID4+PiAzOwogICAgICAgICAgICB0MSA9IGJsb2NrczFbaiAtIDJdOwogICAgICAgICAgICBzMSA9ICh0MSA+Pj4gMTcgfCB0MSA8PCAxNSkgXiAodDEgPj4+IDE5IHwgdDEgPDwgMTMpIF4gdDEgPj4+IDEwOwogICAgICAgICAgICBibG9ja3MxW2pdID0gYmxvY2tzMVtqIC0gMTZdICsgczAgKyBibG9ja3MxW2ogLSA3XSArIHMxIDw8IDA7CiAgICAgICAgfQogICAgICAgIGJjID0gYiAmIGM7CiAgICAgICAgZm9yKGxldCBqMSA9IDA7IGoxIDwgNjQ7IGoxICs9IDQpewogICAgICAgICAgICBpZiAodGhpcy4jZmlyc3QpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLiNpczIyNCkgewogICAgICAgICAgICAgICAgICAgIGFiID0gMzAwMDMyOwogICAgICAgICAgICAgICAgICAgIHQxID0gYmxvY2tzMVswXSAtIDE0MTMyNTc4MTk7CiAgICAgICAgICAgICAgICAgICAgaCA9IHQxIC0gMTUwMDU0NTk5IDw8IDA7CiAgICAgICAgICAgICAgICAgICAgZCA9IHQxICsgMjQxNzcwNzcgPDwgMDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYWIgPSA3MDQ3NTExMDk7CiAgICAgICAgICAgICAgICAgICAgdDEgPSBibG9ja3MxWzBdIC0gMjEwMjQ0MjQ4OwogICAgICAgICAgICAgICAgICAgIGggPSB0MSAtIDE1MjE0ODY1MzQgPDwgMDsKICAgICAgICAgICAgICAgICAgICBkID0gdDEgKyAxNDM2OTQ1NjUgPDwgMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuI2ZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzMCA9IChhID4+PiAyIHwgYSA8PCAzMCkgXiAoYSA+Pj4gMTMgfCBhIDw8IDE5KSBeIChhID4+PiAyMiB8IGEgPDwgMTApOwogICAgICAgICAgICAgICAgczEgPSAoZSA+Pj4gNiB8IGUgPDwgMjYpIF4gKGUgPj4+IDExIHwgZSA8PCAyMSkgXiAoZSA+Pj4gMjUgfCBlIDw8IDcpOwogICAgICAgICAgICAgICAgYWIgPSBhICYgYjsKICAgICAgICAgICAgICAgIG1haiA9IGFiIF4gYSAmIGMgXiBiYzsKICAgICAgICAgICAgICAgIGNoID0gZSAmIGYgXiB+ZSAmIGc7CiAgICAgICAgICAgICAgICB0MSA9IGggKyBzMSArIGNoICsgS1tqMV0gKyBibG9ja3MxW2oxXTsKICAgICAgICAgICAgICAgIHQyID0gczAgKyBtYWo7CiAgICAgICAgICAgICAgICBoID0gZCArIHQxIDw8IDA7CiAgICAgICAgICAgICAgICBkID0gdDEgKyB0MiA8PCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHMwID0gKGQgPj4+IDIgfCBkIDw8IDMwKSBeIChkID4+PiAxMyB8IGQgPDwgMTkpIF4gKGQgPj4+IDIyIHwgZCA8PCAxMCk7CiAgICAgICAgICAgIHMxID0gKGggPj4+IDYgfCBoIDw8IDI2KSBeIChoID4+PiAxMSB8IGggPDwgMjEpIF4gKGggPj4+IDI1IHwgaCA8PCA3KTsKICAgICAgICAgICAgZGEgPSBkICYgYTsKICAgICAgICAgICAgbWFqID0gZGEgXiBkICYgYiBeIGFiOwogICAgICAgICAgICBjaCA9IGggJiBlIF4gfmggJiBmOwogICAgICAgICAgICB0MSA9IGcgKyBzMSArIGNoICsgS1tqMSArIDFdICsgYmxvY2tzMVtqMSArIDFdOwogICAgICAgICAgICB0MiA9IHMwICsgbWFqOwogICAgICAgICAgICBnID0gYyArIHQxIDw8IDA7CiAgICAgICAgICAgIGMgPSB0MSArIHQyIDw8IDA7CiAgICAgICAgICAgIHMwID0gKGMgPj4+IDIgfCBjIDw8IDMwKSBeIChjID4+PiAxMyB8IGMgPDwgMTkpIF4gKGMgPj4+IDIyIHwgYyA8PCAxMCk7CiAgICAgICAgICAgIHMxID0gKGcgPj4+IDYgfCBnIDw8IDI2KSBeIChnID4+PiAxMSB8IGcgPDwgMjEpIF4gKGcgPj4+IDI1IHwgZyA8PCA3KTsKICAgICAgICAgICAgY2QgPSBjICYgZDsKICAgICAgICAgICAgbWFqID0gY2QgXiBjICYgYSBeIGRhOwogICAgICAgICAgICBjaCA9IGcgJiBoIF4gfmcgJiBlOwogICAgICAgICAgICB0MSA9IGYgKyBzMSArIGNoICsgS1tqMSArIDJdICsgYmxvY2tzMVtqMSArIDJdOwogICAgICAgICAgICB0MiA9IHMwICsgbWFqOwogICAgICAgICAgICBmID0gYiArIHQxIDw8IDA7CiAgICAgICAgICAgIGIgPSB0MSArIHQyIDw8IDA7CiAgICAgICAgICAgIHMwID0gKGIgPj4+IDIgfCBiIDw8IDMwKSBeIChiID4+PiAxMyB8IGIgPDwgMTkpIF4gKGIgPj4+IDIyIHwgYiA8PCAxMCk7CiAgICAgICAgICAgIHMxID0gKGYgPj4+IDYgfCBmIDw8IDI2KSBeIChmID4+PiAxMSB8IGYgPDwgMjEpIF4gKGYgPj4+IDI1IHwgZiA8PCA3KTsKICAgICAgICAgICAgYmMgPSBiICYgYzsKICAgICAgICAgICAgbWFqID0gYmMgXiBiICYgZCBeIGNkOwogICAgICAgICAgICBjaCA9IGYgJiBnIF4gfmYgJiBoOwogICAgICAgICAgICB0MSA9IGUgKyBzMSArIGNoICsgS1tqMSArIDNdICsgYmxvY2tzMVtqMSArIDNdOwogICAgICAgICAgICB0MiA9IHMwICsgbWFqOwogICAgICAgICAgICBlID0gYSArIHQxIDw8IDA7CiAgICAgICAgICAgIGEgPSB0MSArIHQyIDw8IDA7CiAgICAgICAgfQogICAgICAgIHRoaXMuI2gwID0gdGhpcy4jaDAgKyBhIDw8IDA7CiAgICAgICAgdGhpcy4jaDEgPSB0aGlzLiNoMSArIGIgPDwgMDsKICAgICAgICB0aGlzLiNoMiA9IHRoaXMuI2gyICsgYyA8PCAwOwogICAgICAgIHRoaXMuI2gzID0gdGhpcy4jaDMgKyBkIDw8IDA7CiAgICAgICAgdGhpcy4jaDQgPSB0aGlzLiNoNCArIGUgPDwgMDsKICAgICAgICB0aGlzLiNoNSA9IHRoaXMuI2g1ICsgZiA8PCAwOwogICAgICAgIHRoaXMuI2g2ID0gdGhpcy4jaDYgKyBnIDw8IDA7CiAgICAgICAgdGhpcy4jaDcgPSB0aGlzLiNoNyArIGggPDwgMDsKICAgIH0KICAgIGhleCgpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgaDAgPSB0aGlzLiNoMDsKICAgICAgICBjb25zdCBoMSA9IHRoaXMuI2gxOwogICAgICAgIGNvbnN0IGgyID0gdGhpcy4jaDI7CiAgICAgICAgY29uc3QgaDMgPSB0aGlzLiNoMzsKICAgICAgICBjb25zdCBoNCA9IHRoaXMuI2g0OwogICAgICAgIGNvbnN0IGg1ID0gdGhpcy4jaDU7CiAgICAgICAgY29uc3QgaDYgPSB0aGlzLiNoNjsKICAgICAgICBjb25zdCBoNyA9IHRoaXMuI2g3OwogICAgICAgIGxldCBoZXggPSBIRVhfQ0hBUlNbaDAgPj4gMjggJiAxNV0gKyBIRVhfQ0hBUlNbaDAgPj4gMjQgJiAxNV0gKyBIRVhfQ0hBUlNbaDAgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlNbaDAgPj4gMTYgJiAxNV0gKyBIRVhfQ0hBUlNbaDAgPj4gMTIgJiAxNV0gKyBIRVhfQ0hBUlNbaDAgPj4gOCAmIDE1XSArIEhFWF9DSEFSU1toMCA+PiA0ICYgMTVdICsgSEVYX0NIQVJTW2gwICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDI0ICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDIwICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDEyICYgMTVdICsgSEVYX0NIQVJTW2gxID4+IDggJiAxNV0gKyBIRVhfQ0hBUlNbaDEgPj4gNCAmIDE1XSArIEhFWF9DSEFSU1toMSAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiAyOCAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiAyNCAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiAyMCAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiAxNiAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiAxMiAmIDE1XSArIEhFWF9DSEFSU1toMiA+PiA4ICYgMTVdICsgSEVYX0NIQVJTW2gyID4+IDQgJiAxNV0gKyBIRVhfQ0hBUlNbaDIgJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gMjggJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gMjQgJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gMTYgJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gMTIgJiAxNV0gKyBIRVhfQ0hBUlNbaDMgPj4gOCAmIDE1XSArIEhFWF9DSEFSU1toMyA+PiA0ICYgMTVdICsgSEVYX0NIQVJTW2gzICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDI0ICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDIwICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDEyICYgMTVdICsgSEVYX0NIQVJTW2g0ID4+IDggJiAxNV0gKyBIRVhfQ0hBUlNbaDQgPj4gNCAmIDE1XSArIEhFWF9DSEFSU1toNCAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiAyOCAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiAyNCAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiAyMCAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiAxNiAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiAxMiAmIDE1XSArIEhFWF9DSEFSU1toNSA+PiA4ICYgMTVdICsgSEVYX0NIQVJTW2g1ID4+IDQgJiAxNV0gKyBIRVhfQ0hBUlNbaDUgJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gMjggJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gMjQgJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gMTYgJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gMTIgJiAxNV0gKyBIRVhfQ0hBUlNbaDYgPj4gOCAmIDE1XSArIEhFWF9DSEFSU1toNiA+PiA0ICYgMTVdICsgSEVYX0NIQVJTW2g2ICYgMTVdOwogICAgICAgIGlmICghdGhpcy4jaXMyMjQpIHsKICAgICAgICAgICAgaGV4ICs9IEhFWF9DSEFSU1toNyA+PiAyOCAmIDE1XSArIEhFWF9DSEFSU1toNyA+PiAyNCAmIDE1XSArIEhFWF9DSEFSU1toNyA+PiAyMCAmIDE1XSArIEhFWF9DSEFSU1toNyA+PiAxNiAmIDE1XSArIEhFWF9DSEFSU1toNyA+PiAxMiAmIDE1XSArIEhFWF9DSEFSU1toNyA+PiA4ICYgMTVdICsgSEVYX0NIQVJTW2g3ID4+IDQgJiAxNV0gKyBIRVhfQ0hBUlNbaDcgJiAxNV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBoZXg7CiAgICB9CiAgICB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy5oZXgoKTsKICAgIH0KICAgIGRpZ2VzdCgpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgaDAgPSB0aGlzLiNoMDsKICAgICAgICBjb25zdCBoMSA9IHRoaXMuI2gxOwogICAgICAgIGNvbnN0IGgyID0gdGhpcy4jaDI7CiAgICAgICAgY29uc3QgaDMgPSB0aGlzLiNoMzsKICAgICAgICBjb25zdCBoNCA9IHRoaXMuI2g0OwogICAgICAgIGNvbnN0IGg1ID0gdGhpcy4jaDU7CiAgICAgICAgY29uc3QgaDYgPSB0aGlzLiNoNjsKICAgICAgICBjb25zdCBoNyA9IHRoaXMuI2g3OwogICAgICAgIGNvbnN0IGFyciA9IFsKICAgICAgICAgICAgaDAgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGgwID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoMCA+PiA4ICYgMjU1LAogICAgICAgICAgICBoMCAmIDI1NSwKICAgICAgICAgICAgaDEgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGgxID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoMSA+PiA4ICYgMjU1LAogICAgICAgICAgICBoMSAmIDI1NSwKICAgICAgICAgICAgaDIgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGgyID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoMiA+PiA4ICYgMjU1LAogICAgICAgICAgICBoMiAmIDI1NSwKICAgICAgICAgICAgaDMgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGgzID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoMyA+PiA4ICYgMjU1LAogICAgICAgICAgICBoMyAmIDI1NSwKICAgICAgICAgICAgaDQgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGg0ID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoNCA+PiA4ICYgMjU1LAogICAgICAgICAgICBoNCAmIDI1NSwKICAgICAgICAgICAgaDUgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGg1ID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoNSA+PiA4ICYgMjU1LAogICAgICAgICAgICBoNSAmIDI1NSwKICAgICAgICAgICAgaDYgPj4gMjQgJiAyNTUsCiAgICAgICAgICAgIGg2ID4+IDE2ICYgMjU1LAogICAgICAgICAgICBoNiA+PiA4ICYgMjU1LAogICAgICAgICAgICBoNiAmIDI1NSwgCiAgICAgICAgXTsKICAgICAgICBpZiAoIXRoaXMuI2lzMjI0KSB7CiAgICAgICAgICAgIGFyci5wdXNoKGg3ID4+IDI0ICYgMjU1LCBoNyA+PiAxNiAmIDI1NSwgaDcgPj4gOCAmIDI1NSwgaDcgJiAyNTUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJyOwogICAgfQogICAgYXJyYXkoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGlnZXN0KCk7CiAgICB9CiAgICBhcnJheUJ1ZmZlcigpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuI2lzMjI0ID8gMjggOiAzMik7CiAgICAgICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMCwgdGhpcy4jaDApOwogICAgICAgIGRhdGFWaWV3LnNldFVpbnQzMig0LCB0aGlzLiNoMSk7CiAgICAgICAgZGF0YVZpZXcuc2V0VWludDMyKDgsIHRoaXMuI2gyKTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMTIsIHRoaXMuI2gzKTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMTYsIHRoaXMuI2g0KTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMjAsIHRoaXMuI2g1KTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMjQsIHRoaXMuI2g2KTsKICAgICAgICBpZiAoIXRoaXMuI2lzMjI0KSB7CiAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQzMigyOCwgdGhpcy4jaDcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmZmVyOwogICAgfQp9CmNsYXNzIEhtYWNTaGEyNTYgZXh0ZW5kcyBTaGEyNTYgewogICAgI2lubmVyOwogICAgI2lzMjI0OwogICAgI29LZXlQYWQ7CiAgICAjc2hhcmVkTWVtb3J5OwogICAgY29uc3RydWN0b3Ioc2VjcmV0S2V5LCBpczIyNDIgPSBmYWxzZSwgc2hhcmVkTWVtb3J5MiA9IGZhbHNlKXsKICAgICAgICBzdXBlcihpczIyNDIsIHNoYXJlZE1lbW9yeTIpOwogICAgICAgIGxldCBrZXk7CiAgICAgICAgaWYgKHR5cGVvZiBzZWNyZXRLZXkgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gW107CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHNlY3JldEtleS5sZW5ndGg7CiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7CiAgICAgICAgICAgICAgICBsZXQgY29kZSA9IHNlY3JldEtleS5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgICAgaWYgKGNvZGUgPCAxMjgpIHsKICAgICAgICAgICAgICAgICAgICBieXRlc1tpbmRleCsrXSA9IGNvZGU7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAyMDQ4KSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxOTIgfCBjb2RlID4+IDY7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxMjggfCBjb2RlICYgNjM7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCA1NTI5NiB8fCBjb2RlID49IDU3MzQ0KSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAyMjQgfCBjb2RlID4+IDEyOwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMTI4IHwgY29kZSA+PiA2ICYgNjM7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxMjggfCBjb2RlICYgNjM7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvZGUgPSA2NTUzNiArICgoY29kZSAmIDEwMjMpIDw8IDEwIHwgc2VjcmV0S2V5LmNoYXJDb2RlQXQoKytpKSAmIDEwMjMpOwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMjQwIHwgY29kZSA+PiAxODsKICAgICAgICAgICAgICAgICAgICBieXRlc1tpbmRleCsrXSA9IDEyOCB8IGNvZGUgPj4gMTIgJiA2MzsKICAgICAgICAgICAgICAgICAgICBieXRlc1tpbmRleCsrXSA9IDEyOCB8IGNvZGUgPj4gNiAmIDYzOwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMTI4IHwgY29kZSAmIDYzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGtleSA9IGJ5dGVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChzZWNyZXRLZXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgICAgICAgICAgICAga2V5ID0gbmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGtleSA9IHNlY3JldEtleTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoa2V5Lmxlbmd0aCA+IDY0KSB7CiAgICAgICAgICAgIGtleSA9IG5ldyBTaGEyNTYoaXMyMjQyLCB0cnVlKS51cGRhdGUoa2V5KS5hcnJheSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvS2V5UGFkID0gW107CiAgICAgICAgY29uc3QgaUtleVBhZCA9IFtdOwogICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCA2NDsgKytpKXsKICAgICAgICAgICAgY29uc3QgYiA9IGtleVtpXSB8fCAwOwogICAgICAgICAgICBvS2V5UGFkW2ldID0gOTIgXiBiOwogICAgICAgICAgICBpS2V5UGFkW2ldID0gNTQgXiBiOwogICAgICAgIH0KICAgICAgICB0aGlzLnVwZGF0ZShpS2V5UGFkKTsKICAgICAgICB0aGlzLiNvS2V5UGFkID0gb0tleVBhZDsKICAgICAgICB0aGlzLiNpbm5lciA9IHRydWU7CiAgICAgICAgdGhpcy4jaXMyMjQgPSBpczIyNDI7CiAgICAgICAgdGhpcy4jc2hhcmVkTWVtb3J5ID0gc2hhcmVkTWVtb3J5MjsKICAgIH0KICAgIGZpbmFsaXplKCkgewogICAgICAgIHN1cGVyLmZpbmFsaXplKCk7CiAgICAgICAgaWYgKHRoaXMuI2lubmVyKSB7CiAgICAgICAgICAgIHRoaXMuI2lubmVyID0gZmFsc2U7CiAgICAgICAgICAgIGNvbnN0IGlubmVySGFzaCA9IHRoaXMuYXJyYXkoKTsKICAgICAgICAgICAgc3VwZXIuaW5pdCh0aGlzLiNpczIyNCwgdGhpcy4jc2hhcmVkTWVtb3J5KTsKICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy4jb0tleVBhZCk7CiAgICAgICAgICAgIHRoaXMudXBkYXRlKGlubmVySGFzaCk7CiAgICAgICAgICAgIHN1cGVyLmZpbmFsaXplKCk7CiAgICAgICAgfQogICAgfQp9CmNvbnN0IFJhbmdlMSA9IChzdGFydCwgZW5kKT0+ewogICAgcmV0dXJuIEFycmF5LmZyb20oewogICAgICAgIGxlbmd0aDogZW5kIC0gc3RhcnQgKyAxCiAgICB9LCAodiwgayk9PmsgKyBzdGFydAogICAgKTsKfTsKY29uc3QgUmFuZ2VSYW5kb20gPSAoYmVnaW4sIGVuZCk9PnsKICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZW5kIC0gYmVnaW4pICsgYmVnaW4pOwp9Owpjb25zdCBpc051bGwgPSAodmFsdWUpPT57CiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQ7Cn07CmNvbnN0IHNwbGl0RmlsZU5hbWUgPSAoZmlsZXBhdGgpPT4oKGFycik9PnsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBuYW1lOiBhcnJbMF0sCiAgICAgICAgICAgIGV4dGVudGlvbjogYXJyWzFdCiAgICAgICAgfTsKICAgIH0pKGZpbGVwYXRoLnNwbGl0KC8oPz1cLlteLl0rJCkvKSkKOwpjb25zdCBidWZmZXJUb0hhc2ggPSAoaGFzaGFibGUpPT57CiAgICBjb25zdCBtZXNzYWdlID0gaGFzaGFibGU7CiAgICBjb25zdCBzaGEyNTYgPSBuZXcgU2hhMjU2KCk7CiAgICBzaGEyNTYudXBkYXRlKG1lc3NhZ2UpOwogICAgcmV0dXJuIHNoYTI1Ni5oZXgoKTsKfTsKY29uc3QgcmVsSGFzaFBhdGggPSAoaGFzaCwgbnVtKT0+ewogICAgY29uc3QgQSA9IEFycmF5LmZyb20oQXJyYXkobnVtKSwgKHYsIGspPT5rCiAgICApOwogICAgcmV0dXJuIEEubWFwKChpMSk9Pmhhc2guc3Vic3RyaW5nKDAsIGkxICsgMSkKICAgICkuam9pbigiLyIpOwp9Owpjb25zdCBVcmlUb0hhc2ggPSAodXJpKT0+ewogICAgcmV0dXJuIHVyaS5yZXBsYWNlKC9eW2Etel0qOi8sICIiKTsKfTsKY29uc3QgSGFzaFRvVXJpID0gKGhhc2gpPT57CiAgICByZXR1cm4gYGVuc29yYmk6JHtoYXNofWA7Cn07CmNvbnN0IGdldFZlY3RvclRhZ01ldGEgPSAoKT0+ewogICAgY29uc3QgaGFzaCA9IGJ1ZmZlclRvSGFzaCgidGFnIik7CiAgICByZXR1cm4gewogICAgICAgIGtleTogaGFzaCwKICAgICAgICB2YWx1ZTogewogICAgICAgICAgICB0YWc6IDEKICAgICAgICB9CiAgICB9Owp9Owpjb25zdCBoYXNoVG9SZW1vdGVSZXNvdXJjZVBhdGggPSAoaGFzaCk9PnsKICAgIHJldHVybiBgJHtyZWxIYXNoUGF0aChoYXNoLCAzKX0vYDsKfTsKY29uc3Qgb3JnbW9kZVJlc291cmNlUGF0aCA9IChoYXNoKT0+ewogICAgcmV0dXJuIHsKICAgICAgICBwcmVmaXg6ICJzdG9yYWdlL29yZy8iLAogICAgICAgIGhhc2hEaXI6IGhhc2hUb1JlbW90ZVJlc291cmNlUGF0aChoYXNoKSwKICAgICAgICBoYXNoOiBoYXNoLAogICAgICAgIGV4dGVudGlvbjogIi5vcmciCiAgICB9Owp9Owpjb25zdCBibG9iUmVzb3VyY2VQYXRoID0gKGhhc2gpPT57CiAgICByZXR1cm4gewogICAgICAgIHByZWZpeDogInN0b3JhZ2UvYmxvYi8iLAogICAgICAgIGhhc2hEaXI6IGhhc2hUb1JlbW90ZVJlc291cmNlUGF0aChoYXNoKSwKICAgICAgICBoYXNoOiBoYXNoCiAgICB9Owp9Owpjb25zdCBtZXRhUmVzb3VyY2VQYXRoID0gKGhhc2gpPT57CiAgICByZXR1cm4gewogICAgICAgIHByZWZpeDogInN0b3JhZ2UvbWV0YS8iLAogICAgICAgIGhhc2hEaXI6IGhhc2hUb1JlbW90ZVJlc291cmNlUGF0aChoYXNoKSwKICAgICAgICBoYXNoOiBoYXNoLAogICAgICAgIGV4dGVudGlvbjogIi5qc29uIgogICAgfTsKfTsKY29uc3QgdG9kYXlTdHJpbmcgPSAoKT0+ewogICAgcmV0dXJuIG5ldyBSZWdFeHAoIl5bMC05XSstWzAtOV0rLVswLTldKyIpLmV4ZWMobmV3IERhdGUoKS50b0lTT1N0cmluZygpKT8uWzBdOwp9OwpjbGFzcyBOb2RlMSB7CiAgICByZWZlcmVycyA9IHsKICAgIH07CiAgICBjb25zdHJ1Y3RvcihoYXNoMiwgdGl0bGUsIGNyZWF0ZWRBdCwgdGh1bWJuYWlsLCBkZXNjcmlwdGlvbiwgdmVjdG9yLCByZW1vdGVVcmkpewogICAgICAgIHRoaXMuaGFzaCA9IGhhc2gyOwogICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTsKICAgICAgICB0aGlzLmNyZWF0ZWRBdCA9IGNyZWF0ZWRBdDsKICAgICAgICB0aGlzLnRodW1ibmFpbCA9IHRodW1ibmFpbDsKICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247CiAgICAgICAgdGhpcy52ZWN0b3IgPSB2ZWN0b3I7CiAgICAgICAgdGhpcy5yZW1vdGVVcmkgPSByZW1vdGVVcmk7CiAgICAgICAgY29uc29sZS5sb2coImNyZWF0ZSBub2RlIGluc3RhbmNlOiIgKyBoYXNoMik7CiAgICAgICAgY29uc3QgYWxsaGFzaCA9IGJ1ZmZlclRvSGFzaCgibm9kZSIpOwogICAgICAgIHZlY3RvclthbGxoYXNoXSA9IHZlY3RvclthbGxoYXNoXSA/PyB7CiAgICAgICAgICAgIHRhZzogMQogICAgICAgIH07CiAgICAgICAgY29uc3QgdG9kYXkgPSB0b2RheVN0cmluZygpOwogICAgICAgIGNvbnNvbGUubG9nKHRvZGF5KTsKICAgICAgICBpZiAoIWlzTnVsbCh0b2RheSkpIHsKICAgICAgICAgICAgY29uc3QgdG9kYXlIYXNoID0gYnVmZmVyVG9IYXNoKHRvZGF5KTsKICAgICAgICAgICAgdmVjdG9yW3RvZGF5SGFzaF0gPSB2ZWN0b3JbdG9kYXlIYXNoXSA/PyB7CiAgICAgICAgICAgICAgICB0YWc6IDEKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgdmFsaWRhdGlvbiA9IChtZXRhKT0+ewogICAgICAgIGlmIChpc051bGwobWV0YSkpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEuaGFzaCkpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEudGl0bGUpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYgKGlzTnVsbChtZXRhLmNyZWF0ZWRBdCkpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEudGh1bWJuYWlsKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChpc051bGwobWV0YS5kZXNjcmlwdGlvbikpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEudmVjdG9yKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChpc051bGwobWV0YS5yZWZlcmVycykpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEucmVtb3RlVXJpKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfTsKfQpjbGFzcyBFdmVudERpc3BhdGNoZXIgewogICAgTGlzdG5lcnNNYXAgPSB7CiAgICB9OwogICAgZ2V0TGlzdGVuZXJzID0gKGV2ZW50VHlwZSk9PnsKICAgICAgICBpZiAoIXRoaXMuTGlzdG5lcnNNYXBbZXZlbnRUeXBlXSkgewogICAgICAgICAgICB0aGlzLkxpc3RuZXJzTWFwW2V2ZW50VHlwZV0gPSBbXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuTGlzdG5lcnNNYXBbZXZlbnRUeXBlXTsKICAgIH07CiAgICBhZGRFdmVudExpc3RuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgb3B0aW9ucyA9IHsKICAgIH0pIHsKICAgICAgICBjb25zdCBsaXN0bmVyID0gewogICAgICAgICAgICBvbmVTaG90OiAhIW9wdGlvbnMub25lU2hvdCwKICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrCiAgICAgICAgfTsKICAgICAgICB0aGlzLmdldExpc3RlbmVycyhldmVudFR5cGUpLnB1c2gobGlzdG5lcik7CiAgICB9CiAgICByZW1vdmVFdmVudExpc3RuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaykgewogICAgICAgIGNvbnN0IGxpc3RuZXJMaXN0ID0gdGhpcy5nZXRMaXN0ZW5lcnMoZXZlbnRUeXBlKTsKICAgICAgICBjb25zdCBpbmRleCA9IGxpc3RuZXJMaXN0LmZpbmRJbmRleCgobGlzdG5lcik9PnsKICAgICAgICAgICAgbGlzdG5lciA9PT0gY2FsbGJhY2s7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICAgICAgbGlzdG5lckxpc3Quc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9CiAgICB9CiAgICByZW1vdmVBbGxFdmVudExpc3RuZXIoKSB7CiAgICAgICAgdGhpcy5MaXN0bmVyc01hcCA9IHsKICAgICAgICB9OwogICAgfQogICAgZGlzcGF0Y2hFdmVudChldmVudCkgewogICAgICAgIGNvbnN0IGxpc3RuZXJMaXN0ID0gdGhpcy5nZXRMaXN0ZW5lcnMoZXZlbnQudHlwZSk7CiAgICAgICAgbGlzdG5lckxpc3QuZm9yRWFjaCgoZSk9PnsKICAgICAgICAgICAgZS5jYWxsYmFjayhldmVudCk7CiAgICAgICAgfSk7CiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBsaXN0bmVyTGlzdC5maWx0ZXIoKGxpc3RuZXIpPT4hbGlzdG5lci5vbmVTaG90CiAgICAgICAgKTsKICAgICAgICB0aGlzLkxpc3RuZXJzTWFwW2V2ZW50LnR5cGVdID0gZmlsdGVyZWQ7CiAgICB9Cn0KY29uc3QgaXNNYXRyaXggPSAobyk9PnsKICAgIGlmIChBcnJheS5pc0FycmF5KG8pKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfTsKY29uc3QgbXVsdGlwbHlWZWN0b3IgPSAobTAsIG0xKT0+ewogICAgcmV0dXJuIHsKICAgICAgICB4OiBtMFswXSAqIG0xLnggKyBtMFsxXSAqIG0xLnkgKyBtMFsyXSwKICAgICAgICB5OiBtMFszXSAqIG0xLnggKyBtMFs0XSAqIG0xLnkgKyBtMFs1XQogICAgfTsKfTsKY29uc3QgbXVsdGlwbHlNYXRyaXggPSAobTAsIG0xKT0+ewogICAgcmV0dXJuIFsKICAgICAgICBtMFswXSAqIG0xWzBdICsgbTBbMV0gKiBtMVszXSArIG0wWzJdICogbTFbNl0sCiAgICAgICAgbTBbMF0gKiBtMVsxXSArIG0wWzFdICogbTFbNF0gKyBtMFsyXSAqIG0xWzddLAogICAgICAgIG0wWzBdICogbTFbMl0gKyBtMFsxXSAqIG0xWzVdICsgbTBbMl0gKiBtMVs4XSwKICAgICAgICBtMFszXSAqIG0xWzBdICsgbTBbNF0gKiBtMVszXSArIG0wWzVdICogbTFbNl0sCiAgICAgICAgbTBbM10gKiBtMVsxXSArIG0wWzRdICogbTFbNF0gKyBtMFs1XSAqIG0xWzddLAogICAgICAgIG0wWzNdICogbTFbMl0gKyBtMFs0XSAqIG0xWzVdICsgbTBbNV0gKiBtMVs4XSwKICAgICAgICBtMFs2XSAqIG0xWzBdICsgbTBbN10gKiBtMVszXSArIG0wWzhdICogbTFbNl0sCiAgICAgICAgbTBbNl0gKiBtMVsxXSArIG0wWzddICogbTFbNF0gKyBtMFs4XSAqIG0xWzddLAogICAgICAgIG0wWzZdICogbTFbMl0gKyBtMFs3XSAqIG0xWzVdICsgbTBbOF0gKiBtMVs4XSwgCiAgICBdOwp9Owpjb25zdCB0cmFuc2xhdGVNYXRyaXggPSAoeCwgeSk9PnsKICAgIHJldHVybiBbCiAgICAgICAgMSwKICAgICAgICAwLAogICAgICAgIHgsCiAgICAgICAgMCwKICAgICAgICAxLAogICAgICAgIHksCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDEKICAgIF07Cn07CmNvbnN0IHNjYWxlTWF0cml4ID0gKHgsIHkpPT57CiAgICByZXR1cm4gWwogICAgICAgIHgsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgeSwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAxCiAgICBdOwp9OwpjbGFzcyBDYW52YXNNYW5hZ2VyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHsKICAgIF90cmFuc2xhdGluZyA9IGZhbHNlOwogICAgX3ByZVBvcyA9IHsKICAgICAgICB4OiAwLAogICAgICAgIHk6IDAKICAgIH07CiAgICBfcmVkcmF3RmxhZyA9IHRydWU7CiAgICBfbSA9IFsKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMAogICAgXTsKICAgIF9pbnYgPSBbCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAKICAgIF07CiAgICBfdnYgPSB7CiAgICAgICAgeDogMCwKICAgICAgICB5OiAwLAogICAgICAgIHc6IDAsCiAgICAgICAgaDogMAogICAgfTsKICAgIF92cCA9IHsKICAgICAgICB4OiAwLAogICAgICAgIHk6IDAsCiAgICAgICAgdzogMCwKICAgICAgICBoOiAwCiAgICB9OwogICAgX3Jlc2l6ZVRpbWVvdXRJZCA9IC0xOwogICAgX3Jlc2l6ZVR5cGUgPSAnbm8gc2NhbGVNYXRyaXggdG9wIGxlZnQnOwogICAgd2lkdGggPSAoKT0+ewogICAgICAgIHJldHVybiB0aGlzLmdyYXBoQ2FudmFzID8gdGhpcy5ncmFwaENhbnZhcy53aWR0aCA6IC0xOwogICAgfTsKICAgIGhlaWdodCA9ICgpPT57CiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhDYW52YXMgPyB0aGlzLmdyYXBoQ2FudmFzLmhlaWdodCA6IC0xOwogICAgfTsKICAgIGlkID0gKCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaENhbnZhcyA/IHRoaXMuZ3JhcGhDYW52YXMuaWQgOiAiIjsKICAgIH07CiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudDEsIHJvb3ROb2RlKXsKICAgICAgICBzdXBlcigpOwogICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDE7CiAgICAgICAgdGhpcy5yb290Tm9kZSA9IHJvb3ROb2RlOwogICAgICAgIHRoaXMuZ3JhcGhDYW52YXMgPSBkb2N1bWVudDEuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5zdHlsZS53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoICsgJ3B4JzsKICAgICAgICB0aGlzLmdyYXBoQ2FudmFzLnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArICdweCc7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy53aWR0aCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVyV2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lckhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsKICAgICAgICB0aGlzLmdyYXBoQ2FudmFzLmlkID0gIm5ldHdvcmstZ3JhcGgtY2FudmFzIjsKICAgICAgICByb290Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLmdyYXBoQ2FudmFzKTsKICAgIH0KICAgIGluaXQgPSAoKT0+ewogICAgICAgIHRoaXMuaW5pdE1vZGVsKCk7CiAgICAgICAgdGhpcy51cGRhdGVEb20oKTsKICAgICAgICB0aGlzLmluaXRDb250cm9sbGVyKCk7CiAgICB9OwogICAgaW5pdE1vZGVsID0gKCk9PnsKICAgICAgICB0aGlzLl90cmFuc2xhdGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMuX3JlZHJhd0ZsYWcgPSB0cnVlOwogICAgICAgIHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCA9IC0xOwogICAgICAgIHRoaXMuX3Jlc2l6ZVR5cGUgPSAnbm8gc2NhbGVNYXRyaXggdG9wIGxlZnQnOwogICAgICAgIHRoaXMudXBkYXRlVmlld1BvcnQoKTsKICAgICAgICB0aGlzLl92diA9IHsKICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgdzogdGhpcy5fdnAudywKICAgICAgICAgICAgaDogdGhpcy5fdnAuaAogICAgICAgIH07CiAgICAgICAgdGhpcy51cGRhdGVQcmpNYXRyaXgoKTsKICAgIH07CiAgICBpbml0Q29udHJvbGxlciA9ICgpPT57CiAgICAgICAgaWYgKCF0aGlzLmdyYXBoQ2FudmFzKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIChlKT0+ewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gewogICAgICAgICAgICAgICAgdHlwZTogJ2RibGNsaWNrJywKICAgICAgICAgICAgICAgIHdoaWNoOiBlLndoaWNoCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHN1cGVyLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZ3JhcGhDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpPT57CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNsYXRpbmcpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkgewogICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRpbmcgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGN1cnNvclBvcyA9IHsKICAgICAgICAgICAgICAgIHg6IGUucGFnZVgsCiAgICAgICAgICAgICAgICB5OiBlLnBhZ2VZCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuX3ByZVBvcyA9IHRoaXMuc2NyZWVuVG9Xb3JsZChjdXJzb3JQb3MpOwogICAgICAgICAgICBjb25zdCBldmVudCA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdtb3VzZWRvd24nLAogICAgICAgICAgICAgICAgd2hpY2g6IGUud2hpY2gKICAgICAgICAgICAgfTsKICAgICAgICAgICAgc3VwZXIuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSk9PnsKICAgICAgICAgICAgY29uc3QgY3Vyc29yUG9zID0gewogICAgICAgICAgICAgICAgeDogZS5wYWdlWCwKICAgICAgICAgICAgICAgIHk6IGUucGFnZVkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY29uc3QgY3VyUG9zID0gdGhpcy5zY3JlZW5Ub1dvcmxkKGN1cnNvclBvcyk7CiAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc2xhdGluZykgewogICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUoewogICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3ByZVBvcy54IC0gY3VyUG9zLngsCiAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcHJlUG9zLnkgLSBjdXJQb3MueQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLl9wcmVQb3MgPSB0aGlzLnNjcmVlblRvV29ybGQoY3Vyc29yUG9zKTsKICAgICAgICAgICAgICAgIHRoaXMuX3JlZHJhd0ZsYWcgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21vdXNlbW92ZScsCiAgICAgICAgICAgICAgICAgICAgd2hpY2g6IGUud2hpY2gsCiAgICAgICAgICAgICAgICAgICAgeDogY3VyUG9zLngsCiAgICAgICAgICAgICAgICAgICAgeTogY3VyUG9zLnkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBzdXBlci5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRoaXMuZ3JhcGhDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIChlKT0+ewogICAgICAgICAgICB0aGlzLl90cmFuc2xhdGluZyA9IGZhbHNlOwogICAgICAgICAgICBjb25zdCBldmVudCA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdtb3VzZXVwJywKICAgICAgICAgICAgICAgIHdoaWNoOiBlLndoaWNoCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHN1cGVyLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZ3JhcGhDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIChlKT0+ewogICAgICAgICAgICBpZiAodGhpcy5fcmVzaXplVGltZW91dElkICE9PSAtMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGN1cnNvclBvcyA9IHsKICAgICAgICAgICAgICAgIHg6IGUucGFnZVgsCiAgICAgICAgICAgICAgICB5OiBlLnBhZ2VZCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IGN1clBvcyA9IHRoaXMuc2NyZWVuVG9Xb3JsZChjdXJzb3JQb3MpOwogICAgICAgICAgICBjb25zdCByYXRlID0gZS53aGVlbERlbHRhID4gMCA/IDEgLyAxLjIgOiAxLjI7CiAgICAgICAgICAgIHRoaXMuc2NhbGUoY3VyUG9zLCByYXRlKTsKICAgICAgICAgICAgdGhpcy5fcmVkcmF3RmxhZyA9IHRydWU7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZSk9PnsKICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZXNpemVUaW1lb3V0SWQpOwogICAgICAgICAgICAgICAgdGhpcy5fcmVzaXplVGltZW91dElkID0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fcmVzaXplVGltZW91dElkID0gc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVR5cGUgPT09ICdzY2FsZU1hdHJpeCBjZW50ZXInKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVTY2FsZUNlbnRlcigpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9yZXNpemVUeXBlID09PSAnc2NhbGVNYXRyaXggdG9wIGxlZnQnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVTY2FsZVRvcExlZnQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcmVzaXplVHlwZSA9PT0gJ25vIHNjYWxlTWF0cml4IGNlbnRlcicpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZU5vU2NhbGVDZW50ZXIoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcmVzaXplVHlwZSA9PT0gJ25vIHNjYWxlTWF0cml4IHRvcCBsZWZ0JykgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplTm9TY2FsZVRvcExlZnQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRG9tKCk7CiAgICAgICAgICAgICAgICB0aGlzLl9yZWRyYXdGbGFnID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCA9IC0xOwogICAgICAgICAgICB9LCA1MDApOwogICAgICAgIH0pOwogICAgfTsKICAgIHVwZGF0ZVZpZXdQb3J0ID0gKCk9PnsKICAgICAgICB0aGlzLl92cCA9IHsKICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgdzogd2luZG93LmlubmVyV2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywKICAgICAgICAgICAgaDogd2luZG93LmlubmVySGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW8KICAgICAgICB9OwogICAgfTsKICAgIHVwZGF0ZVByak1hdHJpeCA9ICgpPT57CiAgICAgICAgY29uc3QgdHJhbnMgPSB0cmFuc2xhdGVNYXRyaXgoLXRoaXMuX3Z2LngsIC10aGlzLl92di55KTsKICAgICAgICBjb25zdCBpbnZUcmFucyA9IHRyYW5zbGF0ZU1hdHJpeCh0aGlzLl92di54LCB0aGlzLl92di55KTsKICAgICAgICBjb25zdCBzY2FsZSA9IHNjYWxlTWF0cml4KHRoaXMuX3ZwLncgLyB0aGlzLl92di53LCB0aGlzLl92cC5oIC8gdGhpcy5fdnYuaCk7CiAgICAgICAgY29uc3QgaW52U2NhbGUgPSBzY2FsZU1hdHJpeCh0aGlzLl92di53IC8gdGhpcy5fdnAudywgdGhpcy5fdnYuaCAvIHRoaXMuX3ZwLmgpOwogICAgICAgIHRoaXMuX20gPSBtdWx0aXBseU1hdHJpeChzY2FsZSwgdHJhbnMpOwogICAgICAgIHRoaXMuX2ludiA9IG11bHRpcGx5TWF0cml4KGludlRyYW5zLCBpbnZTY2FsZSk7CiAgICB9OwogICAgcmVzaXplU2NhbGVDZW50ZXIgPSAoKT0+ewogICAgICAgIGNvbnN0IHJhdGUgPSB7CiAgICAgICAgICAgIHg6IHRoaXMuX3Z2LncgLyB0aGlzLl92cC53LAogICAgICAgICAgICB5OiB0aGlzLl92di5oIC8gdGhpcy5fdnAuaAogICAgICAgIH07CiAgICAgICAgY29uc3QgdnZzcSA9IHsKICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgc2l6ZTogMAogICAgICAgIH07CiAgICAgICAgaWYgKHRoaXMuX3Z2LncgPiB0aGlzLl92di5oKSB7CiAgICAgICAgICAgIHZ2c3EueSA9IHRoaXMuX3Z2Lnk7CiAgICAgICAgICAgIHZ2c3Euc2l6ZSA9IHRoaXMuX3Z2Lmg7CiAgICAgICAgICAgIHZ2c3EueCA9IHRoaXMuX3Z2LnggKyAodGhpcy5fdnYudyAtIHZ2c3Euc2l6ZSkgLyAyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZ2c3EueCA9IHRoaXMuX3Z2Lng7CiAgICAgICAgICAgIHZ2c3Euc2l6ZSA9IHRoaXMuX3Z2Lnc7CiAgICAgICAgICAgIHZ2c3EueSA9IHRoaXMuX3Z2LnkgKyAodGhpcy5fdnYuaCAtIHZ2c3Euc2l6ZSkgLyAyOwogICAgICAgIH0KICAgICAgICB0aGlzLnVwZGF0ZVZpZXdQb3J0KCk7CiAgICAgICAgY29uc3QgYXNwZWN0ID0gdGhpcy5fdnAudyAvIHRoaXMuX3ZwLmg7CiAgICAgICAgaWYgKGFzcGVjdCA+IDEpIHsKICAgICAgICAgICAgdGhpcy5fdnYueSA9IHZ2c3EueTsKICAgICAgICAgICAgdGhpcy5fdnYuaCA9IHZ2c3Euc2l6ZTsKICAgICAgICAgICAgdGhpcy5fdnYueCA9IHZ2c3EueCAtIHZ2c3Euc2l6ZSAqIGFzcGVjdCAvIDIgKyB2dnNxLnNpemUgLyAyOwogICAgICAgICAgICB0aGlzLl92di53ID0gdnZzcS5zaXplICogYXNwZWN0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3Z2LnggPSB2dnNxLng7CiAgICAgICAgICAgIHRoaXMuX3Z2LncgPSB2dnNxLnNpemU7CiAgICAgICAgICAgIHRoaXMuX3Z2LnkgPSB2dnNxLnkgLSB2dnNxLnNpemUgLyBhc3BlY3QgLyAyICsgdnZzcS5zaXplIC8gMjsKICAgICAgICAgICAgdGhpcy5fdnYuaCA9IHZ2c3Euc2l6ZSAvIGFzcGVjdDsKICAgICAgICB9CiAgICAgICAgdGhpcy51cGRhdGVQcmpNYXRyaXgoKTsKICAgIH07CiAgICByZXNpemVTY2FsZVRvcExlZnQgPSAoKT0+ewogICAgICAgIGNvbnN0IHJhdGUgPSB7CiAgICAgICAgICAgIHg6IHRoaXMuX3Z2LncgLyB0aGlzLl92cC53LAogICAgICAgICAgICB5OiB0aGlzLl92di5oIC8gdGhpcy5fdnAuaAogICAgICAgIH07CiAgICAgICAgY29uc3QgdnZzcSA9IHsKICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgc2l6ZTogMAogICAgICAgIH07CiAgICAgICAgaWYgKHRoaXMuX3Z2LncgPiB0aGlzLl92di5oKSB7CiAgICAgICAgICAgIHZ2c3Euc2l6ZSA9IHRoaXMuX3Z2Lmg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdnZzcS5zaXplID0gdGhpcy5fdnYudzsKICAgICAgICB9CiAgICAgICAgdGhpcy51cGRhdGVWaWV3UG9ydCgpOwogICAgICAgIGNvbnN0IGFzcGVjdCA9IHRoaXMuX3ZwLncgLyB0aGlzLl92cC5oOwogICAgICAgIGlmIChhc3BlY3QgPiAxKSB7CiAgICAgICAgICAgIHRoaXMuX3Z2LmggPSB2dnNxLnNpemU7CiAgICAgICAgICAgIHRoaXMuX3Z2LncgPSB2dnNxLnNpemUgKiBhc3BlY3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fdnYudyA9IHZ2c3Euc2l6ZTsKICAgICAgICAgICAgdGhpcy5fdnYuaCA9IHZ2c3Euc2l6ZSAvIGFzcGVjdDsKICAgICAgICB9CiAgICAgICAgdGhpcy51cGRhdGVQcmpNYXRyaXgoKTsKICAgIH07CiAgICByZXNpemVOb1NjYWxlQ2VudGVyID0gKCk9PnsKICAgICAgICBjb25zdCByYXRlID0gewogICAgICAgICAgICB4OiB0aGlzLl92di53IC8gdGhpcy5fdnAudywKICAgICAgICAgICAgeTogdGhpcy5fdnYuaCAvIHRoaXMuX3ZwLmgKICAgICAgICB9OwogICAgICAgIGNvbnN0IG9sZENlbnRlciA9IHsKICAgICAgICAgICAgeDogdGhpcy5fdnYueCArIHRoaXMuX3Z2LncgLyAyLAogICAgICAgICAgICB5OiB0aGlzLl92di55ICsgdGhpcy5fdnYuaCAvIDIKICAgICAgICB9OwogICAgICAgIHRoaXMudXBkYXRlVmlld1BvcnQoKTsKICAgICAgICB0aGlzLl92di53ID0gdGhpcy5fdnAudyAqIHJhdGUueDsKICAgICAgICB0aGlzLl92di5oID0gdGhpcy5fdnAuaCAqIHJhdGUueTsKICAgICAgICB0aGlzLl92di54ID0gb2xkQ2VudGVyLnggLSB0aGlzLl92di53IC8gMjsKICAgICAgICB0aGlzLl92di55ID0gb2xkQ2VudGVyLnkgLSB0aGlzLl92di5oIC8gMjsKICAgICAgICB0aGlzLnVwZGF0ZVByak1hdHJpeCgpOwogICAgfTsKICAgIHJlc2l6ZU5vU2NhbGVUb3BMZWZ0ID0gKCk9PnsKICAgICAgICBjb25zdCByYXRlID0gewogICAgICAgICAgICB4OiB0aGlzLl92di53IC8gdGhpcy5fdnAudywKICAgICAgICAgICAgeTogdGhpcy5fdnYuaCAvIHRoaXMuX3ZwLmgKICAgICAgICB9OwogICAgICAgIHRoaXMudXBkYXRlVmlld1BvcnQoKTsKICAgICAgICB0aGlzLl92di53ID0gdGhpcy5fdnAudyAqIHJhdGUueDsKICAgICAgICB0aGlzLl92di5oID0gdGhpcy5fdnAuaCAqIHJhdGUueTsKICAgICAgICB0aGlzLnVwZGF0ZVByak1hdHJpeCgpOwogICAgfTsKICAgIHRyYW5zbGF0ZSA9ICh2ZWMpPT57CiAgICAgICAgdGhpcy5fdnYueCArPSB2ZWMueDsKICAgICAgICB0aGlzLl92di55ICs9IHZlYy55OwogICAgICAgIHRoaXMudXBkYXRlUHJqTWF0cml4KCk7CiAgICB9OwogICAgc2NhbGUgPSAoY2VudGVyLCByYXRlKT0+ewogICAgICAgIGxldCB0b3BMZWZ0ID0gewogICAgICAgICAgICB4OiB0aGlzLl92di54LAogICAgICAgICAgICB5OiB0aGlzLl92di55CiAgICAgICAgfTsKICAgICAgICBsZXQgbWF0OwogICAgICAgIG1hdCA9IHRyYW5zbGF0ZU1hdHJpeCgtY2VudGVyLngsIC1jZW50ZXIueSk7CiAgICAgICAgbWF0ID0gbXVsdGlwbHlNYXRyaXgoc2NhbGVNYXRyaXgocmF0ZSwgcmF0ZSksIG1hdCk7CiAgICAgICAgbWF0ID0gbXVsdGlwbHlNYXRyaXgodHJhbnNsYXRlTWF0cml4KGNlbnRlci54LCBjZW50ZXIueSksIG1hdCk7CiAgICAgICAgdG9wTGVmdCA9IG11bHRpcGx5VmVjdG9yKG1hdCwgdG9wTGVmdCk7CiAgICAgICAgdGhpcy5fdnYueCA9IHRvcExlZnQueDsKICAgICAgICB0aGlzLl92di55ID0gdG9wTGVmdC55OwogICAgICAgIHRoaXMuX3Z2LncgKj0gcmF0ZTsKICAgICAgICB0aGlzLl92di5oICo9IHJhdGU7CiAgICAgICAgdGhpcy51cGRhdGVQcmpNYXRyaXgoKTsKICAgIH07CiAgICBzY3JlZW5Ub1dvcmxkID0gKHNjcmVlblBvcyk9PnsKICAgICAgICByZXR1cm4gbXVsdGlwbHlWZWN0b3IodGhpcy5faW52LCBzY3JlZW5Qb3MpOwogICAgfTsKICAgIHVwZGF0ZURvbSA9ICgpPT57CiAgICAgICAgaWYgKCF0aGlzLmdyYXBoQ2FudmFzKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy53aWR0aCA9IHRoaXMuX3ZwLnc7CiAgICAgICAgdGhpcy5ncmFwaENhbnZhcy5oZWlnaHQgPSB0aGlzLl92cC5oOwogICAgfTsKICAgIHVwZGF0ZVZpZXcgPSAoKT0+ewogICAgICAgIGlmICghdGhpcy5ncmFwaENhbnZhcykgcmV0dXJuOwogICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuZ3JhcGhDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICBpZiAoIWN0eCkgcmV0dXJuOwogICAgICAgIGN0eC5zYXZlKCk7CiAgICAgICAgY3R4LmNsZWFyUmVjdCh0aGlzLl92di54LCB0aGlzLl92di55LCB0aGlzLl92di53LCB0aGlzLl92di5oKTsKICAgICAgICBjdHguc2V0VHJhbnNmb3JtKHRoaXMuX21bMF0sIHRoaXMuX21bM10sIHRoaXMuX21bMV0sIHRoaXMuX21bNF0sIHRoaXMuX21bMl0sIHRoaXMuX21bNV0pOwogICAgfTsKICAgIHVwZGF0ZSA9ICgpPT57CiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7CiAgICAgICAgdGhpcy5fcmVkcmF3RmxhZyA9IGZhbHNlOwogICAgfTsKICAgIGdldEdyYXBoQ2FudmFzID0gKCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5ncmFwaENhbnZhczsKICAgIH07Cn0KY29uc3QgR2V0UmVxdWVzdCA9IGFzeW5jICh1cmksIHF1ZXJ5ID0gIiIpPT57CiAgICBjb25zb2xlLmxvZyhgSFRUUCBSRVFVRVNUIEdFVDoke3VyaX0ke3F1ZXJ5fWApOwogICAgcmV0dXJuIGF3YWl0IGZldGNoKHVyaSArIHF1ZXJ5KS50aGVuKChyZXNwb25zZSk9PnsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9KS5jYXRjaCgoZSk9PnsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSk7Cn07CmNvbnN0IFBvc3RSZXF1ZXN0ID0gYXN5bmMgKHVyaSwgYm9keSwgZmlsZXMpPT57CiAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07CiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgZm9ybURhdGEuc2V0KCJtZXRhIiwgSlNPTi5zdHJpbmdpZnkoYm9keSkpOwogICAgZm9ybURhdGEuc2V0KCJmaWxlIiwgZmlsZXNbMF0pOwogICAgY29uc3QgcGFyYW0gPSB7CiAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgYm9keTogZm9ybURhdGEKICAgIH07CiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJpLCBwYXJhbSkudGhlbigocmVzcG9uc2UpPT57CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgIH0pLmNhdGNoKChlKT0+ewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgfSk7Cn07CmNvbnN0IERlbGV0ZVJlcXVlc3QgPSBhc3luYyAodXJpKT0+ewogICAgcmV0dXJuIGF3YWl0IGZldGNoKHVyaSwgewogICAgICAgIG1ldGhvZDogIkRFTEVURSIsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiCiAgICAgICAgfQogICAgfSkudGhlbigocmVzcG9uc2UpPT57CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgIH0pLmNhdGNoKChlKT0+ewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgfSk7Cn07CmNvbnN0IFB1dFJlcXVlc3QgPSBhc3luYyAodXJpLCBmb3JtRGF0YSk9PnsKICAgIGNvbnNvbGUubG9nKHsKICAgICAgICAuLi5mb3JtRGF0YS5nZXRBbGwKICAgIH0pOwogICAgY29uc3QgcGFyYW0gPSB7CiAgICAgICAgbWV0aG9kOiAiUFVUIiwKICAgICAgICBib2R5OiBmb3JtRGF0YQogICAgfTsKICAgIHJldHVybiBhd2FpdCBmZXRjaCh1cmksIHBhcmFtKS50aGVuKChyZXNwb25zZSk9PnsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9KS5jYXRjaCgoZSk9PnsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSk7Cn07CmNvbnN0IFBhdGNoUmVxdWVzdCA9IGFzeW5jICh1cmkpPT57CiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJpLCB7CiAgICAgICAgbWV0aG9kOiAiUEFUQ0giLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IgogICAgICAgIH0KICAgIH0pLnRoZW4oKHJlc3BvbnNlKT0+ewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICB9KS5jYXRjaCgoZSk9PnsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgIH0pOwp9Owpjb25zdCBDcmVhdGVUZXh0QXJlYSA9IChkb2N1bWVudDEsIHZhbHVlID0gJ3sidGl0bGUiOiAiIiwgImNvbnRlbnQiOiAiIn0nLCByb3dzID0gMTAsIGNvbHMgPSAxMCk9PnsKICAgIGxldCBhcmVhID0gZG9jdW1lbnQxLmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7CiAgICBhcmVhLnJlYWRPbmx5ID0gZmFsc2U7CiAgICBhcmVhLnZhbHVlID0gdmFsdWU7CiAgICBhcmVhLnJvd3MgPSByb3dzOwogICAgYXJlYS5jb2xzID0gY29sczsKICAgIHJldHVybiBhcmVhOwp9Owpjb25zdCBDcmVhdGVJbnB1dFRleHQgPSAoZG9jdW1lbnQxLCB2YWx1ZSA9ICIiKT0+ewogICAgbGV0IGlucHV0ID0gZG9jdW1lbnQxLmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICBpbnB1dC50eXBlID0gInRleHQiOwogICAgaW5wdXQudmFsdWUgPSAidGFnIjsKICAgIHJldHVybiBpbnB1dDsKfTsKY29uc3QgQ3JlYXRlSW5wdXRCdXR0b24gPSAoZG9jdW1lbnQxLCB2YWx1ZSA9ICIiLCBjYWxsYmFjayA9IChlKT0+ewp9KT0+ewogICAgbGV0IGJ1dHRvbiA9IGRvY3VtZW50MS5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgIGJ1dHRvbi5pbm5lclRleHQgPSB2YWx1ZTsKICAgIGJ1dHRvbi52YWx1ZSA9IHZhbHVlOwogICAgYnV0dG9uLm9uY2xpY2sgPSBjYWxsYmFjazsKICAgIHJldHVybiBidXR0b247Cn07CmNvbnN0IENyZWF0ZUltZyA9IChkb2N1bWVudDEsIHNyYywgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBhbHQgPSAiIik9PnsKICAgIGxldCBpbWcgPSBkb2N1bWVudDEuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICBpbWcuc3JjID0gc3JjOwogICAgaWYgKHdpZHRoICE9IDApIGltZy53aWR0aCA9IHdpZHRoOwogICAgaWYgKGhlaWdodCAhPSAwKSBpbWcuaGVpZ2h0ID0gaGVpZ2h0OwogICAgaW1nLmFsdCA9IGFsdDsKICAgIHJldHVybiBpbWc7Cn07CmNvbnN0IENyZWF0ZUF1dG9jb21wbGV0ZUlucHV0ID0gKGRvY3VtZW50MSwgZGF0YUxpc3RJZCwgZGF0YUxpc3QgPSBbXSwgdmFsdWUgPSAiIik9PnsKICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQxLmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICBpbnB1dC50eXBlID0gInRleHQiOwogICAgaW5wdXQudmFsdWUgPSB2YWx1ZTsKICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnbGlzdCcsIGRhdGFMaXN0SWQpOwogICAgaW5wdXQuYXV0b2NvbXBsZXRlID0gInRydWUiOwogICAgbGV0IGRsID0gZG9jdW1lbnQxLmNyZWF0ZUVsZW1lbnQoJ2RhdGFsaXN0Jyk7CiAgICBkbC5pZCA9IGRhdGFMaXN0SWQ7CiAgICBkYXRhTGlzdC5mb3JFYWNoKChlKT0+ewogICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudDEuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7CiAgICAgICAgb3B0aW9uLnZhbHVlID0gZTsKICAgICAgICBkbC5hcHBlbmRDaGlsZChvcHRpb24pOwogICAgfSk7CiAgICBpbnB1dC5hcHBlbmRDaGlsZChkbCk7CiAgICByZXR1cm4gaW5wdXQ7Cn07CmNsYXNzIFN0b3JlZE5vZGVzIHsKICAgIGRpY3QgPSB7CiAgICB9OwogICAgb25SZWdpc3RlciA9ICgpPT57CiAgICB9OwogICAgY29uc3RydWN0b3IoKXsKICAgIH0KICAgIHRhZ0hhc2hEaWN0ID0gKCk9PnsKICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHRoaXMuZGljdCkuZmlsdGVyKChba2V5MSwgdmFsdWVdKT0+dmFsdWUudHlwZSA9PSAiVGFnTWV0YSIKICAgICAgICApLm1hcCgoW2tleTEsIHZhbHVlXSk9PlsKICAgICAgICAgICAgICAgIHZhbHVlLnRpdGxlLAogICAgICAgICAgICAgICAgdmFsdWUKICAgICAgICAgICAgXQogICAgICAgICkpOwogICAgfTsKICAgIGJsb2JIYXNoRGljdCA9ICgpPT57CiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh0aGlzLmRpY3QpLmZpbHRlcigoW2tleTEsIHZhbHVlXSk9PnZhbHVlLnR5cGUgPT0gIkJsb2JNZXRhIgogICAgICAgICkpOwogICAgfTsKICAgIGZldGNoID0gYXN5bmMgKGhhc2gxKT0+ewogICAgICAgIGlmICghdGhpcy5kaWN0W2hhc2gxXSkgewogICAgICAgICAgICBjb25zdCB1cGRhdGVOb2RlcyA9IGF3YWl0IHRoaXMucmVtb3RlR2V0KGhhc2gxKTsKICAgICAgICAgICAgdXBkYXRlTm9kZXMuZm9yRWFjaCgoZSk9PnRoaXMuY2FjaGUoZSkKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuZGljdFtoYXNoMV07CiAgICB9OwogICAgdXBkYXRlID0gYXN5bmMgKG5vZGUsIG9wdGlvbkZvcm1EYXRhKT0+ewogICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShub2RlKSAhPSBKU09OLnN0cmluZ2lmeSh0aGlzLmRpY3Rbbm9kZS5oYXNoXSkpIHsKICAgICAgICAgICAgY29uc3QgdXBkYXRlTm9kZXMgPSBhd2FpdCB0aGlzLnJlbW90ZVB1dChub2RlLCBvcHRpb25Gb3JtRGF0YSk7CiAgICAgICAgICAgIHVwZGF0ZU5vZGVzLmZvckVhY2goKGUpPT50aGlzLmNhY2hlKGUpCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGVOb2RlczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQogICAgfTsKICAgIHJlbW90ZVB1dCA9IGFzeW5jIChub2RlLCBvcHRpb25Gb3JtRGF0YSk9PnsKICAgICAgICBvcHRpb25Gb3JtRGF0YS5zZXQoIm1ldGEiLCBKU09OLnN0cmluZ2lmeShub2RlKSk7CiAgICAgICAgY29uc29sZS5sb2coewogICAgICAgICAgICAuLi5vcHRpb25Gb3JtRGF0YQogICAgICAgIH0pOwogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUHV0UmVxdWVzdCgiL3Bvc3RzLyIgKyBub2RlLmhhc2gsIG9wdGlvbkZvcm1EYXRhKTsKICAgICAgICBpZiAoaXNOdWxsKHJlc3BvbnNlKSkgcmV0dXJuIFtdOwogICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgY29uc29sZS5sb2coanNvbik7CiAgICAgICAgY29uc3Qgbm9kZXMgPSBPYmplY3QudmFsdWVzKGpzb24pLmZpbHRlcigobm9kZTEpPT57CiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IE5vZGUxLnZhbGlkYXRpb24obm9kZTEpOwogICAgICAgICAgICBpZiAoIXJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKCfjg5Djg6rjg4fjg7zjgrfjg6fjg7PkuI3og73jgapqc29u44GM5re35YWl44GX44Gm44GE44G+44GZJyk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG5vZGVzOwogICAgfTsKICAgIGNhY2hlID0gKGUpPT57CiAgICAgICAgdGhpcy5kaWN0W2UuaGFzaF0gPSBlOwogICAgICAgIHRoaXMub25SZWdpc3RlcigpOwogICAgfTsKICAgIHNldFJlbW90ZUdldE1ldGhvZCA9IChtZXRob2QpPT57CiAgICAgICAgdGhpcy5yZW1vdGVHZXQgPSBtZXRob2Q7CiAgICB9OwogICAgcmVtb3RlR2V0ID0gYXN5bmMgKGhhc2gxLCBmb3JjZSA9IGZhbHNlKT0+ewogICAgICAgIGNvbnN0IHBhdGhTdHJ1Y3QgPSBtZXRhUmVzb3VyY2VQYXRoKGhhc2gxKTsKICAgICAgICBjb25zdCBwYXRoID0gcGF0aFN0cnVjdC5wcmVmaXggKyBwYXRoU3RydWN0Lmhhc2hEaXIgKyBwYXRoU3RydWN0Lmhhc2ggKyBwYXRoU3RydWN0LmV4dGVudGlvbjsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEdldFJlcXVlc3QocGF0aCk7CiAgICAgICAgaWYgKGlzTnVsbChyZXNwb25zZSkpIHJldHVybiBbXTsKICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgICAgIGNvbnNvbGUubG9nKGpzb24pOwogICAgICAgIGlmIChOb2RlMS52YWxpZGF0aW9uKGpzb24pKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGByZW1vdGVHZXQ6ICR7anNvbn1gKTsKICAgICAgICAgICAgY29uc3Qgbm9kZUFycmF5ID0gWwogICAgICAgICAgICAgICAganNvbgogICAgICAgICAgICBdOwogICAgICAgICAgICByZXR1cm4gbm9kZUFycmF5OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybigiTm9kZeOBqOOBl+OBpuino+mHiOOBp+OBjeOBquOBhOOCguOBruOCkuWPluW+l+OBl+OBvuOBl+OBnyIpOwogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQogICAgfTsKfQpjbGFzcyBCbG9iTWV0YSBleHRlbmRzIE5vZGUxIHsKICAgIHR5cGUgPSAiQmxvYk1ldGEiOwogICAgY29uc3RydWN0b3IoaGFzaDEsIHRpdGxlMSwgZXh0ZW50aW9uLCBjcmVhdGVkQXQxLCB0aHVtYm5haWwxLCBkZXNjcmlwdGlvbjEsIHZlY3RvcjEsIG1pbWVUeXBlLCByZW1vdGVVcmkxKXsKICAgICAgICBzdXBlcihoYXNoMSwgdGl0bGUxLCBjcmVhdGVkQXQxLCB0aHVtYm5haWwxLCBkZXNjcmlwdGlvbjEsIHZlY3RvcjEsIHJlbW90ZVVyaTEpOwogICAgICAgIHRoaXMuZXh0ZW50aW9uID0gZXh0ZW50aW9uOwogICAgICAgIHRoaXMubWltZVR5cGUgPSBtaW1lVHlwZTsKICAgICAgICBjb25zdCBhbGxoYXNoMSA9IGJ1ZmZlclRvSGFzaCgiYmxvYiIpOwogICAgICAgIHZlY3RvcjFbYWxsaGFzaDFdID0gdmVjdG9yMVthbGxoYXNoMV0gPz8gewogICAgICAgICAgICB0YWc6IDEKICAgICAgICB9OwogICAgfQogICAgc3RhdGljIHZhbGlkYXRpb24gPSAobWV0YSk9PnsKICAgICAgICBpZiAobWV0YS50eXBlICE9ICJCbG9iTWV0YSIpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoaXNOdWxsKG1ldGEuZXh0ZW50aW9uKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChpc051bGwobWV0YS5taW1lVHlwZSkpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoIU5vZGUxLnZhbGlkYXRpb24obWV0YSkpIHJldHVybiBmYWxzZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH07Cn0KY2xhc3MgUHJpb3JpdHlRdWV1ZSB7CiAgICBpdGVtcyA9IHsKICAgIH07CiAgICBxdWV1ZSA9IFtdOwogICAgbGVuZ3RoID0gMDsKICAgIGNvbnN0cnVjdG9yKCl7CiAgICB9CiAgICBpbnNlcnQgPSAoaXRlbSwgdmFsdWUsIGxvb2t1cGlkID0gbnVsbCk9PnsKICAgICAgICBpZiAobG9va3VwaWQgIT09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5pdGVtc1tsb29rdXBpZF0gPSB7CiAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmICh2YWx1ZSA9PSBJbmZpbml0eSkgewogICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2goewogICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgICAgICAgaXRlbTogaXRlbSwKICAgICAgICAgICAgICAgIGxvb2t1cGlkOiBsb29rdXBpZAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodmFsdWUgPT0gLUluZmluaXR5KSB7CiAgICAgICAgICAgIHRoaXMucXVldWUudW5zaGlmdCh7CiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgICAgICAgbG9va3VwaWQ6IGxvb2t1cGlkCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKHsKICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sCiAgICAgICAgICAgICAgICBsb29rdXBpZDogbG9va3VwaWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fYmluYXJ5U2VhcmNoKHZhbHVlKTsKICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMCwgewogICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgIGl0ZW06IGl0ZW0sCiAgICAgICAgICAgIGxvb2t1cGlkOiBsb29rdXBpZAogICAgICAgIH0pOwogICAgICAgIHRoaXMubGVuZ3RoICs9IDE7CiAgICB9OwogICAgX2JpbmFyeVNlYXJjaCA9IChyYW5raW5nKT0+ewogICAgICAgIGxldCBzdGFydCA9IDA7CiAgICAgICAgbGV0IGVuZCA9IHRoaXMucXVldWUubGVuZ3RoOwogICAgICAgIHdoaWxlKGVuZCAtIHN0YXJ0ID4gMSl7CiAgICAgICAgICAgIGxldCBjaGVja0luZGV4ID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7CiAgICAgICAgICAgIGlmIChyYW5raW5nID09PSB0aGlzLnF1ZXVlW2NoZWNrSW5kZXhdLnZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAoY2hlY2tJbmRleCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0luZGV4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2hpbGUoY2hlY2tJbmRleCA+IDAgJiYgdGhpcy5xdWV1ZVtjaGVja0luZGV4IC0gMV0udmFsdWUgPT0gcmFua2luZyl7CiAgICAgICAgICAgICAgICAgICAgY2hlY2tJbmRleCAtPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMucXVldWVbY2hlY2tJbmRleF0udmFsdWUgPiByYW5raW5nKSB7CiAgICAgICAgICAgICAgICBlbmQgPSBjaGVja0luZGV4OwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMucXVldWVbY2hlY2tJbmRleF0udmFsdWUgPCByYW5raW5nKSB7CiAgICAgICAgICAgICAgICBzdGFydCA9IGNoZWNrSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHJhbmtpbmcgPiB0aGlzLnF1ZXVlW3N0YXJ0XS52YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gZW5kOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzdGFydDsKICAgICAgICB9CiAgICB9OwogICAgaGFzSXRlbSA9IChsb29rdXBpZCk9PnsKICAgICAgICBpZiAodGhpcy5pdGVtc1tsb29rdXBpZF0gIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogICAgZ2V0SXRlbUJ5S2V5ID0gKGxvb2t1cGlkKT0+ewogICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2xvb2t1cGlkXTsKICAgIH07CiAgICBnZXRJdGVtQnlJbmRleCA9IChpbmRleCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZVtpbmRleF07CiAgICB9OwogICAgZ2V0SW5kZXggPSAobG9va3VwaWQpPT57CiAgICAgICAgbGV0IHJhbmtpbmcgPSB0aGlzLml0ZW1zW2xvb2t1cGlkXS52YWx1ZTsKICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9iaW5hcnlTZWFyY2gocmFua2luZyk7CiAgICAgICAgd2hpbGUodGhpcy5xdWV1ZVtpbmRleF0udmFsdWUgPT0gcmFua2luZyAmJiBpbmRleCArIDEgPCB0aGlzLnF1ZXVlLmxlbmd0aCl7CiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlW2luZGV4XS5sb29rdXBpZCA9PT0gbG9va3VwaWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbmRleCArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gLTE7CiAgICB9OwogICAgcmVwbGFjZSA9IChuZXdJdGVtLCBuZXdWYWx1ZSwgbG9va3VwaWQpPT57CiAgICAgICAgdGhpcy5kZWxldGUobG9va3VwaWQpOwogICAgICAgIHRoaXMuaW5zZXJ0KG5ld0l0ZW0sIG5ld1ZhbHVlLCBsb29rdXBpZCk7CiAgICB9OwogICAgZGVsZXRlID0gKGxvb2t1cGlkKT0+ewogICAgICAgIGlmICh0aGlzLmhhc0l0ZW0obG9va3VwaWQpKSB7CiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0SW5kZXgobG9va3VwaWQpOwogICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLml0ZW1zW2xvb2t1cGlkXTsKICAgICAgICAgICAgdGhpcy5sZW5ndGggLT0gMTsKICAgICAgICB9CiAgICB9OwogICAgZGVxdWV1ZSA9ICgpPT57CiAgICAgICAgbGV0IG91dHB1dCA9IHRoaXMucXVldWUuc2hpZnQoKTsKICAgICAgICBpZiAodGhpcy5pdGVtc1tvdXRwdXQubG9va3VwaWRdKSB7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLml0ZW1zW291dHB1dC5sb29rdXBpZF07CiAgICAgICAgfQogICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICB9Owp9CmNsYXNzIEdyYXBoIHsKICAgIHN0YXRpYyBjb250ZXh0cyA9IHsKICAgIH07CiAgICBzdGF0aWMgZ2V0Q29udGV4dChpZCkgewogICAgICAgIHJldHVybiBHcmFwaC5jb250ZXh0c1tpZF07CiAgICB9CiAgICBzdGF0aWMgQ2xlYXIoY29udGV4dGlkKSB7CiAgICAgICAgbGV0IG8gPSBPYmplY3QudmFsdWVzKEdyYXBoLmdldENvbnRleHQoY29udGV4dGlkKS5vYmpzKTsKICAgICAgICBvLm1hcCgob2JqKT0+ewogICAgICAgICAgICBvYmouZGVsZXRlKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBzdGF0aWMgbG9hZChqc29uU3RyaW5nLCBjYW52YXNpZCkgewogICAgICAgIGZ1bmN0aW9uIGZ1bmN0aW9uZnkoa2V5MSwgdmFsdWUpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCdmdW5jdGlvbicpID09PSAwIHx8IHZhbHVlLmluZGV4T2YoIik9PiIpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGxldCBmdW5jdGlvblRlbXBsYXRlID0gYCgke3ZhbHVlfSlgOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBldmFsKGZ1bmN0aW9uVGVtcGxhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgbGV0IGNvbnRleHQgPSBKU09OLnBhcnNlKGpzb25TdHJpbmcsIGZ1bmN0aW9uZnkpOwogICAgICAgIGNvbnRleHQuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzaWQpOwogICAgICAgIGNvbnRleHQuY3R4ID0gY29udGV4dC5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICBsZXQgaWRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCk7CiAgICAgICAgbGV0IGlkX3JhbmRvbSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDk5OTk5OTkpLnRvU3RyaW5nKCk7CiAgICAgICAgY29udGV4dC5pZCA9IE51bWJlcihpZF90aW1lICsgaWRfcmFuZG9tKTsKICAgICAgICBsZXQgZWRnZUtleXMgPSBPYmplY3Qua2V5cyhjb250ZXh0LmVkZ2VzKTsKICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBlZGdlS2V5cy5sZW5ndGg7IGkxKyspewogICAgICAgICAgICBjb250ZXh0LmVkZ2VzW2VkZ2VLZXlzW2kxXV0uY29udGV4dGlkID0gY29udGV4dC5pZDsKICAgICAgICB9CiAgICAgICAgbGV0IG9iaktleXMgPSBPYmplY3Qua2V5cyhjb250ZXh0Lm9ianMpOwogICAgICAgIGZvcihsZXQgaTIgPSAwOyBpMiA8IG9iaktleXMubGVuZ3RoOyBpMisrKXsKICAgICAgICAgICAgY29udGV4dC5vYmpzW29iaktleXNbaTJdXS5jb250ZXh0aWQgPSBjb250ZXh0LmlkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdyYXBoKGNhbnZhc2lkLCBjb250ZXh0LmZwcywgY29udGV4dC5lZGl0YWJsZSwgY29udGV4dC5idWlsZGFibGUsIGNvbnRleHQpOwogICAgfQogICAgY29uc3RydWN0b3IoY2FudmFzaWQsIGZwczEgPSA2MCwgZWRpdGFibGUgPSB0cnVlLCBidWlsZGFibGUgPSB0cnVlLCBsb2FkQ29udGV4dCA9IG51bGwsIGFjdGl2YXRlTm9kZUNhbGxiYWNrMSA9IChkZUFjdGl2YXRlTm9kZSwgYWN0aXZhdGVOb2RlKT0+ewogICAgfSwgZGVBY3RpdmF0ZU5vZGVDYWxsYmFjazEgPSAoZGVBY3RpdmF0ZU5vZGUpPT57CiAgICB9LCBkb3VibGVDbGlja2VkTm9kZUNhbGxiYWNrMSA9IChkb3VibGVDbGlja2VkTm9kZSk9PnsKICAgIH0pewogICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzaWQpOwogICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICB0aGlzLm9ianMgPSB7CiAgICAgICAgfTsKICAgICAgICB0aGlzLmVkZ2VzID0gewogICAgICAgIH07CiAgICAgICAgdGhpcy52YXJzID0gewogICAgICAgIH07CiAgICAgICAgbGV0IGlkX3RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpOwogICAgICAgIGxldCBpZF9yYW5kb20gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA5OTk5OTk5KS50b1N0cmluZygpOwogICAgICAgIHRoaXMuaWQgPSBOdW1iZXIoaWRfdGltZSArIGlkX3JhbmRvbSk7CiAgICAgICAgdGhpcy5ub2RlQ3JlYXRlZENhbGxiYWNrID0gKCk9PnsKICAgICAgICB9OwogICAgICAgIHRoaXMuY29ubmVjdGlvbkNyZWF0ZWRDYWxsYmFjayA9ICgpPT57CiAgICAgICAgfTsKICAgICAgICB0aGlzLmNvbm5lY3Rpb25TZXR1cENhbGxiYWNrID0gKCk9PnsKICAgICAgICB9OwogICAgICAgIHRoaXMubm9kZVNldHVwQ2FsbGJhY2sgPSAoKT0+ewogICAgICAgIH07CiAgICAgICAgdGhpcy50aWNrQ2FsbGJhY2sgPSAoKT0+ewogICAgICAgIH07CiAgICAgICAgdGhpcy5hY3RpdmF0ZU5vZGVDYWxsYmFjayA9IGFjdGl2YXRlTm9kZUNhbGxiYWNrMTsKICAgICAgICB0aGlzLmRlQWN0aXZhdGVOb2RlQ2FsbGJhY2sgPSBkZUFjdGl2YXRlTm9kZUNhbGxiYWNrMTsKICAgICAgICB0aGlzLmRvdWJsZUNsaWNrZWROb2RlQ2FsbGJhY2sgPSBkb3VibGVDbGlja2VkTm9kZUNhbGxiYWNrMTsKICAgICAgICB0aGlzLmVkaXRhYmxlID0gZWRpdGFibGU7CiAgICAgICAgdGhpcy5mcHMgPSBmcHMxOwogICAgICAgIHRoaXMuYnVpbGRhYmxlID0gYnVpbGRhYmxlOwogICAgICAgIGlmIChsb2FkQ29udGV4dCAhPT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLmVkZ2VzID0gbG9hZENvbnRleHQuZWRnZXM7CiAgICAgICAgICAgIHRoaXMudmFycyA9IGxvYWRDb250ZXh0LnZhcnM7CiAgICAgICAgICAgIHRoaXMub2JqcyA9IGxvYWRDb250ZXh0Lm9ianM7CiAgICAgICAgICAgIHRoaXMuaWQgPSBsb2FkQ29udGV4dC5pZDsKICAgICAgICAgICAgdGhpcy50aWNrQ2FsbGJhY2sgPSBsb2FkQ29udGV4dC50aWNrQ2FsbGJhY2s7CiAgICAgICAgICAgIHRoaXMubm9kZVNldHVwQ2FsbGJhY2sgPSBsb2FkQ29udGV4dC5ub2RlU2V0dXBDYWxsYmFjazsKICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uQ3JlYXRlZENhbGxiYWNrID0gbG9hZENvbnRleHQuY29ubmVjdGlvbkNyZWF0ZWRDYWxsYmFjazsKICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU2V0dXBDYWxsYmFjayA9IGxvYWRDb250ZXh0LmNvbm5lY3Rpb25TZXR1cENhbGxiYWNrOwogICAgICAgICAgICB0aGlzLm5vZGVDcmVhdGVkQ2FsbGJhY2sgPSBsb2FkQ29udGV4dC5ub2RlQ3JlYXRlZENhbGxiYWNrOwogICAgICAgIH0KICAgICAgICBHcmFwaC5jb250ZXh0c1t0aGlzLmlkXSA9IHRoaXM7CiAgICAgICAgaWYgKHRoaXMuZnBzID09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5mcHMgPSA2MDsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuZWRpdGFibGUgPT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLmNoZWNrX21vdXNlKCk7CiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVfZWRpdGluZyh0aGlzLmZwcyk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmJ1aWxkYWJsZSA9PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVfYnVpbGRpbmcoKTsKICAgICAgICB9CiAgICAgICAgaWYgKGxvYWRDb250ZXh0ICE9PSBudWxsKSB7CiAgICAgICAgICAgIGZvcihsZXQgZWRnZWlkIGluIHRoaXMuZWRnZXMpewogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU2V0dXBDYWxsYmFjayh0aGlzLmVkZ2VzW2VkZ2VpZF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcihsZXQgbm9kZWlkIGluIHRoaXMub2Jqcyl7CiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTZXR1cENhbGxiYWNrKHRoaXMub2Jqc1tub2RlaWRdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHNldE5vZGVDcmVhdGVkQ2FsbGJhY2soZnVuYykgewogICAgICAgIHRoaXMubm9kZUNyZWF0ZWRDYWxsYmFjayA9IGZ1bmM7CiAgICB9CiAgICBzZXRDb25uZWN0aW9uQ3JlYXRlZENhbGxiYWNrKGZ1bmMpIHsKICAgICAgICB0aGlzLmNvbm5lY3Rpb25DcmVhdGVkQ2FsbGJhY2sgPSBmdW5jOwogICAgfQogICAgc2V0VGlja0NhbGxiYWNrKGZ1bmMpIHsKICAgICAgICB0aGlzLnRpY2tDYWxsYmFjayA9IGZ1bmM7CiAgICB9CiAgICBzZXROb2RlU2V0dXBDYWxsYmFjayhmdW5jKSB7CiAgICAgICAgdGhpcy5ub2RlU2V0dXBDYWxsYmFjayA9IGZ1bmM7CiAgICB9CiAgICBzZXRDb25uZWN0aW9uU2V0dXBDYWxsYmFjayhmdW5jKSB7CiAgICAgICAgdGhpcy5jb25uZWN0aW9uQ3JlYXRlZENhbGxiYWNrID0gZnVuYzsKICAgIH0KICAgIHNhdmUoKSB7CiAgICAgICAgbGV0IG1ldGhvZENhdGhjZXIgPSBmdW5jdGlvbihrZXkxLCB2YWx1ZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcywgbWV0aG9kQ2F0aGNlcik7CiAgICB9CiAgICBnZXRDaGlsZHJlbkJ5VGV4dCh0ZXh0KSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5vYmpzKS5maWx0ZXIoKG5vZGUpPT5ub2RlLnRleHQgPT09IHRleHQKICAgICAgICApOwogICAgfQogICAgZ2V0RWRnZShwYXJlbnRpZCwgY2hpbGRpZCkgewogICAgICAgIGZvciAobGV0IGVkZ2Ugb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmVkZ2VzKSl7CiAgICAgICAgICAgIGlmIChlZGdlLnN0YXJ0Tm9kZWlkID09PSBwYXJlbnRpZCAmJiBlZGdlLmVuZE5vZGVpZCA9PT0gY2hpbGRpZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWRnZXNbZWRnZS5pZF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVkZ2UuaXNCaURpcmVjdGlvbmFsKCkpIHsKICAgICAgICAgICAgICAgIGlmIChlZGdlLmVuZE5vZGVpZCA9PT0gcGFyZW50aWQgJiYgZWRnZS5zdGFydE5vZGVpZCA9PT0gY2hpbGRpZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVkZ2VzW2VkZ2UuaWRdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGRyYXdMb29wKGJlemllckNvbnRyb2xQb2ludHNYLCBiZXppZXJDb250cm9sUG9pbnRzWSwgdGV4dCA9ICIiLCBkaXJlY3Rpb25hbCA9IGZhbHNlKSB7CiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgdGhpcy5hZGRCZXppZXJDdXJ2ZVRvUGF0aChiZXppZXJDb250cm9sUG9pbnRzWCwgYmV6aWVyQ29udHJvbFBvaW50c1kpOwogICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpOwogICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpOwogICAgICAgIGlmICh0ZXh0ICE9PSBudWxsICYmIHRleHQgIT09ICIiKSB7CiAgICAgICAgICAgIGxldCBtaWRQb2ludFggPSBHcmFwaC5jYWxjdWxhdGVNaWRQb2ludE9mQmV6aWVyQ3VydmUoYmV6aWVyQ29udHJvbFBvaW50c1gpOwogICAgICAgICAgICBsZXQgbWlkUG9pbnRZID0gR3JhcGguY2FsY3VsYXRlTWlkUG9pbnRPZkJlemllckN1cnZlKGJlemllckNvbnRyb2xQb2ludHNZKTsKICAgICAgICAgICAgdGhpcy5hZGRUZXh0T3ZlckNsZWFyQm94KG1pZFBvaW50WCwgbWlkUG9pbnRZLCB0ZXh0KTsKICAgICAgICB9CiAgICB9CiAgICBhZGRUZXh0T3ZlckNsZWFyQm94KGNlbnRlclgsIGNlbnRlclksIHRleHQpIHsKICAgICAgICBsZXQgdGV4dExlbmd0aCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoOwogICAgICAgIGxldCB0ZXh0SGVpZ2h0ID0gdGhpcy5jdHgubWVhc3VyZVRleHQoIk0iKS53aWR0aDsKICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoY2VudGVyWCAtIHRleHRMZW5ndGggLyAyIC0gNCwgY2VudGVyWSAtIHRleHRIZWlnaHQgLyAyIC0gOCwgdGV4dExlbmd0aCArIDQsIHRleHRIZWlnaHQgKyA4KTsKICAgICAgICB0aGlzLmN0eC5maWxsVGV4dCh0ZXh0LCBjZW50ZXJYIC0gMiwgY2VudGVyWSArIDQpOwogICAgfQogICAgc3RhdGljIGNhbGN1bGF0ZU1pZFBvaW50T2ZCZXppZXJDdXJ2ZShjb250cm9sUG9pbnRzKSB7CiAgICAgICAgcmV0dXJuIGNvbnRyb2xQb2ludHNbMF0gKiAxIC8gOCArIGNvbnRyb2xQb2ludHNbMV0gKiAzIC8gOCArIGNvbnRyb2xQb2ludHNbMl0gKiAzIC8gOCArIGNvbnRyb2xQb2ludHNbM10gKiAxIC8gODsKICAgIH0KICAgIGFkZEJlemllckN1cnZlVG9QYXRoKHhzLCB5cykgewogICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4c1swXSwgeXNbMF0pOwogICAgICAgIHRoaXMuY3R4LmJlemllckN1cnZlVG8oeHNbMV0sIHlzWzFdLCB4c1syXSwgeXNbMl0sIHhzWzNdLCB5c1szXSk7CiAgICB9CiAgICBkcmF3QXJyb3coeDEsIHkxLCB4MiwgeTIsIHRleHQgPSAiIiwgZGlyZWN0aW9uYWwgPSBmYWxzZSkgewogICAgICAgIGxldCBoZWFkbGVuID0gMDsKICAgICAgICBpZiAoZGlyZWN0aW9uYWwpIHsKICAgICAgICAgICAgaGVhZGxlbiA9IDEwOwogICAgICAgIH0KICAgICAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHkyIC0geTEsIHgyIC0geDEpOwogICAgICAgIGlmICh0ZXh0ID09PSBudWxsIHx8IHRleHQgPT09ICIiKSB7CiAgICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpOwogICAgICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oeDEsIHkxKTsKICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHgyLCB5Mik7CiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4MiAtIGhlYWRsZW4gKiBNYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkgLyA2KSwgeTIgLSBoZWFkbGVuICogTWF0aC5zaW4oYW5nbGUgLSBNYXRoLlBJIC8gNikpOwogICAgICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oeDIsIHkyKTsKICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHgyIC0gaGVhZGxlbiAqIE1hdGguY29zKGFuZ2xlICsgTWF0aC5QSSAvIDYpLCB5MiAtIGhlYWRsZW4gKiBNYXRoLnNpbihhbmdsZSArIE1hdGguUEkgLyA2KSk7CiAgICAgICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpOwogICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgbWlkUG9pbnRYID0gKHgxICsgeDIpIC8gMjsKICAgICAgICAgICAgbGV0IG1pZFBvaW50WSA9ICh5MSArIHkyKSAvIDI7CiAgICAgICAgICAgIGxldCBzbG9wZSA9ICh5MiAtIHkxKSAvICh4MiAtIHgxKTsKICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4MSwgeTEpOwogICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8obWlkUG9pbnRYLCBtaWRQb2ludFkpOwogICAgICAgICAgICB0aGlzLmN0eC5tb3ZlVG8obWlkUG9pbnRYLCBtaWRQb2ludFkpOwogICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oeDIsIHkyKTsKICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHgyIC0gaGVhZGxlbiAqIE1hdGguY29zKGFuZ2xlIC0gTWF0aC5QSSAvIDYpLCB5MiAtIGhlYWRsZW4gKiBNYXRoLnNpbihhbmdsZSAtIE1hdGguUEkgLyA2KSk7CiAgICAgICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4MiwgeTIpOwogICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oeDIgLSBoZWFkbGVuICogTWF0aC5jb3MoYW5nbGUgKyBNYXRoLlBJIC8gNiksIHkyIC0gaGVhZGxlbiAqIE1hdGguc2luKGFuZ2xlICsgTWF0aC5QSSAvIDYpKTsKICAgICAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7CiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpOwogICAgICAgICAgICB0aGlzLmFkZFRleHRPdmVyQ2xlYXJCb3gobWlkUG9pbnRYLCBtaWRQb2ludFksIHRleHQpOwogICAgICAgIH0KICAgIH0KICAgIGdldENvbm5lY3Rpb25Nb2RlKCkgewogICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Nb2RlOwogICAgfQogICAgc2V0RGlyZWN0aW9uYWwoKSB7CiAgICAgICAgdGhpcy5jb25uZWN0aW9uTW9kZSA9ICJkaXJlY3Rpb25hbCI7CiAgICB9CiAgICBzZXRCaURpcmVjdGlvbmFsKCkgewogICAgICAgIHRoaXMuY29ubmVjdGlvbk1vZGUgPSAiYmlEaXJlY3Rpb25hbCI7CiAgICB9CiAgICBhY3RpdmF0ZV9idWlsZGluZygpIHsKICAgICAgICB0aGlzLmNvbm5lY3Rpb25Nb2RlID0gImJpRGlyZWN0aW9uYWwiOwogICAgICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoImNvbnRleHRtZW51IiwgKGUpPT5lLnByZXZlbnREZWZhdWx0KCkKICAgICAgICApOwogICAgICAgIHRoaXMuYnVpbGRpbmcgPSBmYWxzZTsKICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWRvd24iLCBjbGlja19kb3duLmJpbmQodGhpcykpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBjYXB0dXJlLmJpbmQodGhpcykpOwogICAgICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCByZWxlYXNlX2NsaWNrLmJpbmQodGhpcykpOwogICAgICAgIHRoaXMuc3RhcnQgPSB7CiAgICAgICAgICAgICJ4IjogbnVsbCwKICAgICAgICAgICAgInkiOiBudWxsCiAgICAgICAgfTsKICAgICAgICBsZXQgYWN0aW9uID0gbnVsbDsKICAgICAgICBmdW5jdGlvbiByZWxlYXNlX2NsaWNrKGUpIHsKICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMikgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDEpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1aWxkaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHhfZGlzdCA9IE1hdGgucG93KHRoaXMubW91c2V4IC0gdGhpcy5idWlsZGluZ19zdGFydFswXSwgMik7CiAgICAgICAgICAgICAgICAgICAgbGV0IHlfZGlzdCA9IE1hdGgucG93KHRoaXMubW91c2V5IC0gdGhpcy5idWlsZGluZ19zdGFydFsxXSwgMik7CiAgICAgICAgICAgICAgICAgICAgbGV0IGRpc3QgPSBNYXRoLnNxcnQoeF9kaXN0ICsgeV9kaXN0KTsKICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Tm9kZSA9IHRoaXMubm9kZSh0aGlzLmJ1aWxkaW5nX3N0YXJ0WzBdLCB0aGlzLmJ1aWxkaW5nX3N0YXJ0WzFdLCBkaXN0LCAiIik7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlQ3JlYXRlZENhbGxiYWNrKG5ld05vZGUpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZS53aGljaCA9PSAzKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmUgIT0gbnVsbCAmJiB0aGlzLnN0YXJ0WyJzdGFydF9ub2RlIl0pIHsKICAgICAgICAgICAgICAgICAgICBsZXQgZXhpc3RpbmdFZGdlID0gdGhpcy5nZXRFZGdlKHRoaXMuc3RhcnRbInN0YXJ0X25vZGUiXS5pZCwgdGhpcy5hY3RpdmUuaWQpOwogICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdFZGdlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFZGdlID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbk1vZGUgPT09ICJiaURpcmVjdGlvbmFsIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWRnZSA9IHRoaXMuc3RhcnRbInN0YXJ0X25vZGUiXS5jb25uZWN0KHRoaXMuYWN0aXZlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbm5lY3Rpb25Nb2RlID09PSAiZGlyZWN0aW9uYWwiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFZGdlID0gdGhpcy5zdGFydFsic3RhcnRfbm9kZSJdLmNvbm5lY3QodGhpcy5hY3RpdmUsICIiLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3RWRnZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uQ3JlYXRlZENhbGxiYWNrKG5ld0VkZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gewogICAgICAgICAgICAgICAgICAgICJ4IjogbnVsbCwKICAgICAgICAgICAgICAgICAgICAieSI6IG51bGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gY2xpY2tfZG93bihlKSB7CiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZS53aGljaCA9PSAxKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRpbmdfc3RhcnQgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2V4LAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNleQogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMykgewogICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHsKICAgICAgICAgICAgICAgICAgICAieCI6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgInkiOiBudWxsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHsKICAgICAgICAgICAgICAgICAgICAieCI6IHRoaXMubW91c2V4LAogICAgICAgICAgICAgICAgICAgICJ5IjogdGhpcy5tb3VzZXksCiAgICAgICAgICAgICAgICAgICAgImFjdGl2ZSI6IHRoaXMuYWN0aXZlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlICE9IG51bGwgJiYgdGhpcy5hY3RpdmUudHlwZSA9PT0gIm5vZGUiKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFsiYWN0aW9uIl0gPSAiY29ubmVjdCI7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFsic3RhcnRfbm9kZSJdID0gdGhpcy5hY3RpdmU7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gY2FwdHVyZShlKSB7CiAgICAgICAgICAgIGxldCBsZXR0ZXJzID0gImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoxMjM0NTY3ODkwIUAjJCVeJiooKV8rflxcLz88PiciICsgJyIuLDs6fmBbXXt9fC09ICc7CiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAobGV0dGVycy5pbmRleE9mKGUua2V5KSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgZS5vdXRwdXQgPSBlLmtleTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PSAiRGVsZXRlIikgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLmRlbGV0ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAiICIpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT0gIkJhY2tzcGFjZSIpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUuc2V0VGV4dCh0aGlzLmFjdGl2ZS50ZXh0LnN1YnN0cmluZygwLCB0aGlzLmFjdGl2ZS50ZXh0Lmxlbmd0aCAtIDEpKTsKICAgICAgICAgICAgICAgICAgICBlLm91dHB1dCA9ICIiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGUub3V0cHV0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUudGV4dCArPSBlLm91dHB1dDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGNoZWNrX21vdXNlKCkgewogICAgICAgIGxldCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgdGhpcy5vZmZzZXR4ID0gcmVjdC5sZWZ0OwogICAgICAgIHRoaXMub2Zmc2V0eSA9IHJlY3QudG9wOwogICAgICAgIHRoaXMuYWN0aXZlID0gbnVsbDsKICAgICAgICB0aGlzLm1vdXNlX2FjdGl2YXRlZCA9IHRydWU7CiAgICAgICAgZnVuY3Rpb24gY2hlY2soZSkgewogICAgICAgICAgICB0aGlzLm1vdXNleCA9IGUueCAtIHJlY3QubGVmdDsKICAgICAgICAgICAgdGhpcy5tb3VzZXkgPSBlLnkgLSByZWN0LnRvcCArIHRoaXMucHhfZG93bjsKICAgICAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBPYmplY3QudmFsdWVzKHRoaXMub2JqcykpewogICAgICAgICAgICAgICAgaWYgKG5vZGUuaW5zaWRlKHRoaXMubW91c2V4LCB0aGlzLm1vdXNleSkpIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IG5vZGU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAobGV0IGVkZ2Ugb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmVkZ2VzKSl7CiAgICAgICAgICAgICAgICBpZiAoZWRnZS5pbnNpZGUodGhpcy5tb3VzZXgsIHRoaXMubW91c2V5KSkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZWRnZTsKICAgICAgICAgICAgICAgICAgICBlZGdlLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChlZGdlLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2Uuc2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAiZGVmYXVsdCI7CiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gYWRqdXN0X3Njb2xsKGUpIHsKICAgICAgICAgICAgdGhpcy5weF9kb3duID0gd2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KS5zY3JvbGxUb3A7CiAgICAgICAgfQogICAgICAgIHRoaXMucHhfZG93biA9IDA7CiAgICAgICAgdGhpcy5wb2ludGluZ19jaGVjayA9IGNoZWNrLmJpbmQodGhpcyk7CiAgICB9CiAgICBkZXB0aEZpcnN0U2VhcmNoKHN0YXJ0aWQsIGVuZGlkLCBkcmF3X3BhdGgsIGRlbGF5ID0gMCkgewogICAgICAgIGNvbnNvbGUubG9nKCJpbnNpZGUgZnVuY3Rpb24iKTsKICAgICAgICBsZXQgZGlzY292ZXJlZF9zdGFjayA9IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5vZGVpZCI6IHN0YXJ0aWQsCiAgICAgICAgICAgICAgICAicGFyZW50aWQiOiBzdGFydGlkCiAgICAgICAgICAgIH0KICAgICAgICBdOwogICAgICAgIGxldCB2aXNpdGVkID0gewogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gZ2V0UGF0aChub2Rlb2JqLCBkcmF3X3BhdGggPSB0cnVlKSB7CiAgICAgICAgICAgIGxldCBwYXRoID0gW107CiAgICAgICAgICAgIHdoaWxlKG5vZGVvYmoubm9kZWlkICE9PSBub2Rlb2JqLnBhcmVudGlkKXsKICAgICAgICAgICAgICAgIGlmIChkcmF3X3BhdGgpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEVkZ2Uobm9kZW9iai5wYXJlbnRpZCwgbm9kZW9iai5ub2RlaWQpLnNldENvbG9yKCJyZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhdGgudW5zaGlmdChub2Rlb2JqLm5vZGVpZCk7CiAgICAgICAgICAgICAgICBub2Rlb2JqID0gdmlzaXRlZFtub2Rlb2JqLnBhcmVudGlkXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcGF0aDsKICAgICAgICB9CiAgICAgICAgZ2V0UGF0aCA9IGdldFBhdGguYmluZCh0aGlzKTsKICAgICAgICBsZXQgZXZhdWxhdGVOb2RlID0gZnVuY3Rpb24obm9kZW9iamVjdCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiaGVyZSIpOwogICAgICAgICAgICBpZiAodmlzaXRlZC5oYXNPd25Qcm9wZXJ0eShub2Rlb2JqZWN0Lm5vZGVpZCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBldmF1bGF0ZU5vZGUoZGlzY292ZXJlZF9zdGFjay5zaGlmdCgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobm9kZW9iamVjdC5ub2RlaWQgPT09IGVuZGlkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UGF0aChub2Rlb2JqZWN0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2aXNpdGVkW25vZGVvYmplY3Qubm9kZWlkXSA9IG5vZGVvYmplY3Q7CiAgICAgICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Tm9kZUJ5SWQobm9kZW9iamVjdC5ub2RlaWQpOwogICAgICAgICAgICBsZXQgY2hpbGRyZW5PYmpzID0gY3VycmVudE5vZGUuY2hpbGRyZW4ubWFwKChub2RlaWQpPT57CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIG5vZGVpZDogbm9kZWlkLAogICAgICAgICAgICAgICAgICAgIHBhcmVudGlkOiBjdXJyZW50Tm9kZS5pZAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRpc2NvdmVyZWRfc3RhY2sudW5zaGlmdCguLi5jaGlsZHJlbk9ianMpOwogICAgICAgICAgICBldmF1bGF0ZU5vZGUoZGlzY292ZXJlZF9zdGFjay5zaGlmdCgpKTsKICAgICAgICB9OwogICAgICAgIGV2YXVsYXRlTm9kZSA9IGV2YXVsYXRlTm9kZS5iaW5kKHRoaXMpOwogICAgICAgIHJldHVybiBldmF1bGF0ZU5vZGUoZGlzY292ZXJlZF9zdGFjay5zaGlmdCgpKTsKICAgIH0KICAgIGJyZWFkdGhGaXJzdFNlYXJjaChzdGFydGlkLCBlbmRpZCwgZHJhd19wYXRoLCBkZWxheSA9IDApIHsKICAgICAgICBjb25zb2xlLmxvZygiaW5zaWRlIGZ1bmN0aW9uIik7CiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5nZXROb2RlQnlJZChzdGFydGlkKTsKICAgICAgICBsZXQgZW5kID0gdGhpcy5nZXROb2RlQnlJZChlbmRpZCk7CiAgICAgICAgbGV0IGRpc2NvdmVyZWQgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5vZGU6IHN0YXJ0aWQsCiAgICAgICAgICAgICAgICBwYXJlbnQ6IHN0YXJ0aWQKICAgICAgICAgICAgfQogICAgICAgIF07CiAgICAgICAgbGV0IHZpc2l0ZWQgPSB7CiAgICAgICAgfTsKICAgICAgICBmdW5jdGlvbiBnZXRQYXRoKG5vZGVvYmosIGRyYXdfcGF0aCA9IHRydWUpIHsKICAgICAgICAgICAgbGV0IHBhdGggPSBbXTsKICAgICAgICAgICAgd2hpbGUobm9kZW9iai5ub2RlICE9PSBub2Rlb2JqLnBhcmVudCl7CiAgICAgICAgICAgICAgICBpZiAoZHJhd19wYXRoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRFZGdlKG5vZGVvYmoucGFyZW50LCBub2Rlb2JqLm5vZGUpLnNldENvbG9yKCJyZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhdGgudW5zaGlmdChub2Rlb2JqLm5vZGUpOwogICAgICAgICAgICAgICAgbm9kZW9iaiA9IHZpc2l0ZWRbbm9kZW9iai5wYXJlbnRdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwYXRoOwogICAgICAgIH0KICAgICAgICBnZXRQYXRoID0gZ2V0UGF0aC5iaW5kKHRoaXMpOwogICAgICAgIGNvbnNvbGUubG9nKGRpc2NvdmVyZWQpOwogICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IGRpc2NvdmVyZWQubGVuZ3RoOyBpMSsrKXsKICAgICAgICAgICAgaWYgKHZpc2l0ZWQuaGFzT3duUHJvcGVydHkoZGlzY292ZXJlZFtpMV0ubm9kZSkpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkaXNjb3ZlcmVkW2kxXS5ub2RlID09PSBlbmRpZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGdldFBhdGgoZGlzY292ZXJlZFtpMV0sIGRyYXdfcGF0aCA9IGRyYXdfcGF0aCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLmdldE5vZGVCeUlkKGRpc2NvdmVyZWRbaTFdLm5vZGUpOwogICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuT2JqcyA9IGN1cnJlbnROb2RlLmNoaWxkcmVuLm1hcCgobm9kZWlkKT0+ewogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBkaXNjb3ZlcmVkW2kxXS5ub2RlCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZGlzY292ZXJlZC5wdXNoKC4uLmNoaWxkcmVuT2Jqcyk7CiAgICAgICAgICAgICAgICB2aXNpdGVkW2Rpc2NvdmVyZWRbaTFdLm5vZGVdID0gZGlzY292ZXJlZFtpMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBBc3RhcihzdGFydGlkLCBlbmRpZCwgZHJhd19wYXRoID0gdHJ1ZSwgZGVsYXkgPSAwKSB7CiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5nZXROb2RlQnlJZChzdGFydGlkKTsKICAgICAgICBsZXQgZW5kID0gdGhpcy5nZXROb2RlQnlJZChlbmRpZCk7CiAgICAgICAgbGV0IHZpc2l0ZWQgPSB7CiAgICAgICAgfTsKICAgICAgICBsZXQgZGF0YSA9IHsKICAgICAgICB9OwogICAgICAgIGxldCBkaXNjb3ZlcmVkID0gbmV3IFByaW9yaXR5UXVldWUoKTsKICAgICAgICBmdW5jdGlvbiBkYXRhQ2FyZChub2RlaWQsIHZpYWlkLCBjb3N0LCBkaXN0YW5jZSkgewogICAgICAgICAgICB0aGlzLm5vZGVpZCA9IG5vZGVpZDsKICAgICAgICAgICAgdGhpcy5jb3N0ID0gY29zdDsKICAgICAgICAgICAgdGhpcy52aWFpZCA9IHZpYWlkOwogICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGV2YWx1YXRlTm9kZShub2RlaWQsIGNvc3QpIHsKICAgICAgICAgICAgaWYgKHZpc2l0ZWRbbm9kZWlkXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IHJvb3QgPSB0aGlzLmdldE5vZGVCeUlkKG5vZGVpZCk7CiAgICAgICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IHJvb3QuY2hpbGRyZW4ubGVuZ3RoOyBpMSsrKXsKICAgICAgICAgICAgICAgIGxldCBub2RlID0gdGhpcy5nZXROb2RlQnlJZChyb290LmNoaWxkcmVuW2kxXSk7CiAgICAgICAgICAgICAgICBpZiAodmlzaXRlZFtub2RlLmlkXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgZWRnZSA9IHRoaXMuZ2V0RWRnZShyb290LmlkLCBub2RlLmlkKTsKICAgICAgICAgICAgICAgIGxldCB3ZWlnaHQgPSBlZGdlLndlaWdodDsKICAgICAgICAgICAgICAgIGxldCBjYXJkID0gbmV3IGRhdGFDYXJkKG5vZGUuaWQsIHJvb3QuaWQsIGNvc3QgKyB3ZWlnaHQsIE1hdGguZmxvb3IodGhpcy5nZXREaXN0YW5jZShyb290LmlkLCBlbmQuaWQpKSAtIDEpOwogICAgICAgICAgICAgICAgbGV0IGtleTEgPSBub2RlLmlkOwogICAgICAgICAgICAgICAgaWYgKGRpc2NvdmVyZWQuaGFzSXRlbShrZXkxKSkgewogICAgICAgICAgICAgICAgICAgIGxldCBvbGRJdGVtID0gZGlzY292ZXJlZC5nZXRJdGVtQnlLZXkoa2V5MSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEl0ZW0uaXRlbS5jb3N0ID4gY2FyZC5jb3N0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQucmVwbGFjZShjYXJkLCBjYXJkLmNvc3QsIGtleTEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGlzY292ZXJlZC5pbnNlcnQoY2FyZCwgY2FyZC5jb3N0ICsgY2FyZC5kaXN0YW5jZSwga2V5MSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZXZhbHVhdGVOb2RlID0gZXZhbHVhdGVOb2RlLmJpbmQodGhpcyk7CiAgICAgICAgZGlzY292ZXJlZC5pbnNlcnQobmV3IGRhdGFDYXJkKHN0YXJ0aWQsIHN0YXJ0aWQsIDApLCAwKTsKICAgICAgICB3aGlsZShkaXNjb3ZlcmVkLnF1ZXVlLmxlbmd0aCA+IDApewogICAgICAgICAgICBsZXQgY3VycmVudF9ub2RlID0gZGlzY292ZXJlZC5kZXF1ZXVlKCk7CiAgICAgICAgICAgIGlmIChjdXJyZW50X25vZGUuaXRlbS5ub2RlaWQgPT09IGVuZGlkKSB7CiAgICAgICAgICAgICAgICBsZXQgb3V0cHV0ID0gewogICAgICAgICAgICAgICAgICAgIGNvc3Q6IGN1cnJlbnRfbm9kZS5pdGVtLmNvc3QsCiAgICAgICAgICAgICAgICAgICAgcGF0aDogW10KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBvdXRwdXQucGF0aC51bnNoaWZ0KGN1cnJlbnRfbm9kZS5pdGVtLm5vZGVpZCk7CiAgICAgICAgICAgICAgICB3aGlsZShjdXJyZW50X25vZGUuaXRlbS5ub2RlaWQgIT09IHN0YXJ0aWQpewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfbm9kZSA9IHZpc2l0ZWRbY3VycmVudF9ub2RlLml0ZW0udmlhaWRdOwogICAgICAgICAgICAgICAgICAgIG91dHB1dC5wYXRoLnVuc2hpZnQoY3VycmVudF9ub2RlLml0ZW0ubm9kZWlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChkcmF3X3BhdGgpIHsKICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBvdXRwdXQucGF0aC5sZW5ndGggLSAxOyBpMSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRFZGdlKG91dHB1dC5wYXRoW2kxXSwgb3V0cHV0LnBhdGhbaTEgKyAxXSkuc2V0Q29sb3IoInJlZCIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IG5vZGVpZCA9IGN1cnJlbnRfbm9kZS5pdGVtLm5vZGVpZDsKICAgICAgICAgICAgZXZhbHVhdGVOb2RlKGN1cnJlbnRfbm9kZS5pdGVtLm5vZGVpZCwgY3VycmVudF9ub2RlLml0ZW0uY29zdCk7CiAgICAgICAgICAgIHZpc2l0ZWRbbm9kZWlkXSA9IGN1cnJlbnRfbm9kZTsKICAgICAgICB9CiAgICB9CiAgICBkaWlqa3N0cmEoc3RhcnRpZCwgZW5kaWQsIGRyYXdfcGF0aCA9IHRydWUpIHsKICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLmdldE5vZGVCeUlkKHN0YXJ0aWQpOwogICAgICAgIGxldCBlbmQgPSB0aGlzLmdldE5vZGVCeUlkKGVuZGlkKTsKICAgICAgICBsZXQgdmlzaXRlZCA9IHsKICAgICAgICB9OwogICAgICAgIGxldCBkYXRhID0gewogICAgICAgIH07CiAgICAgICAgbGV0IGRpc2NvdmVyZWQgPSBuZXcgR3JhcGgucHJpb3JpdHlRdWV1ZSgpOwogICAgICAgIGZ1bmN0aW9uIGRhdGFDYXJkKG5vZGVpZCwgdmlhaWQsIGNvc3QpIHsKICAgICAgICAgICAgdGhpcy5ub2RlaWQgPSBub2RlaWQ7CiAgICAgICAgICAgIHRoaXMuY29zdCA9IGNvc3Q7CiAgICAgICAgICAgIHRoaXMudmlhaWQgPSB2aWFpZDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZXZhbHVhdGVOb2RlKG5vZGVpZCwgY29zdCkgewogICAgICAgICAgICBpZiAodmlzaXRlZFtub2RlaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBsZXQgcm9vdCA9IHRoaXMuZ2V0Tm9kZUJ5SWQobm9kZWlkKTsKICAgICAgICAgICAgZm9yKGxldCBpMSA9IDA7IGkxIDwgcm9vdC5jaGlsZHJlbi5sZW5ndGg7IGkxKyspewogICAgICAgICAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmdldE5vZGVCeUlkKHJvb3QuY2hpbGRyZW5baTFdKTsKICAgICAgICAgICAgICAgIGlmICh2aXNpdGVkW25vZGUuaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxldCBlZGdlID0gdGhpcy5nZXRFZGdlKHJvb3QuaWQsIG5vZGUuaWQpOwogICAgICAgICAgICAgICAgbGV0IHdlaWdodCA9IGVkZ2Uud2VpZ2h0OwogICAgICAgICAgICAgICAgbGV0IGNhcmQgPSBuZXcgZGF0YUNhcmQobm9kZS5pZCwgcm9vdC5pZCwgY29zdCArIHdlaWdodCk7CiAgICAgICAgICAgICAgICBsZXQga2V5MSA9IG5vZGUuaWQ7CiAgICAgICAgICAgICAgICBpZiAoZGlzY292ZXJlZC5oYXNJdGVtKGtleTEpKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZEl0ZW0gPSBkaXNjb3ZlcmVkLmdldEl0ZW1CeUtleShrZXkxKTsKICAgICAgICAgICAgICAgICAgICBpZiAob2xkSXRlbS5pdGVtLmNvc3QgPiBjYXJkLmNvc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY292ZXJlZC5yZXBsYWNlKGNhcmQsIGNhcmQuY29zdCwga2V5MSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkLmluc2VydChjYXJkLCBjYXJkLmNvc3QsIGtleTEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV2YWx1YXRlTm9kZSA9IGV2YWx1YXRlTm9kZS5iaW5kKHRoaXMpOwogICAgICAgIGRpc2NvdmVyZWQuaW5zZXJ0KG5ldyBkYXRhQ2FyZChzdGFydGlkLCBzdGFydGlkLCAwKSwgMCk7CiAgICAgICAgd2hpbGUoZGlzY292ZXJlZC5xdWV1ZS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgbGV0IGN1cnJlbnRfbm9kZSA9IGRpc2NvdmVyZWQuZGVxdWV1ZSgpOwogICAgICAgICAgICBpZiAoY3VycmVudF9ub2RlLml0ZW0ubm9kZWlkID09PSBlbmRpZCkgewogICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9IHsKICAgICAgICAgICAgICAgICAgICBjb3N0OiBjdXJyZW50X25vZGUuaXRlbS5jb3N0LAogICAgICAgICAgICAgICAgICAgIHBhdGg6IFtdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgb3V0cHV0LnBhdGgudW5zaGlmdChjdXJyZW50X25vZGUuaXRlbS5ub2RlaWQpOwogICAgICAgICAgICAgICAgd2hpbGUoY3VycmVudF9ub2RlLml0ZW0ubm9kZWlkICE9PSBzdGFydGlkKXsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X25vZGUgPSB2aXNpdGVkW2N1cnJlbnRfbm9kZS5pdGVtLnZpYWlkXTsKICAgICAgICAgICAgICAgICAgICBvdXRwdXQucGF0aC51bnNoaWZ0KGN1cnJlbnRfbm9kZS5pdGVtLm5vZGVpZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZHJhd19wYXRoKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpMSA9IDA7IGkxIDwgb3V0cHV0LnBhdGgubGVuZ3RoIC0gMTsgaTErKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RWRnZShvdXRwdXQucGF0aFtpMV0sIG91dHB1dC5wYXRoW2kxICsgMV0pLnNldENvbG9yKCJyZWQiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCBub2RlaWQgPSBjdXJyZW50X25vZGUuaXRlbS5ub2RlaWQ7CiAgICAgICAgICAgIGV2YWx1YXRlTm9kZShjdXJyZW50X25vZGUuaXRlbS5ub2RlaWQsIGN1cnJlbnRfbm9kZS5pdGVtLmNvc3QpOwogICAgICAgICAgICB2aXNpdGVkW25vZGVpZF0gPSBjdXJyZW50X25vZGU7CiAgICAgICAgfQogICAgfQogICAgdXBkYXRlKCkgewogICAgICAgIGxldCBub2RlcyA9IE9iamVjdC52YWx1ZXModGhpcy5vYmpzKTsKICAgICAgICBub2Rlcy5tYXAoKG5vZGUpPT5ub2RlLnVwZGF0ZSgpCiAgICAgICAgKTsKICAgICAgICB0aGlzLmRyYXdFZGdlcygpOwogICAgICAgIGlmICh0aGlzLmNvbm5lY3RpbmcpIHsKICAgICAgICAgICAgbGV0IHlmbGlwcGVyID0gMTsKICAgICAgICAgICAgbGV0IHhmbGlwcGVyID0gMTsKICAgICAgICAgICAgbGV0IHNsb3BlID0gKHRoaXMubW91c2V5IC0gdGhpcy5zdGFydC5hY3RpdmUueSkgLyAodGhpcy5tb3VzZXggLSB0aGlzLnN0YXJ0LmFjdGl2ZS54KTsKICAgICAgICAgICAgaWYgKHRoaXMubW91c2V4IDw9IHRoaXMuc3RhcnQuYWN0aXZlLngpIHsKICAgICAgICAgICAgICAgIHhmbGlwcGVyID0gLTE7CiAgICAgICAgICAgICAgICB5ZmxpcHBlciA9IC0xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc3RhcnQuc3RhcnRfbm9kZS5hcnJvdyh0aGlzLm1vdXNleCwgdGhpcy5tb3VzZXkpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5idWlsZGluZykgewogICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICIjMDAwIjsKICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIGxldCB4X2Rpc3QgPSBNYXRoLnBvdyh0aGlzLm1vdXNleCAtIHRoaXMuYnVpbGRpbmdfc3RhcnRbMF0sIDIpOwogICAgICAgICAgICBsZXQgeV9kaXN0ID0gTWF0aC5wb3codGhpcy5tb3VzZXkgLSB0aGlzLmJ1aWxkaW5nX3N0YXJ0WzFdLCAyKTsKICAgICAgICAgICAgbGV0IGRpc3QgPSBNYXRoLnNxcnQoeF9kaXN0ICsgeV9kaXN0KTsKICAgICAgICAgICAgdGhpcy5jdHguYXJjKHRoaXMuYnVpbGRpbmdfc3RhcnRbMF0sIHRoaXMuYnVpbGRpbmdfc3RhcnRbMV0sIGRpc3QsIDAsIDIgKiBNYXRoLlBJKTsKICAgICAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7CiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpOwogICAgICAgIH0KICAgICAgICB0aGlzLnRpY2tDYWxsYmFjayh0aGlzKTsKICAgIH0KICAgIGdldE5vZGVCeUlkKGlkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMub2Jqc1tpZF07CiAgICB9CiAgICBnZXRFZGdlQnlJZChpZCkgewogICAgICAgIHJldHVybiB0aGlzLmVkZ2VzW2lkXTsKICAgIH0KICAgIGRyYXdFZGdlcygpIHsKICAgICAgICBmb3IgKGxldCBlZGdlIG9mIE9iamVjdC52YWx1ZXModGhpcy5lZGdlcykpewogICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7CiAgICAgICAgICAgIGVkZ2UuZHJhdygpOwogICAgICAgIH0KICAgIH0KICAgIGdldERpc3RhbmNlKHN0YXJ0Tm9kZUlkLCBlbmROb2RlSWQpIHsKICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLmdldE5vZGVCeUlkKHN0YXJ0Tm9kZUlkKTsKICAgICAgICBsZXQgZW5kID0gdGhpcy5nZXROb2RlQnlJZChlbmROb2RlSWQpOwogICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZW5kLnkgLSBzdGFydC55LCAyKSArIE1hdGgucG93KGVuZC54IC0gc3RhcnQueCwgMikpOwogICAgfQogICAgYWN0aXZhdGVfZWRpdGluZyhmcHMpIHsKICAgICAgICBsZXQgZHJhZ2dpbmcgPSBmYWxzZTsKICAgICAgICBsZXQgeGRpc3QgPSBudWxsOwogICAgICAgIGxldCB5ZGlzdCA9IG51bGw7CiAgICAgICAgbGV0IG1haW5fbm9kZSA9IG51bGw7CiAgICAgICAgaWYgKHRoaXMubW91c2VfYWN0aXZhdGVkICE9PSB0cnVlKSB7CiAgICAgICAgICAgIHRocm93ICJtb3VzZSBtdXN0IGJlIGZpcnN0IGluaXRpbGl6ZWQiOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzdGFydF9kcmFnZ2luZyhlKSB7CiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDIgfHwgZS53aGljaCA9PSAzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7CiAgICAgICAgICAgICAgICB4ZGlzdCA9IHRoaXMuYWN0aXZlLnggLSB0aGlzLm1vdXNleDsKICAgICAgICAgICAgICAgIHlkaXN0ID0gdGhpcy5hY3RpdmUueSAtIHRoaXMubW91c2V5OwogICAgICAgICAgICAgICAgY29uc3QgZGVhY3RpdmF0ZU5vZGUgPSBtYWluX25vZGU7CiAgICAgICAgICAgICAgICBtYWluX25vZGUgPSB0aGlzLmFjdGl2ZTsKICAgICAgICAgICAgICAgIG1haW5fbm9kZS5jb2xvciA9IHRoaXMuYWN0aXZlQ29sb3I7CiAgICAgICAgICAgICAgICB0aGlzLmRlQWN0aXZhdGVOb2RlQ2FsbGJhY2soZGVhY3RpdmF0ZU5vZGUpOwogICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZU5vZGVDYWxsYmFjayhkZWFjdGl2YXRlTm9kZSwgbWFpbl9ub2RlKTsKICAgICAgICAgICAgICAgIGRyYWdnaW5nID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBlbmRfZHJhZ2dpbmcoZSkgewogICAgICAgICAgICBpZiAoZS53aGljaCA9PSAyIHx8IGUud2hpY2ggPT0gMykgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRyYWdnaW5nID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG1haW5sb29wKCkgewogICAgICAgICAgICBpZiAoZHJhZ2dpbmcpIHsKICAgICAgICAgICAgICAgIG1haW5fbm9kZS54ID0gdGhpcy5tb3VzZXggKyB4ZGlzdDsKICAgICAgICAgICAgICAgIG1haW5fbm9kZS55ID0gdGhpcy5tb3VzZXkgKyB5ZGlzdDsKICAgICAgICAgICAgICAgIGxldCBwcmV2eCA9IHRoaXMubW91c2V4OwogICAgICAgICAgICAgICAgbGV0IHByZXZ5ID0gdGhpcy5tb3VzZXk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5kcmFnX3N0YXJ0ID0gc3RhcnRfZHJhZ2dpbmcuYmluZCh0aGlzKTsKICAgICAgICB0aGlzLmRyYWdfZW5kID0gZW5kX2RyYWdnaW5nLmJpbmQodGhpcyk7CiAgICAgICAgdGhpcy5kcmF3ID0gbWFpbmxvb3AuYmluZCh0aGlzKTsKICAgIH0KICAgIGRvdWJsZUNsaWNrID0gKGUpPT57CiAgICAgICAgaWYgKGUud2hpY2ggPT0gMiB8fCBlLndoaWNoID09IDMpIHsKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHsKICAgICAgICAgICAgdGhpcy5kb3VibGVDbGlja2VkTm9kZUNhbGxiYWNrKHRoaXMuYWN0aXZlKTsKICAgICAgICB9CiAgICB9OwogICAgZHJhdyA9ICgpPT57CiAgICB9OwogICAgZHJhZ19zdGFydCA9IChlKT0+ewogICAgfTsKICAgIGRyYWdfZW5kID0gKGUpPT57CiAgICB9OwogICAgcG9pbnRpbmdfY2hlY2sgPSAoZSk9PnsKICAgIH07CiAgICBlZGdlKHN0YXJ0Tm9kZWlkLCBlbmROb2RlaWQsIGNvbG9yID0gIiNhYWEiLCB0ZXh0ID0gIiIsIGRpcmVjdGlvbmFsID0gZmFsc2UpIHsKICAgICAgICByZXR1cm4gR3JhcGguX2VkZ2UodGhpcy5pZCwgc3RhcnROb2RlaWQsIGVuZE5vZGVpZCwgY29sb3IsIHRleHQsIGRpcmVjdGlvbmFsKTsKICAgIH0KICAgIG5vZGUoeCwgeSwgciwgdGV4dCA9ICIiLCBoYXNoID0gIiIpIHsKICAgICAgICBjb25zdCBub2RlID0gR3JhcGguX25vZGUodGhpcy5pZCwgeCwgeSwgciwgdGV4dCwgaGFzaCk7CiAgICAgICAgdGhpcy5ub2RlU2V0dXBDYWxsYmFjayhub2RlKTsKICAgICAgICByZXR1cm4gbm9kZTsKICAgIH0KfQpjbGFzcyBFZGdlIHsKICAgIHR5cGUgPSAiZWRnZSI7CiAgICBjb2xvciA9ICJyZ2IoMCwwLDApIjsKICAgIGFsdENvbG9yID0gInJnYigyNTUsMCwwKSI7CiAgICBzZWxlY3RlZCA9IGZhbHNlOwogICAgY29uc3RydWN0b3IoY29udGV4dGlkLCBzdGFydE5vZGVpZCwgZW5kTm9kZWlkLCBjb2xvciwgdGV4dCwgZGlyZWN0aW9uYWwxKXsKICAgICAgICB0aGlzLmNvbnRleHRpZCA9IGNvbnRleHRpZDsKICAgICAgICB0aGlzLnN0YXJ0Tm9kZWlkID0gc3RhcnROb2RlaWQ7CiAgICAgICAgdGhpcy5lbmROb2RlaWQgPSBlbmROb2RlaWQ7CiAgICAgICAgbGV0IGlkX3RpbWUxID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgdGhpcy5pZCA9IE51bWJlcihpZF90aW1lMS50b1N0cmluZygpICsgT2JqZWN0LnZhbHVlcyhHcmFwaC5nZXRDb250ZXh0KHRoaXMuY29udGV4dGlkKS5lZGdlcykubGVuZ3RoLnRvU3RyaW5nKCkgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkpOwogICAgICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICAgICAgdGhpcy53ZWlnaHQgPSBwYXJzZUZsb2F0KHRleHQpOwogICAgICAgIGlmIChpc05hTih0aGlzLndlaWdodCkpIHsKICAgICAgICAgICAgdGhpcy53ZWlnaHQgPSAwOwogICAgICAgIH0KICAgICAgICB0aGlzLmRpcmVjdGlvbmFsID0gZGlyZWN0aW9uYWwxOwogICAgICAgIGxldCBzdGFydCA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpLmdldE5vZGVCeUlkKHN0YXJ0Tm9kZWlkKTsKICAgICAgICBzdGFydC5lZGdlc1t0aGlzLmlkXSA9IHRoaXMuZW5kTm9kZWlkOwogICAgICAgIGlmICghdGhpcy5kaXJlY3Rpb25hbCkgewogICAgICAgICAgICBsZXQgZW5kID0gR3JhcGguZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRpZCkuZ2V0Tm9kZUJ5SWQoZW5kTm9kZWlkKTsKICAgICAgICAgICAgZW5kLmVkZ2VzW3RoaXMuaWRdID0gdGhpcy5zdGFydE5vZGVpZDsKICAgICAgICB9CiAgICB9CiAgICBpc0RpcmVjdGlvbmFsID0gKCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb25hbCA9PT0gdHJ1ZTsKICAgIH07CiAgICBzZXRUZXh0ID0gKHRleHQxKT0+ewogICAgICAgIHRoaXMudGV4dCA9IHRleHQxOwogICAgICAgIHRoaXMud2VpZ2h0ID0gcGFyc2VGbG9hdCh0ZXh0MSkgfHwgMDsKICAgIH07CiAgICB0b2dnbGVTZWxlY3RlZCA9ICgpPT57CiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHsKICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH07CiAgICBpc0JpRGlyZWN0aW9uYWwgPSAoKT0+ewogICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbmFsID09PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIHNldERpcmVjdGlvbmFsID0gKCk9PnsKICAgICAgICB0aGlzLmRpcmVjdGlvbmFsID0gdHJ1ZTsKICAgIH07CiAgICBzZXRVbmRpcmVjdGlvbmFsID0gKCk9PnsKICAgICAgICB0aGlzLmRpcmVjdGlvbmFsID0gZmFsc2U7CiAgICB9OwogICAgc2V0V2VpZ2h0ID0gKHdlaWdodCk9PnsKICAgICAgICB0aGlzLndlaWdodCA9IHdlaWdodDsKICAgIH07CiAgICBkZWxldGUgPSAoKT0+ewogICAgICAgIGxldCBjb250ZXh0ID0gR3JhcGguZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRpZCk7CiAgICAgICAgbGV0IHN0YXJ0MSA9IGNvbnRleHQuZ2V0Tm9kZUJ5SWQodGhpcy5zdGFydE5vZGVpZCk7CiAgICAgICAgbGV0IGVuZCA9IGNvbnRleHQuZ2V0Tm9kZUJ5SWQodGhpcy5lbmROb2RlaWQpOwogICAgICAgIGRlbGV0ZSBzdGFydDEuZWRnZXNbdGhpcy5pZF07CiAgICAgICAgZGVsZXRlIGVuZC5lZGdlc1t0aGlzLmlkXTsKICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBzdGFydDEuY2hpbGRyZW4ubGVuZ3RoOyBpMSsrKXsKICAgICAgICAgICAgaWYgKHN0YXJ0MS5jaGlsZHJlbltpMV0gPT09IHRoaXMuZW5kTm9kZWlkKSB7CiAgICAgICAgICAgICAgICBzdGFydDEuY2hpbGRyZW4uc3BsaWNlKGkxLCAxKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmlzQmlEaXJlY3Rpb25hbCgpKSB7CiAgICAgICAgICAgIGZvcihsZXQgaTIgPSAwOyBpMiA8IGVuZC5jaGlsZHJlbi5sZW5ndGg7IGkyKyspewogICAgICAgICAgICAgICAgaWYgKGVuZC5jaGlsZHJlbltpMl0gPT09IHRoaXMuc3RhcnROb2RlaWQpIHsKICAgICAgICAgICAgICAgICAgICBlbmQuY2hpbGRyZW4uc3BsaWNlKGkyLCAxKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBkZWxldGUgY29udGV4dC5lZGdlc1t0aGlzLmlkXTsKICAgICAgICBkZWxldGUgdGhpczsKICAgIH07CiAgICBzZXRDb2xvciA9IChjb2xvcjEpPT57CiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yMTsKICAgIH07CiAgICBnZXRTdGFydGlkID0gKCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5zdGFydE5vZGVpZDsKICAgIH07CiAgICBnZXRFbmRpZCA9ICgpPT57CiAgICAgICAgcmV0dXJuIHRoaXMuZW5kTm9kZWlkOwogICAgfTsKICAgIF91cGRhdGVWYWx1ZXMgPSAoc2xvcGUgPSBudWxsKT0+ewogICAgICAgIGxldCBjb250ZXh0ID0gR3JhcGguZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRpZCk7CiAgICAgICAgbGV0IHN0YXJ0MSA9IGNvbnRleHQuZ2V0Tm9kZUJ5SWQodGhpcy5zdGFydE5vZGVpZCk7CiAgICAgICAgbGV0IGVuZCA9IGNvbnRleHQuZ2V0Tm9kZUJ5SWQodGhpcy5lbmROb2RlaWQpOwogICAgICAgIGlmIChzbG9wZSA9PT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLnNsb3BlID0gKGVuZC55IC0gc3RhcnQxLnkpIC8gKGVuZC54IC0gc3RhcnQxLngpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuc2xvcGUgPSBzbG9wZTsKICAgICAgICB9CiAgICAgICAgbGV0IHhmbGlwID0gMTsKICAgICAgICBsZXQgeWZsaXAgPSAxOwogICAgICAgIGlmIChzdGFydDEueCA+PSBlbmQueCkgewogICAgICAgICAgICB5ZmxpcCA9IC0xOwogICAgICAgICAgICB4ZmxpcCA9IC0xOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5zbG9wZSA9PT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgeWZsaXAgKj0gLTE7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLnNsb3BlID09PSAtSW5maW5pdHkpIHsKICAgICAgICAgICAgeWZsaXAgKj0gLTE7CiAgICAgICAgfQogICAgICAgIGxldCBhbmdsZU9mZnNldCA9IDA7CiAgICAgICAgbGV0IG9wcG9zaXRlRWRnZSA9IGNvbnRleHQuZ2V0RWRnZSh0aGlzLmVuZE5vZGVpZCwgdGhpcy5zdGFydE5vZGVpZCk7CiAgICAgICAgaWYgKHRoaXMuaXNEaXJlY3Rpb25hbCgpICYmIG9wcG9zaXRlRWRnZSkgewogICAgICAgICAgICBhbmdsZU9mZnNldCA9IDIgKiBNYXRoLlBJIC8gMTY7CiAgICAgICAgfQogICAgICAgIHRoaXMueHN0YXJ0ID0gc3RhcnQxLnggKyB4ZmxpcCAqIChNYXRoLmNvcyhhbmdsZU9mZnNldCArIE1hdGguYXRhbih0aGlzLnNsb3BlKSkgKiBzdGFydDEucik7CiAgICAgICAgdGhpcy55c3RhcnQgPSBzdGFydDEueSArIHlmbGlwICogKE1hdGguc2luKGFuZ2xlT2Zmc2V0ICsgTWF0aC5hdGFuKHRoaXMuc2xvcGUpKSAqIHN0YXJ0MS5yKTsKICAgICAgICB0aGlzLnhlbmQgPSBlbmQueCAtIHhmbGlwICogKE1hdGguY29zKC1hbmdsZU9mZnNldCArIE1hdGguYXRhbih0aGlzLnNsb3BlKSkgKiBlbmQucik7CiAgICAgICAgdGhpcy55ZW5kID0gZW5kLnkgLSB5ZmxpcCAqIChNYXRoLnNpbigtYW5nbGVPZmZzZXQgKyBNYXRoLmF0YW4odGhpcy5zbG9wZSkpICogZW5kLnIpOwogICAgICAgIGlmIChpc05hTihwYXJzZUZsb2F0KHRoaXMudGV4dCkpKSB7CiAgICAgICAgICAgIHRoaXMuc2V0V2VpZ2h0KDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gcGFyc2VGbG9hdCh0aGlzLnRleHQpOwogICAgICAgIH0KICAgIH07CiAgICBnZXRTZWxmTG9vcEJlemllckNvbnRyb2xQb2ludHNYID0gKCk9PnsKICAgICAgICBsZXQgY29udGV4dCA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpOwogICAgICAgIGxldCBub2RlID0gY29udGV4dC5nZXROb2RlQnlJZCh0aGlzLnN0YXJ0Tm9kZWlkKTsKICAgICAgICBsZXQgeCA9IG5vZGUueCArIG5vZGUuciAvIE1hdGguc3FydCgyKTsKICAgICAgICByZXR1cm4gWwogICAgICAgICAgICB4LAogICAgICAgICAgICB4ICsgbm9kZS5yICogMiwKICAgICAgICAgICAgeCwKICAgICAgICAgICAgeAogICAgICAgIF07CiAgICB9OwogICAgZ2V0U2VsZkxvb3BCZXppZXJDb250cm9sUG9pbnRzWSA9ICgpPT57CiAgICAgICAgbGV0IGNvbnRleHQgPSBHcmFwaC5nZXRDb250ZXh0KHRoaXMuY29udGV4dGlkKTsKICAgICAgICBsZXQgbm9kZSA9IGNvbnRleHQuZ2V0Tm9kZUJ5SWQodGhpcy5zdGFydE5vZGVpZCk7CiAgICAgICAgbGV0IHkgPSBub2RlLnkgLSBub2RlLnIgLyBNYXRoLnNxcnQoMik7CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgeSwKICAgICAgICAgICAgeSwKICAgICAgICAgICAgeSAtIG5vZGUuciAqIDIsCiAgICAgICAgICAgIHkKICAgICAgICBdOwogICAgfTsKICAgIGRyYXcgPSAoKT0+ewogICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlcygpOwogICAgICAgIGxldCBjb250ZXh0ID0gR3JhcGguZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRpZCk7CiAgICAgICAgbGV0IHRlbXBfY29sb3IgPSBjb250ZXh0LmN0eC5zdHJva2VTdHlsZTsKICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkgewogICAgICAgICAgICBjb250ZXh0LmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuYWx0Q29sb3I7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29udGV4dC5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5zdGFydE5vZGVpZCA9PSB0aGlzLmVuZE5vZGVpZCkgewogICAgICAgICAgICBsZXQgeHMgPSB0aGlzLmdldFNlbGZMb29wQmV6aWVyQ29udHJvbFBvaW50c1goKTsKICAgICAgICAgICAgbGV0IHlzID0gdGhpcy5nZXRTZWxmTG9vcEJlemllckNvbnRyb2xQb2ludHNZKCk7CiAgICAgICAgICAgIGNvbnRleHQuZHJhd0xvb3AoeHMsIHlzLCB0aGlzLnRleHQsIHRoaXMuZGlyZWN0aW9uYWwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnRleHQuZHJhd0Fycm93KHRoaXMueHN0YXJ0LCB0aGlzLnlzdGFydCwgdGhpcy54ZW5kLCB0aGlzLnllbmQsIHRoaXMudGV4dCwgdGhpcy5kaXJlY3Rpb25hbCk7CiAgICAgICAgfQogICAgICAgIGNvbnRleHQuY3R4LnN0cm9rZVN0eWxlID0gdGVtcF9jb2xvcjsKICAgIH07CiAgICBfcG9pbnREaXN0YW5jZSA9ICh4LCB5KT0+ewogICAgICAgIGZ1bmN0aW9uIHNxcih4MSkgewogICAgICAgICAgICByZXR1cm4geDEgKiB4MTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGlzdDIodiwgdykgewogICAgICAgICAgICByZXR1cm4gc3FyKHYueCAtIHcueCkgKyBzcXIodi55IC0gdy55KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGlzdFRvU2VnbWVudFNxdWFyZWQocCwgdiwgdykgewogICAgICAgICAgICB2YXIgbDIgPSBkaXN0Mih2LCB3KTsKICAgICAgICAgICAgaWYgKGwyID09IDApIHJldHVybiBkaXN0MihwLCB2KTsKICAgICAgICAgICAgdmFyIHQgPSAoKHAueCAtIHYueCkgKiAody54IC0gdi54KSArIChwLnkgLSB2LnkpICogKHcueSAtIHYueSkpIC8gbDI7CiAgICAgICAgICAgIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7CiAgICAgICAgICAgIHJldHVybiBkaXN0MihwLCB7CiAgICAgICAgICAgICAgICB4OiB2LnggKyB0ICogKHcueCAtIHYueCksCiAgICAgICAgICAgICAgICB5OiB2LnkgKyB0ICogKHcueSAtIHYueSkKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRpc3RUb1NlZ21lbnQocCwgdiwgdykgewogICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGRpc3RUb1NlZ21lbnRTcXVhcmVkKHAsIHYsIHcpKTsKICAgICAgICB9CiAgICAgICAgbGV0IHAgPSB7CiAgICAgICAgICAgIHg6IHgsCiAgICAgICAgICAgIHk6IHkKICAgICAgICB9OwogICAgICAgIGxldCB2ID0gewogICAgICAgICAgICB4OiB0aGlzLnhzdGFydCwKICAgICAgICAgICAgeTogdGhpcy55c3RhcnQKICAgICAgICB9OwogICAgICAgIGxldCB3ID0gewogICAgICAgICAgICB4OiB0aGlzLnhlbmQsCiAgICAgICAgICAgIHk6IHRoaXMueWVuZAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIGRpc3RUb1NlZ21lbnQocCwgdiwgdyk7CiAgICB9OwogICAgaXNPblNlbGZMb29wID0gKHgsIHkpPT57CiAgICAgICAgZnVuY3Rpb24gaXNCZXR3ZWVuKHgxLCBhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBhIDw9IHgxICYmIHgxIDw9IGIgfHwgYiA8PSB4MSAmJiB4MSA8PSBhOwogICAgICAgIH0KICAgICAgICBsZXQgeHMgPSB0aGlzLmdldFNlbGZMb29wQmV6aWVyQ29udHJvbFBvaW50c1goKTsKICAgICAgICBsZXQgeXMgPSB0aGlzLmdldFNlbGZMb29wQmV6aWVyQ29udHJvbFBvaW50c1koKTsKICAgICAgICBsZXQgbWlkUG9pbnRYID0gR3JhcGguY2FsY3VsYXRlTWlkUG9pbnRPZkJlemllckN1cnZlKHhzKTsKICAgICAgICBsZXQgbWlkUG9pbnRZID0gR3JhcGguY2FsY3VsYXRlTWlkUG9pbnRPZkJlemllckN1cnZlKHlzKTsKICAgICAgICByZXR1cm4gaXNCZXR3ZWVuKHgsIHhzWzBdLCBtaWRQb2ludFgpICYmIGlzQmV0d2Vlbih5LCB5c1swXSwgbWlkUG9pbnRZKTsKICAgIH07CiAgICBpbnNpZGUgPSAoeCwgeSwgeW9mZnNldCwgeG9mZnNldCwgc2Vuc2l0aXZpdHkgPSAzKT0+ewogICAgICAgIGlmICgheW9mZnNldCkgewogICAgICAgICAgICB5b2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKCF4b2Zmc2V0KSB7CiAgICAgICAgICAgIHhvZmZzZXQgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5zdGFydE5vZGVpZCA9PSB0aGlzLmVuZE5vZGVpZCkgewogICAgICAgICAgICBpZiAodGhpcy5pc09uU2VsZkxvb3AoeCArIHhvZmZzZXQsIHkgKyB5b2Zmc2V0KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodGhpcy5fcG9pbnREaXN0YW5jZSh4ICsgeG9mZnNldCwgeSArIHlvZmZzZXQpIDwgc2Vuc2l0aXZpdHkgKyAxKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Owp9CkdyYXBoLl9lZGdlID0gZnVuY3Rpb24oY29udGV4dGlkMSwgc3RhcnROb2RlaWQxLCBlbmROb2RlaWQxLCBjb2xvcjEgPSAiIzAwMCIsIHRleHQxID0gIiIsIGRpcmVjdGlvbmFsMSA9IGZhbHNlKSB7CiAgICByZXR1cm4gbmV3IEVkZ2UoY29udGV4dGlkMSwgc3RhcnROb2RlaWQxLCBlbmROb2RlaWQxLCBjb2xvcjEsIHRleHQxLCBkaXJlY3Rpb25hbDEpOwp9OwpHcmFwaC5fbm9kZSA9IChjb250ZXh0aWQxLCB4LCB5LCByLCB0ZXh0MSA9ICIiLCBoYXNoMyA9ICIiKT0+ewogICAgcmV0dXJuIG5ldyBOb2RlMihjb250ZXh0aWQxLCB4LCB5LCByLCB0ZXh0MSwgaGFzaDMpOwp9OwpjbGFzcyBOb2RlMiB7CiAgICB0eXBlID0gIm5vZGUiOwogICAgY2hpbGRyZW4gPSBbXTsKICAgIGVkZ2VzID0gewogICAgfTsKICAgIHJvb3QgPSB0cnVlOwogICAgYWN0aXZlID0gZmFsc2U7CiAgICB2YWx1ZSA9IG51bGw7CiAgICBmdW5jID0gbnVsbDsKICAgIGFyZ3MgPSBbXTsKICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpOwogICAgaW1hZ2UgPSBudWxsOwogICAgaGFzaCA9ICIiOwogICAgY29uc3RydWN0b3IoY29udGV4dGlkMSwgeCwgeSwgciwgdGV4dDEgPSAiIiwgaGFzaDMgPSAiIil7CiAgICAgICAgdGhpcy5jb250ZXh0aWQgPSBjb250ZXh0aWQxOwogICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgdGhpcy55ID0geTsKICAgICAgICB0aGlzLnIgPSByOwogICAgICAgIHRoaXMuaWQgPSBOdW1iZXIodGhpcy50aW1lICsgT2JqZWN0LmtleXMoR3JhcGguZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRpZCkub2JqcykubGVuZ3RoICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTk5OSkpOwogICAgICAgIHRoaXMuY29sb3IgPSAicmdiKDAsMCwwKSI7CiAgICAgICAgdGhpcy50ZXh0X2NvbG9yID0gInJnYigwLDAsMCkiOwogICAgICAgIHRoaXMuYWN0aXZlQ29sb3IgPSAicmdiKDI1NSwwLDApIjsKICAgICAgICB0aGlzLnRleHQgPSB0ZXh0MTsKICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIGNvbnN0IGNvbnRleHQgPSBHcmFwaC5nZXRDb250ZXh0KHRoaXMuY29udGV4dGlkKTsKICAgICAgICB0aGlzLmhhc2ggPSBoYXNoMzsKICAgICAgICBjb250ZXh0Lm9ianNbdGhpcy5pZF0gPSB0aGlzOwogICAgICAgIHRoaXMuYnVpbGQoKTsKICAgICAgICBpZiAodGhpcy50ZXh0IGluIEdyYXBoLmZ1bmN0aW9ucykgewogICAgICAgICAgICB0aGlzLmZ1bmMgPSBHcmFwaC5mdW5jdGlvbnNbdGhpcy50ZXh0XTsKICAgICAgICB9CiAgICB9CiAgICBkZWxldGUgPSAoKT0+ewogICAgICAgIGxldCBjb250ZXh0MSA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpOwogICAgICAgIGZvciAobGV0IGVkZ2Ugb2YgT2JqZWN0LnZhbHVlcyhjb250ZXh0MS5lZGdlcykpewogICAgICAgICAgICBpZiAoZWRnZS5zdGFydE5vZGVpZCA9PT0gdGhpcy5pZCB8fCBlZGdlLmVuZE5vZGVpZCA9PT0gdGhpcy5pZCkgewogICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRleHQxLmVkZ2VzW2VkZ2UuaWRdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnRleHQxLmFjdGl2ZSA9IG51bGw7CiAgICAgICAgbGV0IHRlbXBfaWQgPSB0aGlzLmlkOwogICAgICAgIGRlbGV0ZSBjb250ZXh0MS5vYmpzW3RoaXMuaWRdOwogICAgICAgIGZvciAobGV0IG4gb2YgT2JqZWN0LnZhbHVlcyhjb250ZXh0MS5vYmpzKSl7CiAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IG4uY2hpbGRyZW4uaW5kZXhPZih0ZW1wX2lkKTsKICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9PSAtMSkgewogICAgICAgICAgICAgICAgbi5jaGlsZHJlbi5zcGxpY2UocG9zaXRpb24sIDEpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIGdldEVkZ2VzID0gKCk9PnsKICAgICAgICByZXR1cm4gdGhpcy5lZGdlczsKICAgIH07CiAgICBzZXRDb2xvciA9IChuZXdDb2xvcik9PnsKICAgICAgICB0aGlzLmNvbG9yID0gbmV3Q29sb3I7CiAgICB9OwogICAgc2V0QWN0aXZlQ29sb3IgPSAobmV3Q29sb3IpPT57CiAgICAgICAgdGhpcy5hY3RpdmVDb2xvciA9IG5ld0NvbG9yOwogICAgfTsKICAgIHNldFRleHQgPSAodGV4dDIpPT57CiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDI7CiAgICB9OwogICAgdXBkYXRlID0gKCk9PnsKICAgICAgICB0aGlzLmJ1aWxkKCk7CiAgICB9OwogICAgc2V0SW1hZ2UgPSBhc3luYyAodXJsKT0+ewogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUltYWdlKHVybDEpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpPT57CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpbWcpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGltZy5vbmVycm9yID0gKCk9PnsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiaW1hZ2UgbG9hZCBlcnJvciIpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdCgpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGltZy5zcmMgPSB1cmwxOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdGhpcy5pbWFnZSA9IGF3YWl0IGNyZWF0ZUltYWdlKHVybCk7CiAgICB9OwogICAgYnVpbGQgPSAoKT0+ewogICAgICAgIGxldCBjb250ZXh0MSA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpOwogICAgICAgIGlmICh0aGlzLmFjdGl2ZSkgewogICAgICAgICAgICBjb250ZXh0MS5jdHgubGluZVdpZHRoID0gMTA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29udGV4dDEuY3R4LmxpbmV3aWR0aCA9IDE7CiAgICAgICAgfQogICAgICAgIGNvbnRleHQxLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7CiAgICAgICAgaWYgKGNvbnRleHQxLmFjdGl2ZSA9PSB0aGlzKSB7CiAgICAgICAgICAgIGNvbnRleHQxLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuYWN0aXZlQ29sb3I7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmZ1bmMgIT09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy50ZXh0X2NvbG9yID0gIiNGRjAwMDAiOwogICAgICAgIH0KICAgICAgICBjb25zdCBmb3JjdXNSID0gdGhpcy5yICogMS40OwogICAgICAgIGNvbnRleHQxLmN0eC50ZXh0QWxpZ24gPSAiY2VudGVyIjsKICAgICAgICBjb250ZXh0MS5jdHguZm9udCA9ICIxNXB4IEFyaWFsIjsKICAgICAgICBjb250ZXh0MS5jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgaWYgKGNvbnRleHQxLmFjdGl2ZSA9PSB0aGlzKSB7CiAgICAgICAgICAgIGNvbnRleHQxLmN0eC5hcmModGhpcy54LCB0aGlzLnksIGZvcmN1c1IsIDAsIDIgKiBNYXRoLlBJKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb250ZXh0MS5jdHguYXJjKHRoaXMueCwgdGhpcy55LCB0aGlzLnIsIDAsIDIgKiBNYXRoLlBJKTsKICAgICAgICB9CiAgICAgICAgY29udGV4dDEuY3R4LmNsb3NlUGF0aCgpOwogICAgICAgIGNvbnRleHQxLmN0eC5zdHJva2UoKTsKICAgICAgICBpZiAodGhpcy5pbWFnZSkgewogICAgICAgICAgICBjb250ZXh0MS5jdHguc2F2ZSgpOwogICAgICAgICAgICBjb250ZXh0MS5jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIGlmIChjb250ZXh0MS5hY3RpdmUgPT0gdGhpcykgewogICAgICAgICAgICAgICAgY29udGV4dDEuY3R4LmFyYyh0aGlzLngsIHRoaXMueSwgZm9yY3VzUiwgMCwgTWF0aC5QSSAqIDIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29udGV4dDEuY3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5yLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGV4dDEuY3R4LmNsb3NlUGF0aCgpOwogICAgICAgICAgICBjb250ZXh0MS5jdHguY2xpcCgpOwogICAgICAgICAgICBpZiAoY29udGV4dDEuYWN0aXZlID09IHRoaXMpIHsKICAgICAgICAgICAgICAgIGNvbnRleHQxLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgdGhpcy54IC0gZm9yY3VzUiwgdGhpcy55IC0gZm9yY3VzUiwgZm9yY3VzUiAqIDIsIGZvcmN1c1IgKiAyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnRleHQxLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgdGhpcy54IC0gdGhpcy5yLCB0aGlzLnkgLSB0aGlzLnIsIHRoaXMuciAqIDIsIHRoaXMuciAqIDIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRleHQxLmN0eC5iZWdpblBhdGgoKTsKICAgICAgICAgICAgaWYgKGNvbnRleHQxLmFjdGl2ZSA9PSB0aGlzKSB7CiAgICAgICAgICAgICAgICBjb250ZXh0MS5jdHguYXJjKHRoaXMueCwgdGhpcy55LCBmb3JjdXNSLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb250ZXh0MS5jdHguYXJjKHRoaXMueCwgdGhpcy55LCB0aGlzLnIsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250ZXh0MS5jdHguY2xpcCgpOwogICAgICAgICAgICBjb250ZXh0MS5jdHguY2xvc2VQYXRoKCk7CiAgICAgICAgICAgIGNvbnRleHQxLmN0eC5yZXN0b3JlKCk7CiAgICAgICAgfQogICAgICAgIGxldCB0ZW1wID0gY29udGV4dDEuY3R4LmZpbGxTdHlsZTsKICAgICAgICBjb250ZXh0MS5jdHguZmlsbFN0eWxlID0gdGhpcy50ZXh0X2NvbG9yOwogICAgICAgIGNvbnRleHQxLmN0eC5maWxsVGV4dCh0aGlzLnRleHQsIHRoaXMueCwgdGhpcy55KTsKICAgICAgICBjb250ZXh0MS5jdHguZmlsbFN0eWxlID0gdGVtcDsKICAgIH07CiAgICBjb25uZWN0ID0gKG4sIHRleHQyID0gIiIsIGRpcmVjdGlvbmFsMSA9IGZhbHNlKT0+ewogICAgICAgIGxldCBjb250ZXh0MSA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpOwogICAgICAgIGlmIChuLnR5cGUgIT09ICJub2RlIikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuLmlkKTsKICAgICAgICBpZiAoZGlyZWN0aW9uYWwxID09PSBmYWxzZSkgewogICAgICAgICAgICBuLmNoaWxkcmVuLnB1c2godGhpcy5pZCk7CiAgICAgICAgfQogICAgICAgIGxldCBlZGdlID0gY29udGV4dDEuZWRnZSh0aGlzLmlkLCBuLmlkLCAiIzAwMCIsIHRleHQyLCBkaXJlY3Rpb25hbDEpOwogICAgICAgIHRoaXMuZWRnZXNbZWRnZS5pZF07CiAgICAgICAgY29udGV4dDEuZWRnZXNbZWRnZS5pZF0gPSBlZGdlOwogICAgICAgIG4ua2lsbF9yb290KCk7CiAgICAgICAgY29udGV4dDEuZHJhd0VkZ2VzKCk7CiAgICAgICAgcmV0dXJuIGVkZ2U7CiAgICB9OwogICAgYmlEaXJlY3Rpb25hbCA9IChuLCB0ZXh0MiA9ICIiKT0+ewogICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QobiwgdGV4dDIpOwogICAgfTsKICAgIGRpcmVjdGlvbmFsID0gKG4sIHRleHQyID0gIiIpPT57CiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdChuLCB0ZXh0MiwgdHJ1ZSk7CiAgICB9OwogICAga2lsbF9yb290ID0gKCk9PnsKICAgICAgICB0aGlzLnJvb3QgPSBmYWxzZTsKICAgIH07CiAgICBhcnJvdyA9ICh4MiwgeTIsIHRleHQyKT0+ewogICAgICAgIGxldCBjb250ZXh0MSA9IEdyYXBoLmdldENvbnRleHQodGhpcy5jb250ZXh0aWQpOwogICAgICAgIGxldCB4ZmxpcCA9IDE7CiAgICAgICAgbGV0IHlmbGlwID0gMTsKICAgICAgICBpZiAodGhpcy54ID49IHgyKSB7CiAgICAgICAgICAgIHlmbGlwID0gLTE7CiAgICAgICAgICAgIHhmbGlwID0gLTE7CiAgICAgICAgfQogICAgICAgIGxldCBzbG9wZSA9ICh5MiAtIHRoaXMueSkgLyAoeDIgLSB0aGlzLngpOwogICAgICAgIGlmIChzbG9wZSA9PT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgeWZsaXAgKj0gLTE7CiAgICAgICAgfQogICAgICAgIGlmIChzbG9wZSA9PT0gLUluZmluaXR5KSB7CiAgICAgICAgICAgIHlmbGlwICo9IC0xOwogICAgICAgIH0KICAgICAgICBsZXQgeHN0YXJ0ID0gdGhpcy54ICsgeGZsaXAgKiBNYXRoLmNvcyhNYXRoLmF0YW4oc2xvcGUpKSAqIHRoaXMucjsKICAgICAgICBsZXQgeXN0YXJ0ID0gdGhpcy55ICsgeWZsaXAgKiBNYXRoLnNpbihNYXRoLmF0YW4oc2xvcGUpKSAqIHRoaXMucjsKICAgICAgICBjb250ZXh0MS5kcmF3QXJyb3coeHN0YXJ0LCB5c3RhcnQsIHgyLCB5MiwgdGV4dDIgPSB0ZXh0Mik7CiAgICB9OwogICAgaW5zaWRlID0gKHgxLCB5MSwgeW9mZnNldCwgeG9mZnNldCk9PnsKICAgICAgICBmdW5jdGlvbiBkaXN0YW5jZSh4MTEsIHgyLCB5MTEsIHkyKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coeDIgLSB4MTEsIDIpICsgTWF0aC5wb3coeTIgLSB5MTEsIDIpKTsKICAgICAgICB9CiAgICAgICAgaWYgKHlvZmZzZXQgPT0gbnVsbCkgewogICAgICAgICAgICB5b2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKHhvZmZzZXQgPT0gbnVsbCkgewogICAgICAgICAgICB4b2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKGRpc3RhbmNlKHRoaXMueCArIHhvZmZzZXQsIHgxLCB0aGlzLnksIHkxICsgeW9mZnNldCkgPCB0aGlzLnIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH07Cn0KR3JhcGguZnVuY3Rpb25zID0gewp9Owpjb25zdCBIRVhfQ0hBUlMxID0gIjAxMjM0NTY3ODlhYmNkZWYiLnNwbGl0KCIiKTsKY29uc3QgRVhUUkExID0gWwogICAgLTIxNDc0ODM2NDgsCiAgICA4Mzg4NjA4LAogICAgMzI3NjgsCiAgICAxMjgKXTsKY29uc3QgU0hJRlQxID0gWwogICAgMjQsCiAgICAxNiwKICAgIDgsCiAgICAwCl07CmNvbnN0IGJsb2NrczEgPSBbXTsKY2xhc3MgU2hhMSB7CiAgICAjYmxvY2tzOwogICAgI2Jsb2NrOwogICAgI3N0YXJ0OwogICAgI2J5dGVzOwogICAgI2hCeXRlczsKICAgICNmaW5hbGl6ZWQ7CiAgICAjaGFzaGVkOwogICAgI2gwPTE3MzI1ODQxOTM7CiAgICAjaDE9NDAyMzIzMzQxNzsKICAgICNoMj0yNTYyMzgzMTAyOwogICAgI2gzPTI3MTczMzg3ODsKICAgICNoND0zMjg1Mzc3NTIwOwogICAgI2xhc3RCeXRlSW5kZXg9MDsKICAgIGNvbnN0cnVjdG9yKHNoYXJlZE1lbW9yeTMgPSBmYWxzZSl7CiAgICAgICAgdGhpcy5pbml0KHNoYXJlZE1lbW9yeTMpOwogICAgfQogICAgaW5pdChzaGFyZWRNZW1vcnkpIHsKICAgICAgICBpZiAoc2hhcmVkTWVtb3J5KSB7CiAgICAgICAgICAgIGJsb2NrczFbMF0gPSBibG9ja3MxWzE2XSA9IGJsb2NrczFbMV0gPSBibG9ja3MxWzJdID0gYmxvY2tzMVszXSA9IGJsb2NrczFbNF0gPSBibG9ja3MxWzVdID0gYmxvY2tzMVs2XSA9IGJsb2NrczFbN10gPSBibG9ja3MxWzhdID0gYmxvY2tzMVs5XSA9IGJsb2NrczFbMTBdID0gYmxvY2tzMVsxMV0gPSBibG9ja3MxWzEyXSA9IGJsb2NrczFbMTNdID0gYmxvY2tzMVsxNF0gPSBibG9ja3MxWzE1XSA9IDA7CiAgICAgICAgICAgIHRoaXMuI2Jsb2NrcyA9IGJsb2NrczE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4jYmxvY2tzID0gWwogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgdGhpcy4jaDAgPSAxNzMyNTg0MTkzOwogICAgICAgIHRoaXMuI2gxID0gNDAyMzIzMzQxNzsKICAgICAgICB0aGlzLiNoMiA9IDI1NjIzODMxMDI7CiAgICAgICAgdGhpcy4jaDMgPSAyNzE3MzM4Nzg7CiAgICAgICAgdGhpcy4jaDQgPSAzMjg1Mzc3NTIwOwogICAgICAgIHRoaXMuI2Jsb2NrID0gdGhpcy4jc3RhcnQgPSB0aGlzLiNieXRlcyA9IHRoaXMuI2hCeXRlcyA9IDA7CiAgICAgICAgdGhpcy4jZmluYWxpemVkID0gdGhpcy4jaGFzaGVkID0gZmFsc2U7CiAgICB9CiAgICB1cGRhdGUobWVzc2FnZSkgewogICAgICAgIGlmICh0aGlzLiNmaW5hbGl6ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgICAgIGxldCBtc2c7CiAgICAgICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgICAgICAgICBtc2cgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtc2cgPSBtZXNzYWdlOwogICAgICAgIH0KICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IG1zZy5sZW5ndGg7CiAgICAgICAgY29uc3QgYmxvY2tzMiA9IHRoaXMuI2Jsb2NrczsKICAgICAgICB3aGlsZShpbmRleCA8IGxlbmd0aCl7CiAgICAgICAgICAgIGxldCBpMTsKICAgICAgICAgICAgaWYgKHRoaXMuI2hhc2hlZCkgewogICAgICAgICAgICAgICAgdGhpcy4jaGFzaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICBibG9ja3MyWzBdID0gdGhpcy4jYmxvY2s7CiAgICAgICAgICAgICAgICBibG9ja3MyWzE2XSA9IGJsb2NrczJbMV0gPSBibG9ja3MyWzJdID0gYmxvY2tzMlszXSA9IGJsb2NrczJbNF0gPSBibG9ja3MyWzVdID0gYmxvY2tzMls2XSA9IGJsb2NrczJbN10gPSBibG9ja3MyWzhdID0gYmxvY2tzMls5XSA9IGJsb2NrczJbMTBdID0gYmxvY2tzMlsxMV0gPSBibG9ja3MyWzEyXSA9IGJsb2NrczJbMTNdID0gYmxvY2tzMlsxNF0gPSBibG9ja3MyWzE1XSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBmb3IoaTEgPSB0aGlzLiNzdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaTEgPCA2NDsgKytpbmRleCl7CiAgICAgICAgICAgICAgICAgICAgYmxvY2tzMltpMSA+PiAyXSB8PSBtc2dbaW5kZXhdIDw8IFNISUZUMVsoaTErKykgJiAzXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvcihpMSA9IHRoaXMuI3N0YXJ0OyBpbmRleCA8IGxlbmd0aCAmJiBpMSA8IDY0OyArK2luZGV4KXsKICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IG1zZy5jaGFyQ29kZUF0KGluZGV4KTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8IDEyOCkgewogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MyW2kxID4+IDJdIHw9IGNvZGUgPDwgU0hJRlQxWyhpMSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDIwNDgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMltpMSA+PiAyXSB8PSAoMTkyIHwgY29kZSA+PiA2KSA8PCBTSElGVDFbKGkxKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczJbaTEgPj4gMl0gfD0gKDEyOCB8IGNvZGUgJiA2MykgPDwgU0hJRlQxWyhpMSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDU1Mjk2IHx8IGNvZGUgPj0gNTczNDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMltpMSA+PiAyXSB8PSAoMjI0IHwgY29kZSA+PiAxMikgPDwgU0hJRlQxWyhpMSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MyW2kxID4+IDJdIHw9ICgxMjggfCBjb2RlID4+IDYgJiA2MykgPDwgU0hJRlQxWyhpMSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgICAgICBibG9ja3MyW2kxID4+IDJdIHw9ICgxMjggfCBjb2RlICYgNjMpIDw8IFNISUZUMVsoaTErKykgJiAzXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gNjU1MzYgKyAoKGNvZGUgJiAxMDIzKSA8PCAxMCB8IG1zZy5jaGFyQ29kZUF0KCsraW5kZXgpICYgMTAyMyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczJbaTEgPj4gMl0gfD0gKDI0MCB8IGNvZGUgPj4gMTgpIDw8IFNISUZUMVsoaTErKykgJiAzXTsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzMltpMSA+PiAyXSB8PSAoMTI4IHwgY29kZSA+PiAxMiAmIDYzKSA8PCBTSElGVDFbKGkxKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczJbaTEgPj4gMl0gfD0gKDEyOCB8IGNvZGUgPj4gNiAmIDYzKSA8PCBTSElGVDFbKGkxKyspICYgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczJbaTEgPj4gMl0gfD0gKDEyOCB8IGNvZGUgJiA2MykgPDwgU0hJRlQxWyhpMSsrKSAmIDNdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiNsYXN0Qnl0ZUluZGV4ID0gaTE7CiAgICAgICAgICAgIHRoaXMuI2J5dGVzICs9IGkxIC0gdGhpcy4jc3RhcnQ7CiAgICAgICAgICAgIGlmIChpMSA+PSA2NCkgewogICAgICAgICAgICAgICAgdGhpcy4jYmxvY2sgPSBibG9ja3MyWzE2XTsKICAgICAgICAgICAgICAgIHRoaXMuI3N0YXJ0ID0gaTEgLSA2NDsKICAgICAgICAgICAgICAgIHRoaXMuaGFzaCgpOwogICAgICAgICAgICAgICAgdGhpcy4jaGFzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuI3N0YXJ0ID0gaTE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuI2J5dGVzID4gNDI5NDk2NzI5NSkgewogICAgICAgICAgICB0aGlzLiNoQnl0ZXMgKz0gdGhpcy4jYnl0ZXMgLyA0Mjk0OTY3Mjk2ID4+PiAwOwogICAgICAgICAgICB0aGlzLiNieXRlcyA9IHRoaXMuI2J5dGVzID4+PiAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIGZpbmFsaXplKCkgewogICAgICAgIGlmICh0aGlzLiNmaW5hbGl6ZWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLiNmaW5hbGl6ZWQgPSB0cnVlOwogICAgICAgIGNvbnN0IGJsb2NrczIgPSB0aGlzLiNibG9ja3M7CiAgICAgICAgY29uc3QgaTEgPSB0aGlzLiNsYXN0Qnl0ZUluZGV4OwogICAgICAgIGJsb2NrczJbMTZdID0gdGhpcy4jYmxvY2s7CiAgICAgICAgYmxvY2tzMltpMSA+PiAyXSB8PSBFWFRSQTFbaTEgJiAzXTsKICAgICAgICB0aGlzLiNibG9jayA9IGJsb2NrczJbMTZdOwogICAgICAgIGlmIChpMSA+PSA1NikgewogICAgICAgICAgICBpZiAoIXRoaXMuI2hhc2hlZCkgewogICAgICAgICAgICAgICAgdGhpcy5oYXNoKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYmxvY2tzMlswXSA9IHRoaXMuI2Jsb2NrOwogICAgICAgICAgICBibG9ja3MyWzE2XSA9IGJsb2NrczJbMV0gPSBibG9ja3MyWzJdID0gYmxvY2tzMlszXSA9IGJsb2NrczJbNF0gPSBibG9ja3MyWzVdID0gYmxvY2tzMls2XSA9IGJsb2NrczJbN10gPSBibG9ja3MyWzhdID0gYmxvY2tzMls5XSA9IGJsb2NrczJbMTBdID0gYmxvY2tzMlsxMV0gPSBibG9ja3MyWzEyXSA9IGJsb2NrczJbMTNdID0gYmxvY2tzMlsxNF0gPSBibG9ja3MyWzE1XSA9IDA7CiAgICAgICAgfQogICAgICAgIGJsb2NrczJbMTRdID0gdGhpcy4jaEJ5dGVzIDw8IDMgfCB0aGlzLiNieXRlcyA+Pj4gMjk7CiAgICAgICAgYmxvY2tzMlsxNV0gPSB0aGlzLiNieXRlcyA8PCAzOwogICAgICAgIHRoaXMuaGFzaCgpOwogICAgfQogICAgaGFzaCgpIHsKICAgICAgICBsZXQgYSA9IHRoaXMuI2gwOwogICAgICAgIGxldCBiID0gdGhpcy4jaDE7CiAgICAgICAgbGV0IGMgPSB0aGlzLiNoMjsKICAgICAgICBsZXQgZCA9IHRoaXMuI2gzOwogICAgICAgIGxldCBlID0gdGhpcy4jaDQ7CiAgICAgICAgbGV0IGY7CiAgICAgICAgbGV0IGo7CiAgICAgICAgbGV0IHQ7CiAgICAgICAgY29uc3QgYmxvY2tzMiA9IHRoaXMuI2Jsb2NrczsKICAgICAgICBmb3IoaiA9IDE2OyBqIDwgODA7ICsrail7CiAgICAgICAgICAgIHQgPSBibG9ja3MyW2ogLSAzXSBeIGJsb2NrczJbaiAtIDhdIF4gYmxvY2tzMltqIC0gMTRdIF4gYmxvY2tzMltqIC0gMTZdOwogICAgICAgICAgICBibG9ja3MyW2pdID0gdCA8PCAxIHwgdCA+Pj4gMzE7CiAgICAgICAgfQogICAgICAgIGZvcihqID0gMDsgaiA8IDIwOyBqICs9IDUpewogICAgICAgICAgICBmID0gYiAmIGMgfCB+YiAmIGQ7CiAgICAgICAgICAgIHQgPSBhIDw8IDUgfCBhID4+PiAyNzsKICAgICAgICAgICAgZSA9IHQgKyBmICsgZSArIDE1MTg1MDAyNDkgKyBibG9ja3MyW2pdID4+PiAwOwogICAgICAgICAgICBiID0gYiA8PCAzMCB8IGIgPj4+IDI7CiAgICAgICAgICAgIGYgPSBhICYgYiB8IH5hICYgYzsKICAgICAgICAgICAgdCA9IGUgPDwgNSB8IGUgPj4+IDI3OwogICAgICAgICAgICBkID0gdCArIGYgKyBkICsgMTUxODUwMDI0OSArIGJsb2NrczJbaiArIDFdID4+PiAwOwogICAgICAgICAgICBhID0gYSA8PCAzMCB8IGEgPj4+IDI7CiAgICAgICAgICAgIGYgPSBlICYgYSB8IH5lICYgYjsKICAgICAgICAgICAgdCA9IGQgPDwgNSB8IGQgPj4+IDI3OwogICAgICAgICAgICBjID0gdCArIGYgKyBjICsgMTUxODUwMDI0OSArIGJsb2NrczJbaiArIDJdID4+PiAwOwogICAgICAgICAgICBlID0gZSA8PCAzMCB8IGUgPj4+IDI7CiAgICAgICAgICAgIGYgPSBkICYgZSB8IH5kICYgYTsKICAgICAgICAgICAgdCA9IGMgPDwgNSB8IGMgPj4+IDI3OwogICAgICAgICAgICBiID0gdCArIGYgKyBiICsgMTUxODUwMDI0OSArIGJsb2NrczJbaiArIDNdID4+PiAwOwogICAgICAgICAgICBkID0gZCA8PCAzMCB8IGQgPj4+IDI7CiAgICAgICAgICAgIGYgPSBjICYgZCB8IH5jICYgZTsKICAgICAgICAgICAgdCA9IGIgPDwgNSB8IGIgPj4+IDI3OwogICAgICAgICAgICBhID0gdCArIGYgKyBhICsgMTUxODUwMDI0OSArIGJsb2NrczJbaiArIDRdID4+PiAwOwogICAgICAgICAgICBjID0gYyA8PCAzMCB8IGMgPj4+IDI7CiAgICAgICAgfQogICAgICAgIGZvcig7IGogPCA0MDsgaiArPSA1KXsKICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDsKICAgICAgICAgICAgdCA9IGEgPDwgNSB8IGEgPj4+IDI3OwogICAgICAgICAgICBlID0gdCArIGYgKyBlICsgMTg1OTc3NTM5MyArIGJsb2NrczJbal0gPj4+IDA7CiAgICAgICAgICAgIGIgPSBiIDw8IDMwIHwgYiA+Pj4gMjsKICAgICAgICAgICAgZiA9IGEgXiBiIF4gYzsKICAgICAgICAgICAgdCA9IGUgPDwgNSB8IGUgPj4+IDI3OwogICAgICAgICAgICBkID0gdCArIGYgKyBkICsgMTg1OTc3NTM5MyArIGJsb2NrczJbaiArIDFdID4+PiAwOwogICAgICAgICAgICBhID0gYSA8PCAzMCB8IGEgPj4+IDI7CiAgICAgICAgICAgIGYgPSBlIF4gYSBeIGI7CiAgICAgICAgICAgIHQgPSBkIDw8IDUgfCBkID4+PiAyNzsKICAgICAgICAgICAgYyA9IHQgKyBmICsgYyArIDE4NTk3NzUzOTMgKyBibG9ja3MyW2ogKyAyXSA+Pj4gMDsKICAgICAgICAgICAgZSA9IGUgPDwgMzAgfCBlID4+PiAyOwogICAgICAgICAgICBmID0gZCBeIGUgXiBhOwogICAgICAgICAgICB0ID0gYyA8PCA1IHwgYyA+Pj4gMjc7CiAgICAgICAgICAgIGIgPSB0ICsgZiArIGIgKyAxODU5Nzc1MzkzICsgYmxvY2tzMltqICsgM10gPj4+IDA7CiAgICAgICAgICAgIGQgPSBkIDw8IDMwIHwgZCA+Pj4gMjsKICAgICAgICAgICAgZiA9IGMgXiBkIF4gZTsKICAgICAgICAgICAgdCA9IGIgPDwgNSB8IGIgPj4+IDI3OwogICAgICAgICAgICBhID0gdCArIGYgKyBhICsgMTg1OTc3NTM5MyArIGJsb2NrczJbaiArIDRdID4+PiAwOwogICAgICAgICAgICBjID0gYyA8PCAzMCB8IGMgPj4+IDI7CiAgICAgICAgfQogICAgICAgIGZvcig7IGogPCA2MDsgaiArPSA1KXsKICAgICAgICAgICAgZiA9IGIgJiBjIHwgYiAmIGQgfCBjICYgZDsKICAgICAgICAgICAgdCA9IGEgPDwgNSB8IGEgPj4+IDI3OwogICAgICAgICAgICBlID0gdCArIGYgKyBlIC0gMTg5NDAwNzU4OCArIGJsb2NrczJbal0gPj4+IDA7CiAgICAgICAgICAgIGIgPSBiIDw8IDMwIHwgYiA+Pj4gMjsKICAgICAgICAgICAgZiA9IGEgJiBiIHwgYSAmIGMgfCBiICYgYzsKICAgICAgICAgICAgdCA9IGUgPDwgNSB8IGUgPj4+IDI3OwogICAgICAgICAgICBkID0gdCArIGYgKyBkIC0gMTg5NDAwNzU4OCArIGJsb2NrczJbaiArIDFdID4+PiAwOwogICAgICAgICAgICBhID0gYSA8PCAzMCB8IGEgPj4+IDI7CiAgICAgICAgICAgIGYgPSBlICYgYSB8IGUgJiBiIHwgYSAmIGI7CiAgICAgICAgICAgIHQgPSBkIDw8IDUgfCBkID4+PiAyNzsKICAgICAgICAgICAgYyA9IHQgKyBmICsgYyAtIDE4OTQwMDc1ODggKyBibG9ja3MyW2ogKyAyXSA+Pj4gMDsKICAgICAgICAgICAgZSA9IGUgPDwgMzAgfCBlID4+PiAyOwogICAgICAgICAgICBmID0gZCAmIGUgfCBkICYgYSB8IGUgJiBhOwogICAgICAgICAgICB0ID0gYyA8PCA1IHwgYyA+Pj4gMjc7CiAgICAgICAgICAgIGIgPSB0ICsgZiArIGIgLSAxODk0MDA3NTg4ICsgYmxvY2tzMltqICsgM10gPj4+IDA7CiAgICAgICAgICAgIGQgPSBkIDw8IDMwIHwgZCA+Pj4gMjsKICAgICAgICAgICAgZiA9IGMgJiBkIHwgYyAmIGUgfCBkICYgZTsKICAgICAgICAgICAgdCA9IGIgPDwgNSB8IGIgPj4+IDI3OwogICAgICAgICAgICBhID0gdCArIGYgKyBhIC0gMTg5NDAwNzU4OCArIGJsb2NrczJbaiArIDRdID4+PiAwOwogICAgICAgICAgICBjID0gYyA8PCAzMCB8IGMgPj4+IDI7CiAgICAgICAgfQogICAgICAgIGZvcig7IGogPCA4MDsgaiArPSA1KXsKICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDsKICAgICAgICAgICAgdCA9IGEgPDwgNSB8IGEgPj4+IDI3OwogICAgICAgICAgICBlID0gdCArIGYgKyBlIC0gODk5NDk3NTE0ICsgYmxvY2tzMltqXSA+Pj4gMDsKICAgICAgICAgICAgYiA9IGIgPDwgMzAgfCBiID4+PiAyOwogICAgICAgICAgICBmID0gYSBeIGIgXiBjOwogICAgICAgICAgICB0ID0gZSA8PCA1IHwgZSA+Pj4gMjc7CiAgICAgICAgICAgIGQgPSB0ICsgZiArIGQgLSA4OTk0OTc1MTQgKyBibG9ja3MyW2ogKyAxXSA+Pj4gMDsKICAgICAgICAgICAgYSA9IGEgPDwgMzAgfCBhID4+PiAyOwogICAgICAgICAgICBmID0gZSBeIGEgXiBiOwogICAgICAgICAgICB0ID0gZCA8PCA1IHwgZCA+Pj4gMjc7CiAgICAgICAgICAgIGMgPSB0ICsgZiArIGMgLSA4OTk0OTc1MTQgKyBibG9ja3MyW2ogKyAyXSA+Pj4gMDsKICAgICAgICAgICAgZSA9IGUgPDwgMzAgfCBlID4+PiAyOwogICAgICAgICAgICBmID0gZCBeIGUgXiBhOwogICAgICAgICAgICB0ID0gYyA8PCA1IHwgYyA+Pj4gMjc7CiAgICAgICAgICAgIGIgPSB0ICsgZiArIGIgLSA4OTk0OTc1MTQgKyBibG9ja3MyW2ogKyAzXSA+Pj4gMDsKICAgICAgICAgICAgZCA9IGQgPDwgMzAgfCBkID4+PiAyOwogICAgICAgICAgICBmID0gYyBeIGQgXiBlOwogICAgICAgICAgICB0ID0gYiA8PCA1IHwgYiA+Pj4gMjc7CiAgICAgICAgICAgIGEgPSB0ICsgZiArIGEgLSA4OTk0OTc1MTQgKyBibG9ja3MyW2ogKyA0XSA+Pj4gMDsKICAgICAgICAgICAgYyA9IGMgPDwgMzAgfCBjID4+PiAyOwogICAgICAgIH0KICAgICAgICB0aGlzLiNoMCA9IHRoaXMuI2gwICsgYSA+Pj4gMDsKICAgICAgICB0aGlzLiNoMSA9IHRoaXMuI2gxICsgYiA+Pj4gMDsKICAgICAgICB0aGlzLiNoMiA9IHRoaXMuI2gyICsgYyA+Pj4gMDsKICAgICAgICB0aGlzLiNoMyA9IHRoaXMuI2gzICsgZCA+Pj4gMDsKICAgICAgICB0aGlzLiNoNCA9IHRoaXMuI2g0ICsgZSA+Pj4gMDsKICAgIH0KICAgIGhleCgpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgaDAgPSB0aGlzLiNoMDsKICAgICAgICBjb25zdCBoMSA9IHRoaXMuI2gxOwogICAgICAgIGNvbnN0IGgyID0gdGhpcy4jaDI7CiAgICAgICAgY29uc3QgaDMgPSB0aGlzLiNoMzsKICAgICAgICBjb25zdCBoNCA9IHRoaXMuI2g0OwogICAgICAgIHJldHVybiBIRVhfQ0hBUlMxW2gwID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTMVtoMCA+PiAyNCAmIDE1XSArIEhFWF9DSEFSUzFbaDAgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlMxW2gwID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTMVtoMCA+PiAxMiAmIDE1XSArIEhFWF9DSEFSUzFbaDAgPj4gOCAmIDE1XSArIEhFWF9DSEFSUzFbaDAgPj4gNCAmIDE1XSArIEhFWF9DSEFSUzFbaDAgJiAxNV0gKyBIRVhfQ0hBUlMxW2gxID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTMVtoMSA+PiAyNCAmIDE1XSArIEhFWF9DSEFSUzFbaDEgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlMxW2gxID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTMVtoMSA+PiAxMiAmIDE1XSArIEhFWF9DSEFSUzFbaDEgPj4gOCAmIDE1XSArIEhFWF9DSEFSUzFbaDEgPj4gNCAmIDE1XSArIEhFWF9DSEFSUzFbaDEgJiAxNV0gKyBIRVhfQ0hBUlMxW2gyID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTMVtoMiA+PiAyNCAmIDE1XSArIEhFWF9DSEFSUzFbaDIgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlMxW2gyID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTMVtoMiA+PiAxMiAmIDE1XSArIEhFWF9DSEFSUzFbaDIgPj4gOCAmIDE1XSArIEhFWF9DSEFSUzFbaDIgPj4gNCAmIDE1XSArIEhFWF9DSEFSUzFbaDIgJiAxNV0gKyBIRVhfQ0hBUlMxW2gzID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTMVtoMyA+PiAyNCAmIDE1XSArIEhFWF9DSEFSUzFbaDMgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlMxW2gzID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTMVtoMyA+PiAxMiAmIDE1XSArIEhFWF9DSEFSUzFbaDMgPj4gOCAmIDE1XSArIEhFWF9DSEFSUzFbaDMgPj4gNCAmIDE1XSArIEhFWF9DSEFSUzFbaDMgJiAxNV0gKyBIRVhfQ0hBUlMxW2g0ID4+IDI4ICYgMTVdICsgSEVYX0NIQVJTMVtoNCA+PiAyNCAmIDE1XSArIEhFWF9DSEFSUzFbaDQgPj4gMjAgJiAxNV0gKyBIRVhfQ0hBUlMxW2g0ID4+IDE2ICYgMTVdICsgSEVYX0NIQVJTMVtoNCA+PiAxMiAmIDE1XSArIEhFWF9DSEFSUzFbaDQgPj4gOCAmIDE1XSArIEhFWF9DSEFSUzFbaDQgPj4gNCAmIDE1XSArIEhFWF9DSEFSUzFbaDQgJiAxNV07CiAgICB9CiAgICB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy5oZXgoKTsKICAgIH0KICAgIGRpZ2VzdCgpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgaDAgPSB0aGlzLiNoMDsKICAgICAgICBjb25zdCBoMSA9IHRoaXMuI2gxOwogICAgICAgIGNvbnN0IGgyID0gdGhpcy4jaDI7CiAgICAgICAgY29uc3QgaDMgPSB0aGlzLiNoMzsKICAgICAgICBjb25zdCBoNCA9IHRoaXMuI2g0OwogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIGgwID4+IDI0ICYgMjU1LAogICAgICAgICAgICBoMCA+PiAxNiAmIDI1NSwKICAgICAgICAgICAgaDAgPj4gOCAmIDI1NSwKICAgICAgICAgICAgaDAgJiAyNTUsCiAgICAgICAgICAgIGgxID4+IDI0ICYgMjU1LAogICAgICAgICAgICBoMSA+PiAxNiAmIDI1NSwKICAgICAgICAgICAgaDEgPj4gOCAmIDI1NSwKICAgICAgICAgICAgaDEgJiAyNTUsCiAgICAgICAgICAgIGgyID4+IDI0ICYgMjU1LAogICAgICAgICAgICBoMiA+PiAxNiAmIDI1NSwKICAgICAgICAgICAgaDIgPj4gOCAmIDI1NSwKICAgICAgICAgICAgaDIgJiAyNTUsCiAgICAgICAgICAgIGgzID4+IDI0ICYgMjU1LAogICAgICAgICAgICBoMyA+PiAxNiAmIDI1NSwKICAgICAgICAgICAgaDMgPj4gOCAmIDI1NSwKICAgICAgICAgICAgaDMgJiAyNTUsCiAgICAgICAgICAgIGg0ID4+IDI0ICYgMjU1LAogICAgICAgICAgICBoNCA+PiAxNiAmIDI1NSwKICAgICAgICAgICAgaDQgPj4gOCAmIDI1NSwKICAgICAgICAgICAgaDQgJiAyNTUsIAogICAgICAgIF07CiAgICB9CiAgICBhcnJheSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5kaWdlc3QoKTsKICAgIH0KICAgIGFycmF5QnVmZmVyKCkgewogICAgICAgIHRoaXMuZmluYWxpemUoKTsKICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMjApOwogICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7CiAgICAgICAgZGF0YVZpZXcuc2V0VWludDMyKDAsIHRoaXMuI2gwKTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoNCwgdGhpcy4jaDEpOwogICAgICAgIGRhdGFWaWV3LnNldFVpbnQzMig4LCB0aGlzLiNoMik7CiAgICAgICAgZGF0YVZpZXcuc2V0VWludDMyKDEyLCB0aGlzLiNoMyk7CiAgICAgICAgZGF0YVZpZXcuc2V0VWludDMyKDE2LCB0aGlzLiNoNCk7CiAgICAgICAgcmV0dXJuIGJ1ZmZlcjsKICAgIH0KfQpjbGFzcyBIbWFjU2hhMSBleHRlbmRzIFNoYTEgewogICAgI3NoYXJlZE1lbW9yeTsKICAgICNpbm5lcjsKICAgICNvS2V5UGFkOwogICAgY29uc3RydWN0b3Ioc2VjcmV0S2V5MSwgc2hhcmVkTWVtb3J5NCA9IGZhbHNlKXsKICAgICAgICBzdXBlcihzaGFyZWRNZW1vcnk0KTsKICAgICAgICBsZXQga2V5MTsKICAgICAgICBpZiAodHlwZW9mIHNlY3JldEtleTEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gW107CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHNlY3JldEtleTEubGVuZ3RoOwogICAgICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBsZW5ndGg7IGkxKyspewogICAgICAgICAgICAgICAgbGV0IGNvZGUgPSBzZWNyZXRLZXkxLmNoYXJDb2RlQXQoaTEpOwogICAgICAgICAgICAgICAgaWYgKGNvZGUgPCAxMjgpIHsKICAgICAgICAgICAgICAgICAgICBieXRlc1tpbmRleCsrXSA9IGNvZGU7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAyMDQ4KSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxOTIgfCBjb2RlID4+IDY7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxMjggfCBjb2RlICYgNjM7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCA1NTI5NiB8fCBjb2RlID49IDU3MzQ0KSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAyMjQgfCBjb2RlID4+IDEyOwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMTI4IHwgY29kZSA+PiA2ICYgNjM7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxMjggfCBjb2RlICYgNjM7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvZGUgPSA2NTUzNiArICgoY29kZSAmIDEwMjMpIDw8IDEwIHwgc2VjcmV0S2V5MS5jaGFyQ29kZUF0KCsraTEpICYgMTAyMyk7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAyNDAgfCBjb2RlID4+IDE4OwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMTI4IHwgY29kZSA+PiAxMiAmIDYzOwogICAgICAgICAgICAgICAgICAgIGJ5dGVzW2luZGV4KytdID0gMTI4IHwgY29kZSA+PiA2ICYgNjM7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaW5kZXgrK10gPSAxMjggfCBjb2RlICYgNjM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAga2V5MSA9IGJ5dGVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChzZWNyZXRLZXkxIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHsKICAgICAgICAgICAgICAgIGtleTEgPSBuZXcgVWludDhBcnJheShzZWNyZXRLZXkxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGtleTEgPSBzZWNyZXRLZXkxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChrZXkxLmxlbmd0aCA+IDY0KSB7CiAgICAgICAgICAgIGtleTEgPSBuZXcgU2hhMSh0cnVlKS51cGRhdGUoa2V5MSkuYXJyYXkoKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb0tleVBhZDEgPSBbXTsKICAgICAgICBjb25zdCBpS2V5UGFkMSA9IFtdOwogICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IDY0OyBpMSsrKXsKICAgICAgICAgICAgY29uc3QgYiA9IGtleTFbaTFdIHx8IDA7CiAgICAgICAgICAgIG9LZXlQYWQxW2kxXSA9IDkyIF4gYjsKICAgICAgICAgICAgaUtleVBhZDFbaTFdID0gNTQgXiBiOwogICAgICAgIH0KICAgICAgICB0aGlzLnVwZGF0ZShpS2V5UGFkMSk7CiAgICAgICAgdGhpcy4jb0tleVBhZCA9IG9LZXlQYWQxOwogICAgICAgIHRoaXMuI2lubmVyID0gdHJ1ZTsKICAgICAgICB0aGlzLiNzaGFyZWRNZW1vcnkgPSBzaGFyZWRNZW1vcnk0OwogICAgfQogICAgZmluYWxpemUoKSB7CiAgICAgICAgc3VwZXIuZmluYWxpemUoKTsKICAgICAgICBpZiAodGhpcy4jaW5uZXIpIHsKICAgICAgICAgICAgdGhpcy4jaW5uZXIgPSBmYWxzZTsKICAgICAgICAgICAgY29uc3QgaW5uZXJIYXNoID0gdGhpcy5hcnJheSgpOwogICAgICAgICAgICBzdXBlci5pbml0KHRoaXMuI3NoYXJlZE1lbW9yeSk7CiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMuI29LZXlQYWQpOwogICAgICAgICAgICB0aGlzLnVwZGF0ZShpbm5lckhhc2gpOwogICAgICAgICAgICBzdXBlci5maW5hbGl6ZSgpOwogICAgICAgIH0KICAgIH0KfQpjbGFzcyBEZW5vU3RkSW50ZXJuYWxFcnJvciBleHRlbmRzIEVycm9yIHsKICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpewogICAgICAgIHN1cGVyKG1lc3NhZ2UpOwogICAgICAgIHRoaXMubmFtZSA9ICJEZW5vU3RkSW50ZXJuYWxFcnJvciI7CiAgICB9Cn0KdmFyIFEgPSBPYmplY3QuY3JlYXRlLCBFID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBYID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBHID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgSiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLCBLMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBXID0gKGUpPT5FKGUsICJfX2VzTW9kdWxlIiwgewogICAgICAgIHZhbHVlOiAhMAogICAgfSkKOwp2YXIgZyA9IChlLCB0KT0+KCk9Pih0IHx8IGUoKHQgPSB7CiAgICAgICAgICAgIGV4cG9ydHM6IHsKICAgICAgICAgICAgfQogICAgICAgIH0pLmV4cG9ydHMsIHQpLCB0LmV4cG9ydHMpCjsKdmFyIFkgPSAoZSwgdCwgcjEpPT57CiAgICBpZiAodCAmJiB0eXBlb2YgdCA9PSAib2JqZWN0IiB8fCB0eXBlb2YgdCA9PSAiZnVuY3Rpb24iKSBmb3IgKGxldCBuIG9mIEoodCkpIUcuY2FsbChlLCBuKSAmJiBuICE9PSAiZGVmYXVsdCIgJiYgRShlLCBuLCB7CiAgICAgICAgZ2V0OiAoKT0+dFtuXQogICAgICAgICwKICAgICAgICBlbnVtZXJhYmxlOiAhKHIxID0gSzEodCwgbikpIHx8IHIxLmVudW1lcmFibGUKICAgIH0pOwogICAgcmV0dXJuIGU7Cn0sIEIgPSAoZSk9PlkoVyhFKGUgIT0gbnVsbCA/IFEoWChlKSkgOiB7CiAgICB9LCAiZGVmYXVsdCIsIGUgJiYgZS5fX2VzTW9kdWxlICYmICJkZWZhdWx0IiBpbiBlID8gewogICAgICAgIGdldDogKCk9PmUuZGVmYXVsdAogICAgICAgICwKICAgICAgICBlbnVtZXJhYmxlOiAhMAogICAgfSA6IHsKICAgICAgICB2YWx1ZTogZSwKICAgICAgICBlbnVtZXJhYmxlOiAhMAogICAgfSkpLCBlKQo7CnZhciB3ID0gZygoTCk9PnsKICAgIGZ1bmN0aW9uIFQoZSkgewogICAgICAgIHRoaXMuc2VxdWVuY2VzID0gZS5zcGxpdCgvXHI/XG4vKSwgdGhpcy50b3RhbExpbmVzID0gdGhpcy5zZXF1ZW5jZXMubGVuZ3RoLCB0aGlzLmxpbmVOdW1iZXIgPSAwOwogICAgfQogICAgVC5wcm90b3R5cGUucGVla05leHRMaW5lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaGFzTmV4dCgpID8gdGhpcy5zZXF1ZW5jZXNbdGhpcy5saW5lTnVtYmVyXSA6IG51bGw7CiAgICB9OwogICAgVC5wcm90b3R5cGUuZ2V0TmV4dExpbmUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5oYXNOZXh0KCkgPyB0aGlzLnNlcXVlbmNlc1t0aGlzLmxpbmVOdW1iZXIrK10gOiBudWxsOwogICAgfTsKICAgIFQucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5saW5lTnVtYmVyIDwgdGhpcy50b3RhbExpbmVzOwogICAgfTsKICAgIHR5cGVvZiBMICE9ICJ1bmRlZmluZWQiICYmIChMLlN0cmVhbSA9IFQpOwp9KTsKdmFyIFMgPSBnKChSKT0+ewogICAgdmFyIHUgPSB7CiAgICAgICAgcnVsZXM6IHsKICAgICAgICB9LAogICAgICAgIGRlZmluZTogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICB0aGlzLnJ1bGVzW2VdID0gdDsKICAgICAgICAgICAgdmFyIHIxID0gImlzIiArIGUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBlLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgdGhpc1tyMV0gPSBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ydWxlc1tlXS5leGVjKG4pOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH07CiAgICB1LmRlZmluZSgiaGVhZGVyIiwgL14oXCorKVxzKyguKikkLyk7CiAgICB1LmRlZmluZSgicHJlZm9ybWF0dGVkIiwgL14oXHMqKTooPzogKC4qKSR8JCkvKTsKICAgIHUuZGVmaW5lKCJ1bm9yZGVyZWRMaXN0RWxlbWVudCIsIC9eKFxzKikoPzotfFwrfFxzK1wqKVxzKyguKikkLyk7CiAgICB1LmRlZmluZSgib3JkZXJlZExpc3RFbGVtZW50IiwgL14oXHMqKShcZCspKD86XC58XCkpXHMrKC4qKSQvKTsKICAgIHUuZGVmaW5lKCJ0YWJsZVNlcGFyYXRvciIsIC9eKFxzKilcfCgoPzpcK3wtKSo/KVx8PyQvKTsKICAgIHUuZGVmaW5lKCJ0YWJsZVJvdyIsIC9eKFxzKilcfCguKj8pXHw/JC8pOwogICAgdS5kZWZpbmUoImJsYW5rIiwgL14kLyk7CiAgICB1LmRlZmluZSgiaG9yaXpvbnRhbFJ1bGUiLCAvXihccyopLXs1LH0kLyk7CiAgICB1LmRlZmluZSgiZGlyZWN0aXZlIiwgL14oXHMqKSNcKyg/OihiZWdpbnxlbmQpXyk/KC4qKSQvaSk7CiAgICB1LmRlZmluZSgiY29tbWVudCIsIC9eKFxzKikjKC4qKSQvKTsKICAgIHUuZGVmaW5lKCJsaW5lIiwgL14oXHMqKSguKikkLyk7CiAgICBmdW5jdGlvbiBEKCkgewogICAgfQogICAgRC5wcm90b3R5cGUgPSB7CiAgICAgICAgaXNMaXN0RWxlbWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IGYudG9rZW5zLm9yZGVyZWRMaXN0RWxlbWVudCB8fCB0aGlzLnR5cGUgPT09IGYudG9rZW5zLnVub3JkZXJlZExpc3RFbGVtZW50OwogICAgICAgIH0sCiAgICAgICAgaXNUYWJsZUVsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBmLnRva2Vucy50YWJsZVNlcGFyYXRvciB8fCB0aGlzLnR5cGUgPT09IGYudG9rZW5zLnRhYmxlUm93OwogICAgICAgIH0KICAgIH07CiAgICBmdW5jdGlvbiBmKGUpIHsKICAgICAgICB0aGlzLnN0cmVhbSA9IGUsIHRoaXMudG9rZW5TdGFjayA9IFtdOwogICAgfQogICAgZi5wcm90b3R5cGUgPSB7CiAgICAgICAgdG9rZW5pemU6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBuZXcgRDsKICAgICAgICAgICAgaWYgKHQuZnJvbUxpbmVOdW1iZXIgPSB0aGlzLnN0cmVhbS5saW5lTnVtYmVyLCB1LmlzSGVhZGVyKGUpKSB0LnR5cGUgPSBmLnRva2Vucy5oZWFkZXIsIHQuaW5kZW50YXRpb24gPSAwLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDIsIHQubGV2ZWwgPSBSZWdFeHAuJDEubGVuZ3RoOwogICAgICAgICAgICBlbHNlIGlmICh1LmlzUHJlZm9ybWF0dGVkKGUpKSB0LnR5cGUgPSBmLnRva2Vucy5wcmVmb3JtYXR0ZWQsIHQuaW5kZW50YXRpb24gPSBSZWdFeHAuJDEubGVuZ3RoLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgaWYgKHUuaXNVbm9yZGVyZWRMaXN0RWxlbWVudChlKSkgdC50eXBlID0gZi50b2tlbnMudW5vcmRlcmVkTGlzdEVsZW1lbnQsIHQuaW5kZW50YXRpb24gPSBSZWdFeHAuJDEubGVuZ3RoLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgaWYgKHUuaXNPcmRlcmVkTGlzdEVsZW1lbnQoZSkpIHQudHlwZSA9IGYudG9rZW5zLm9yZGVyZWRMaXN0RWxlbWVudCwgdC5pbmRlbnRhdGlvbiA9IFJlZ0V4cC4kMS5sZW5ndGgsIHQuY29udGVudCA9IFJlZ0V4cC4kMywgdC5udW1iZXIgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgaWYgKHUuaXNUYWJsZVNlcGFyYXRvcihlKSkgdC50eXBlID0gZi50b2tlbnMudGFibGVTZXBhcmF0b3IsIHQuaW5kZW50YXRpb24gPSBSZWdFeHAuJDEubGVuZ3RoLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgaWYgKHUuaXNUYWJsZVJvdyhlKSkgdC50eXBlID0gZi50b2tlbnMudGFibGVSb3csIHQuaW5kZW50YXRpb24gPSBSZWdFeHAuJDEubGVuZ3RoLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgaWYgKHUuaXNCbGFuayhlKSkgdC50eXBlID0gZi50b2tlbnMuYmxhbmssIHQuaW5kZW50YXRpb24gPSAwLCB0LmNvbnRlbnQgPSBudWxsOwogICAgICAgICAgICBlbHNlIGlmICh1LmlzSG9yaXpvbnRhbFJ1bGUoZSkpIHQudHlwZSA9IGYudG9rZW5zLmhvcml6b250YWxSdWxlLCB0LmluZGVudGF0aW9uID0gUmVnRXhwLiQxLmxlbmd0aCwgdC5jb250ZW50ID0gbnVsbDsKICAgICAgICAgICAgZWxzZSBpZiAodS5pc0RpcmVjdGl2ZShlKSkgewogICAgICAgICAgICAgICAgdC50eXBlID0gZi50b2tlbnMuZGlyZWN0aXZlLCB0LmluZGVudGF0aW9uID0gUmVnRXhwLiQxLmxlbmd0aCwgdC5jb250ZW50ID0gUmVnRXhwLiQzOwogICAgICAgICAgICAgICAgdmFyIHIxID0gUmVnRXhwLiQyOwogICAgICAgICAgICAgICAgL15iZWdpbi9pLnRlc3QocjEpID8gdC5iZWdpbkRpcmVjdGl2ZSA9ICEwIDogL15lbmQvaS50ZXN0KHIxKSA/IHQuZW5kRGlyZWN0aXZlID0gITAgOiB0Lm9uZXNob3REaXJlY3RpdmUgPSAhMDsKICAgICAgICAgICAgfSBlbHNlIGlmICh1LmlzQ29tbWVudChlKSkgdC50eXBlID0gZi50b2tlbnMuY29tbWVudCwgdC5pbmRlbnRhdGlvbiA9IFJlZ0V4cC4kMS5sZW5ndGgsIHQuY29udGVudCA9IFJlZ0V4cC4kMjsKICAgICAgICAgICAgZWxzZSBpZiAodS5pc0xpbmUoZSkpIHQudHlwZSA9IGYudG9rZW5zLmxpbmUsIHQuaW5kZW50YXRpb24gPSBSZWdFeHAuJDEubGVuZ3RoLCB0LmNvbnRlbnQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCJTeW50YXhFcnJvcjogVW5rbm93biBsaW5lOiAiICsgZSk7CiAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgIH0sCiAgICAgICAgcHVzaFRva2VuOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHRoaXMudG9rZW5TdGFjay5wdXNoKGUpOwogICAgICAgIH0sCiAgICAgICAgcHVzaER1bW15VG9rZW5CeVR5cGU6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBuZXcgRDsKICAgICAgICAgICAgdC50eXBlID0gZSwgdGhpcy50b2tlblN0YWNrLnB1c2godCk7CiAgICAgICAgfSwKICAgICAgICBwZWVrU3RhY2tlZFRva2VuOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5TdGFjay5sZW5ndGggPiAwID8gdGhpcy50b2tlblN0YWNrW3RoaXMudG9rZW5TdGFjay5sZW5ndGggLSAxXSA6IG51bGw7CiAgICAgICAgfSwKICAgICAgICBnZXRTdGFja2VkVG9rZW46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50b2tlblN0YWNrLmxlbmd0aCA+IDAgPyB0aGlzLnRva2VuU3RhY2sucG9wKCkgOiBudWxsOwogICAgICAgIH0sCiAgICAgICAgcGVla05leHRUb2tlbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlZWtTdGFja2VkVG9rZW4oKSB8fCB0aGlzLnRva2VuaXplKHRoaXMuc3RyZWFtLnBlZWtOZXh0TGluZSgpKTsKICAgICAgICB9LAogICAgICAgIGdldE5leHRUb2tlbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrZWRUb2tlbigpIHx8IHRoaXMudG9rZW5pemUodGhpcy5zdHJlYW0uZ2V0TmV4dExpbmUoKSk7CiAgICAgICAgfSwKICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLmhhc05leHQoKTsKICAgICAgICB9LAogICAgICAgIGdldExpbmVOdW1iZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ubGluZU51bWJlcjsKICAgICAgICB9CiAgICB9OwogICAgZi50b2tlbnMgPSB7CiAgICB9OwogICAgWwogICAgICAgICJoZWFkZXIiLAogICAgICAgICJvcmRlcmVkTGlzdEVsZW1lbnQiLAogICAgICAgICJ1bm9yZGVyZWRMaXN0RWxlbWVudCIsCiAgICAgICAgInRhYmxlUm93IiwKICAgICAgICAidGFibGVTZXBhcmF0b3IiLAogICAgICAgICJwcmVmb3JtYXR0ZWQiLAogICAgICAgICJsaW5lIiwKICAgICAgICAiaG9yaXpvbnRhbFJ1bGUiLAogICAgICAgICJibGFuayIsCiAgICAgICAgImRpcmVjdGl2ZSIsCiAgICAgICAgImNvbW1lbnQiCiAgICBdLmZvckVhY2goZnVuY3Rpb24oZSwgdCkgewogICAgICAgIGYudG9rZW5zW2VdID0gdDsKICAgIH0pOwogICAgdHlwZW9mIFIgIT0gInVuZGVmaW5lZCIgJiYgKFIuTGV4ZXIgPSBmKTsKfSk7CnZhciBiID0gZygoQyk9PnsKICAgIGZ1bmN0aW9uIGooZSwgdCkgewogICAgICAgIGlmICh0aGlzLnR5cGUgPSBlLCB0aGlzLmNoaWxkcmVuID0gW10sIHQpIGZvcih2YXIgcjIgPSAwLCBuID0gdC5sZW5ndGg7IHIyIDwgbjsgKytyMil0aGlzLmFwcGVuZENoaWxkKHRbcjJdKTsKICAgIH0KICAgIGoucHJvdG90eXBlID0gewogICAgICAgIHByZXZpb3VzU2libGluZzogbnVsbCwKICAgICAgICBwYXJlbnQ6IG51bGwsCiAgICAgICAgZ2V0IGZpcnN0Q2hpbGQgKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPCAxID8gbnVsbCA6IHRoaXMuY2hpbGRyZW5bMF07CiAgICAgICAgfSwKICAgICAgICBnZXQgbGFzdENoaWxkICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoIDwgMSA/IG51bGwgOiB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV07CiAgICAgICAgfSwKICAgICAgICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIDwgMSA/IG51bGwgOiB0aGlzLmxhc3RDaGlsZDsKICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGUpLCBlLnByZXZpb3VzU2libGluZyA9IHQsIGUucGFyZW50ID0gdGhpczsKICAgICAgICB9LAogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSAiPCIgKyB0aGlzLnR5cGUgKyAiPiI7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy52YWx1ZSAhPSAidW5kZWZpbmVkIiA/IGUgKz0gIiAiICsgdGhpcy52YWx1ZSA6IHRoaXMuY2hpbGRyZW4gJiYgKGUgKz0gYFxuYCArIHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKHQsIHIyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIiMiICsgcjIgKyAiICIgKyB0LnRvU3RyaW5nKCk7CiAgICAgICAgICAgIH0pLmpvaW4oYFxuYCkuc3BsaXQoYFxuYCkubWFwKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiICAiICsgdDsKICAgICAgICAgICAgfSkuam9pbihgXG5gKSksIGU7CiAgICAgICAgfQogICAgfTsKICAgIHZhciBwID0gewogICAgICAgIHR5cGVzOiB7CiAgICAgICAgfSwKICAgICAgICBkZWZpbmU6IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgdGhpcy50eXBlc1tlXSA9IGU7CiAgICAgICAgICAgIHZhciByMiA9ICJjcmVhdGUiICsgZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIGUuc3Vic3RyaW5nKDEpLCBuID0gdHlwZW9mIHQgPT0gImZ1bmN0aW9uIjsKICAgICAgICAgICAgdGhpc1tyMl0gPSBmdW5jdGlvbihpMiwgcykgewogICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgaihlLCBpMik7CiAgICAgICAgICAgICAgICByZXR1cm4gbiAmJiB0KGEsIHMgfHwgewogICAgICAgICAgICAgICAgfSksIGE7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgfTsKICAgIHAuZGVmaW5lKCJ0ZXh0IiwgZnVuY3Rpb24oZSwgdCkgewogICAgICAgIGUudmFsdWUgPSB0LnZhbHVlOwogICAgfSk7CiAgICBwLmRlZmluZSgiaGVhZGVyIiwgZnVuY3Rpb24oZSwgdCkgewogICAgICAgIGUubGV2ZWwgPSB0LmxldmVsOwogICAgfSk7CiAgICBwLmRlZmluZSgib3JkZXJlZExpc3QiKTsKICAgIHAuZGVmaW5lKCJ1bm9yZGVyZWRMaXN0Iik7CiAgICBwLmRlZmluZSgiZGVmaW5pdGlvbkxpc3QiKTsKICAgIHAuZGVmaW5lKCJsaXN0RWxlbWVudCIpOwogICAgcC5kZWZpbmUoInBhcmFncmFwaCIpOwogICAgcC5kZWZpbmUoInByZWZvcm1hdHRlZCIpOwogICAgcC5kZWZpbmUoInRhYmxlIik7CiAgICBwLmRlZmluZSgidGFibGVSb3ciKTsKICAgIHAuZGVmaW5lKCJ0YWJsZUNlbGwiKTsKICAgIHAuZGVmaW5lKCJob3Jpem9udGFsUnVsZSIpOwogICAgcC5kZWZpbmUoImRpcmVjdGl2ZSIpOwogICAgcC5kZWZpbmUoImlubGluZUNvbnRhaW5lciIpOwogICAgcC5kZWZpbmUoImJvbGQiKTsKICAgIHAuZGVmaW5lKCJpdGFsaWMiKTsKICAgIHAuZGVmaW5lKCJ1bmRlcmxpbmUiKTsKICAgIHAuZGVmaW5lKCJjb2RlIik7CiAgICBwLmRlZmluZSgidmVyYmF0aW0iKTsKICAgIHAuZGVmaW5lKCJkYXNoZWQiKTsKICAgIHAuZGVmaW5lKCJsaW5rIiwgZnVuY3Rpb24oZSwgdCkgewogICAgICAgIGUuc3JjID0gdC5zcmM7CiAgICB9KTsKICAgIHR5cGVvZiBDICE9ICJ1bmRlZmluZWQiICYmIChDLk5vZGUgPSBwKTsKfSk7CnZhciBQID0gZygoTik9PnsKICAgIHZhciBaID0gdygpLlN0cmVhbSwgbyA9IFMoKS5MZXhlciwgYyA9IGIoKS5Ob2RlOwogICAgZnVuY3Rpb24geDEoKSB7CiAgICAgICAgdGhpcy5pbmxpbmVQYXJzZXIgPSBuZXcgTzsKICAgIH0KICAgIHgxLnBhcnNlU3RyZWFtID0gZnVuY3Rpb24oZSwgdCkgewogICAgICAgIHZhciByMiA9IG5ldyB4MTsKICAgICAgICByZXR1cm4gcjIuaW5pdFN0YXR1cyhlLCB0KSwgcjIucGFyc2VOb2RlcygpLCByMi5ub2RlczsKICAgIH07CiAgICB4MS5wcm90b3R5cGUgPSB7CiAgICAgICAgaW5pdFN0YXR1czogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICBpZiAodHlwZW9mIGUgPT0gInN0cmluZyIgJiYgKGUgPSBuZXcgWihlKSksIHRoaXMubGV4ZXIgPSBuZXcgbyhlKSwgdGhpcy5ub2RlcyA9IFtdLCB0aGlzLm9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICB0b2M6ICEwLAogICAgICAgICAgICAgICAgbnVtOiAhMCwKICAgICAgICAgICAgICAgICJeIjogInt9IiwKICAgICAgICAgICAgICAgIG11bHRpbGluZUNlbGw6ICExCiAgICAgICAgICAgIH0sIHQgJiYgdHlwZW9mIHQgPT0gIm9iamVjdCIpIGZvcih2YXIgcjIgaW4gdCl0aGlzLm9wdGlvbnNbcjJdID0gdFtyMl07CiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB7CiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsCiAgICAgICAgICAgICAgICBkaXJlY3RpdmVWYWx1ZXM6IHsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjb252ZXJ0OiBmdW5jdGlvbihuLCBpMikgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IG4odGhpcywgaTIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIHBhcnNlOiBmdW5jdGlvbihlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRTdGF0dXMoZSwgdCksIHRoaXMucGFyc2VEb2N1bWVudCgpLCB0aGlzLmRvY3VtZW50Lm5vZGVzID0gdGhpcy5ub2RlcywgdGhpcy5kb2N1bWVudDsKICAgICAgICB9LAogICAgICAgIGNyZWF0ZUVycm9yUmVwb3J0OiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoZSArICIgYXQgbGluZSAiICsgdGhpcy5sZXhlci5nZXRMaW5lTnVtYmVyKCkpOwogICAgICAgIH0sCiAgICAgICAgc2tpcEJsYW5rOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZm9yKHZhciBlID0gbnVsbDsgdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCkudHlwZSA9PT0gby50b2tlbnMuYmxhbms7KWUgPSB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpOwogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICB9LAogICAgICAgIHNldE5vZGVPcmlnaW5Gcm9tVG9rZW46IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgcmV0dXJuIGUuZnJvbUxpbmVOdW1iZXIgPSB0LmZyb21MaW5lTnVtYmVyLCBlOwogICAgICAgIH0sCiAgICAgICAgYXBwZW5kTm9kZTogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9IHRoaXMubm9kZXMubGVuZ3RoID4gMCA/IHRoaXMubm9kZXNbdGhpcy5ub2Rlcy5sZW5ndGggLSAxXSA6IG51bGw7CiAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaChlKSwgZS5wcmV2aW91c1NpYmxpbmcgPSB0OwogICAgICAgIH0sCiAgICAgICAgcGFyc2VEb2N1bWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VUaXRsZSgpLCB0aGlzLnBhcnNlTm9kZXMoKTsKICAgICAgICB9LAogICAgICAgIHBhcnNlTm9kZXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmb3IoOyB0aGlzLmxleGVyLmhhc05leHQoKTspewogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnBhcnNlRWxlbWVudCgpOwogICAgICAgICAgICAgICAgZSAmJiB0aGlzLmFwcGVuZE5vZGUoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBhcnNlVGl0bGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLnNraXBCbGFuaygpLCB0aGlzLmxleGVyLmhhc05leHQoKSAmJiB0aGlzLmxleGVyLnBlZWtOZXh0VG9rZW4oKS50eXBlID09PSBvLnRva2Vucy5saW5lID8gdGhpcy5kb2N1bWVudC50aXRsZSA9IHRoaXMuY3JlYXRlVGV4dE5vZGUodGhpcy5sZXhlci5nZXROZXh0VG9rZW4oKS5jb250ZW50KSA6IHRoaXMuZG9jdW1lbnQudGl0bGUgPSBudWxsLCB0aGlzLmxleGVyLnB1c2hEdW1teVRva2VuQnlUeXBlKG8udG9rZW5zLmJsYW5rKTsKICAgICAgICB9LAogICAgICAgIHBhcnNlRWxlbWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBlID0gbnVsbDsKICAgICAgICAgICAgc3dpdGNoKHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpLnR5cGUpewogICAgICAgICAgICAgICAgY2FzZSBvLnRva2Vucy5oZWFkZXI6CiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMucGFyc2VIZWFkZXIoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugby50b2tlbnMucHJlZm9ybWF0dGVkOgogICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLnBhcnNlUHJlZm9ybWF0dGVkKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIG8udG9rZW5zLm9yZGVyZWRMaXN0RWxlbWVudDoKICAgICAgICAgICAgICAgIGNhc2Ugby50b2tlbnMudW5vcmRlcmVkTGlzdEVsZW1lbnQ6CiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMucGFyc2VMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIG8udG9rZW5zLmxpbmU6CiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMucGFyc2VUZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIG8udG9rZW5zLnRhYmxlUm93OgogICAgICAgICAgICAgICAgY2FzZSBvLnRva2Vucy50YWJsZVNlcGFyYXRvcjoKICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5wYXJzZVRhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIG8udG9rZW5zLmJsYW5rOgogICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcEJsYW5rKCksIHRoaXMubGV4ZXIuaGFzTmV4dCgpICYmICh0aGlzLmxleGVyLnBlZWtOZXh0VG9rZW4oKS50eXBlID09PSBvLnRva2Vucy5saW5lID8gZSA9IHRoaXMucGFyc2VQYXJhZ3JhcGgoKSA6IGUgPSB0aGlzLnBhcnNlRWxlbWVudCgpKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugby50b2tlbnMuaG9yaXpvbnRhbFJ1bGU6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXhlci5nZXROZXh0VG9rZW4oKSwgZSA9IGMuY3JlYXRlSG9yaXpvbnRhbFJ1bGUoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugby50b2tlbnMuZGlyZWN0aXZlOgogICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLnBhcnNlRGlyZWN0aXZlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIG8udG9rZW5zLmNvbW1lbnQ6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXhlci5nZXROZXh0VG9rZW4oKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVFcnJvclJlcG9ydCgiVW5oYW5kbGVkIHRva2VuOiAiICsgdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCkudHlwZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgfSwKICAgICAgICBwYXJzZUVsZW1lbnRCZXNpZGVzRGlyZWN0aXZlRW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRWxlbWVudCA9IHRoaXMucGFyc2VFbGVtZW50QmVzaWRlc0RpcmVjdGl2ZUVuZEJvZHksIHRoaXMucGFyc2VFbGVtZW50KCk7CiAgICAgICAgICAgIH0gZmluYWxseXsKICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFbGVtZW50ID0gdGhpcy5vcmlnaW5hbFBhcnNlRWxlbWVudDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcGFyc2VFbGVtZW50QmVzaWRlc0RpcmVjdGl2ZUVuZEJvZHk6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCkudHlwZSA9PT0gby50b2tlbnMuZGlyZWN0aXZlICYmIHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpLmVuZERpcmVjdGl2ZSA/IG51bGwgOiB0aGlzLm9yaWdpbmFsUGFyc2VFbGVtZW50KCk7CiAgICAgICAgfSwKICAgICAgICBwYXJzZUhlYWRlcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcy5sZXhlci5nZXROZXh0VG9rZW4oKSwgdCA9IGMuY3JlYXRlSGVhZGVyKFsKICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVGV4dE5vZGUoZS5jb250ZW50KQogICAgICAgICAgICBdLCB7CiAgICAgICAgICAgICAgICBsZXZlbDogZS5sZXZlbAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Tm9kZU9yaWdpbkZyb21Ub2tlbih0LCBlKSwgdDsKICAgICAgICB9LAogICAgICAgIHBhcnNlUHJlZm9ybWF0dGVkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxleGVyLnBlZWtOZXh0VG9rZW4oKSwgdCA9IGMuY3JlYXRlUHJlZm9ybWF0dGVkKFtdKTsKICAgICAgICAgICAgdGhpcy5zZXROb2RlT3JpZ2luRnJvbVRva2VuKHQsIGUpOwogICAgICAgICAgICBmb3IodmFyIHIyID0gW107IHRoaXMubGV4ZXIuaGFzTmV4dCgpOyl7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpOwogICAgICAgICAgICAgICAgaWYgKG4udHlwZSAhPT0gby50b2tlbnMucHJlZm9ybWF0dGVkIHx8IG4uaW5kZW50YXRpb24gPCBlLmluZGVudGF0aW9uKSBicmVhazsKICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIuZ2V0TmV4dFRva2VuKCksIHIyLnB1c2gobi5jb250ZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVRleHROb2RlKHIyLmpvaW4oYFxuYCksICEwKSksIHQ7CiAgICAgICAgfSwKICAgICAgICBkZWZpbml0aW9uUGF0dGVybjogL14oLio/KSA6OiAqKC4qKSQvLAogICAgICAgIHBhcnNlTGlzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCksIHQsIHIyID0gITE7CiAgICAgICAgICAgIGZvcih0aGlzLmRlZmluaXRpb25QYXR0ZXJuLnRlc3QoZS5jb250ZW50KSA/ICh0ID0gYy5jcmVhdGVEZWZpbml0aW9uTGlzdChbXSksIHIyID0gITApIDogdCA9IGUudHlwZSA9PT0gby50b2tlbnMudW5vcmRlcmVkTGlzdEVsZW1lbnQgPyBjLmNyZWF0ZVVub3JkZXJlZExpc3QoW10pIDogYy5jcmVhdGVPcmRlcmVkTGlzdChbXSksIHRoaXMuc2V0Tm9kZU9yaWdpbkZyb21Ub2tlbih0LCBlKTsgdGhpcy5sZXhlci5oYXNOZXh0KCk7KXsKICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCk7CiAgICAgICAgICAgICAgICBpZiAoIW4uaXNMaXN0RWxlbWVudCgpIHx8IG4uaW5kZW50YXRpb24gIT09IGUuaW5kZW50YXRpb24pIGJyZWFrOwogICAgICAgICAgICAgICAgdC5hcHBlbmRDaGlsZCh0aGlzLnBhcnNlTGlzdEVsZW1lbnQoZS5pbmRlbnRhdGlvbiwgcjIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICB9LAogICAgICAgIHVua25vd25EZWZpbml0aW9uVGVybTogIj8/PyIsCiAgICAgICAgcGFyc2VMaXN0RWxlbWVudDogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICB2YXIgcjIgPSB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpLCBuID0gYy5jcmVhdGVMaXN0RWxlbWVudChbXSk7CiAgICAgICAgICAgIGlmICh0aGlzLnNldE5vZGVPcmlnaW5Gcm9tVG9rZW4obiwgcjIpLCBuLmlzRGVmaW5pdGlvbkxpc3QgPSB0LCB0KSB7CiAgICAgICAgICAgICAgICB2YXIgaTIgPSB0aGlzLmRlZmluaXRpb25QYXR0ZXJuLmV4ZWMocjIuY29udGVudCk7CiAgICAgICAgICAgICAgICBuLnRlcm0gPSBbCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUZXh0Tm9kZShpMiAmJiBpMlsxXSA/IGkyWzFdIDogdGhpcy51bmtub3duRGVmaW5pdGlvblRlcm0pCiAgICAgICAgICAgICAgICBdLCBuLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlVGV4dE5vZGUoaTIgPyBpMlsyXSA6IHIyLmNvbnRlbnQpKTsKICAgICAgICAgICAgfSBlbHNlIG4uYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVUZXh0Tm9kZShyMi5jb250ZW50KSk7CiAgICAgICAgICAgIGZvcig7IHRoaXMubGV4ZXIuaGFzTmV4dCgpOyl7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMuc2tpcEJsYW5rKCk7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGV4ZXIuaGFzTmV4dCgpKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCk7CiAgICAgICAgICAgICAgICBpZiAocyAmJiAhYS5pc0xpc3RFbGVtZW50KCkgJiYgdGhpcy5sZXhlci5wdXNoVG9rZW4ocyksIGEuaW5kZW50YXRpb24gPD0gZSkgYnJlYWs7CiAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMucGFyc2VFbGVtZW50KCk7CiAgICAgICAgICAgICAgICBoICYmIG4uYXBwZW5kQ2hpbGQoaCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfSwKICAgICAgICBwYXJzZVRhYmxlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxleGVyLnBlZWtOZXh0VG9rZW4oKSwgdCA9IGMuY3JlYXRlVGFibGUoW10pOwogICAgICAgICAgICB0aGlzLnNldE5vZGVPcmlnaW5Gcm9tVG9rZW4odCwgZSk7CiAgICAgICAgICAgIGZvcih2YXIgcjIgPSAhMSwgbiA9IGUudHlwZSA9PT0gby50b2tlbnMudGFibGVTZXBhcmF0b3IgJiYgdGhpcy5vcHRpb25zLm11bHRpbGluZUNlbGw7IHRoaXMubGV4ZXIuaGFzTmV4dCgpICYmIChlID0gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCkpLmlzVGFibGVFbGVtZW50KCk7KWlmIChlLnR5cGUgPT09IG8udG9rZW5zLnRhYmxlUm93KSB7CiAgICAgICAgICAgICAgICB2YXIgaTMgPSB0aGlzLnBhcnNlVGFibGVSb3cobik7CiAgICAgICAgICAgICAgICB0LmFwcGVuZENoaWxkKGkzKTsKICAgICAgICAgICAgfSBlbHNlIHIyID0gITAsIHRoaXMubGV4ZXIuZ2V0TmV4dFRva2VuKCk7CiAgICAgICAgICAgIHJldHVybiByMiAmJiB0LmNoaWxkcmVuLmxlbmd0aCAmJiB0LmNoaWxkcmVuWzBdLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24ocykgewogICAgICAgICAgICAgICAgcy5pc0hlYWRlciA9ICEwOwogICAgICAgICAgICB9KSwgdDsKICAgICAgICB9LAogICAgICAgIHBhcnNlVGFibGVSb3c6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgZm9yKHZhciB0ID0gW107IHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpLnR5cGUgPT09IG8udG9rZW5zLnRhYmxlUm93ICYmICh0LnB1c2godGhpcy5sZXhlci5nZXROZXh0VG9rZW4oKSksICEhZSk7KTsKICAgICAgICAgICAgaWYgKCF0Lmxlbmd0aCkgdGhyb3cgdGhpcy5jcmVhdGVFcnJvclJlcG9ydCgiRXhwZWN0ZWQgdGFibGUgcm93Iik7CiAgICAgICAgICAgIHZhciByMiA9IHQuc2hpZnQoKSwgbiA9IHIyLmNvbnRlbnQuc3BsaXQoInwiKTsKICAgICAgICAgICAgdC5mb3JFYWNoKGZ1bmN0aW9uKHMpIHsKICAgICAgICAgICAgICAgIHMuY29udGVudC5zcGxpdCgifCIpLmZvckVhY2goZnVuY3Rpb24oYSwgaCkgewogICAgICAgICAgICAgICAgICAgIG5baF0gPSAobltoXSB8fCAiIikgKyBgXG5gICsgYTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGk0ID0gbi5tYXAoZnVuY3Rpb24ocykgewogICAgICAgICAgICAgICAgcmV0dXJuIGMuY3JlYXRlVGFibGVDZWxsKHgxLnBhcnNlU3RyZWFtKHMpKTsKICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5vZGVPcmlnaW5Gcm9tVG9rZW4oYy5jcmVhdGVUYWJsZVJvdyhpNCksIHIyKTsKICAgICAgICB9LAogICAgICAgIHBhcnNlRGlyZWN0aXZlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpLCB0ID0gdGhpcy5jcmVhdGVEaXJlY3RpdmVOb2RlRnJvbVRva2VuKGUpOwogICAgICAgICAgICBpZiAoZS5lbmREaXJlY3RpdmUpIHRocm93IHRoaXMuY3JlYXRlRXJyb3JSZXBvcnQoIlVubWF0Y2hlZCAnZW5kJyBkaXJlY3RpdmUgZm9yICIgKyB0LmRpcmVjdGl2ZU5hbWUpOwogICAgICAgICAgICBpZiAoZS5vbmVzaG90RGlyZWN0aXZlKSByZXR1cm4gdGhpcy5pbnRlcnByZXREaXJlY3RpdmUodCksIHQ7CiAgICAgICAgICAgIGlmICghZS5iZWdpbkRpcmVjdGl2ZSkgdGhyb3cgdGhpcy5jcmVhdGVFcnJvclJlcG9ydCgiSW52YWxpZCBkaXJlY3RpdmUgIiArIHQuZGlyZWN0aXZlTmFtZSk7CiAgICAgICAgICAgIHJldHVybiB0LmNoaWxkcmVuID0gW10sIHRoaXMuaXNWZXJiYXRpbURpcmVjdGl2ZSh0KSA/IHRoaXMucGFyc2VEaXJlY3RpdmVCbG9ja1ZlcmJhdGltKHQpIDogdGhpcy5wYXJzZURpcmVjdGl2ZUJsb2NrKHQpOwogICAgICAgIH0sCiAgICAgICAgY3JlYXRlRGlyZWN0aXZlTm9kZUZyb21Ub2tlbjogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9IC9eWyBdKihbXiBdKilbIF0qKC4qKVsgXSokLy5leGVjKGUuY29udGVudCksIHIyID0gYy5jcmVhdGVEaXJlY3RpdmUobnVsbCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5vZGVPcmlnaW5Gcm9tVG9rZW4ocjIsIGUpLCByMi5kaXJlY3RpdmVOYW1lID0gdFsxXS50b0xvd2VyQ2FzZSgpLCByMi5kaXJlY3RpdmVBcmd1bWVudHMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlQXJndW1lbnRzKHRbMl0pLCByMi5kaXJlY3RpdmVPcHRpb25zID0gdGhpcy5wYXJzZURpcmVjdGl2ZU9wdGlvbnModFsyXSksIHIyLmRpcmVjdGl2ZVJhd1ZhbHVlID0gdFsyXSwgcjI7CiAgICAgICAgfSwKICAgICAgICBpc1ZlcmJhdGltRGlyZWN0aXZlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciB0ID0gZS5kaXJlY3RpdmVOYW1lOwogICAgICAgICAgICByZXR1cm4gdCA9PT0gInNyYyIgfHwgdCA9PT0gImV4YW1wbGUiIHx8IHQgPT09ICJodG1sIjsKICAgICAgICB9LAogICAgICAgIHBhcnNlRGlyZWN0aXZlQmxvY2s6IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgZm9yKHRoaXMubGV4ZXIucHVzaER1bW15VG9rZW5CeVR5cGUoby50b2tlbnMuYmxhbmspOyB0aGlzLmxleGVyLmhhc05leHQoKTspewogICAgICAgICAgICAgICAgdmFyIHIyID0gdGhpcy5sZXhlci5wZWVrTmV4dFRva2VuKCk7CiAgICAgICAgICAgICAgICBpZiAocjIudHlwZSA9PT0gby50b2tlbnMuZGlyZWN0aXZlICYmIHIyLmVuZERpcmVjdGl2ZSAmJiB0aGlzLmNyZWF0ZURpcmVjdGl2ZU5vZGVGcm9tVG9rZW4ocjIpLmRpcmVjdGl2ZU5hbWUgPT09IGUuZGlyZWN0aXZlTmFtZSkgcmV0dXJuIHRoaXMubGV4ZXIuZ2V0TmV4dFRva2VuKCksIGU7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMucGFyc2VFbGVtZW50QmVzaWRlc0RpcmVjdGl2ZUVuZCgpOwogICAgICAgICAgICAgICAgbiAmJiBlLmFwcGVuZENoaWxkKG4pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3JSZXBvcnQoIlVuY2xvc2VkIGRpcmVjdGl2ZSAiICsgZS5kaXJlY3RpdmVOYW1lKTsKICAgICAgICB9LAogICAgICAgIHBhcnNlRGlyZWN0aXZlQmxvY2tWZXJiYXRpbTogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBmb3IodmFyIHQgPSBbXTsgdGhpcy5sZXhlci5oYXNOZXh0KCk7KXsKICAgICAgICAgICAgICAgIHZhciByMyA9IHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpOwogICAgICAgICAgICAgICAgaWYgKHIzLnR5cGUgPT09IG8udG9rZW5zLmRpcmVjdGl2ZSAmJiByMy5lbmREaXJlY3RpdmUgJiYgdGhpcy5jcmVhdGVEaXJlY3RpdmVOb2RlRnJvbVRva2VuKHIzKS5kaXJlY3RpdmVOYW1lID09PSBlLmRpcmVjdGl2ZU5hbWUpIHJldHVybiB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpLCBlLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlVGV4dE5vZGUodC5qb2luKGBcbmApLCAhMCkpLCBlOwogICAgICAgICAgICAgICAgdC5wdXNoKHRoaXMubGV4ZXIuc3RyZWFtLmdldE5leHRMaW5lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3JSZXBvcnQoIlVuY2xvc2VkIGRpcmVjdGl2ZSAiICsgZS5kaXJlY3RpdmVOYW1lKTsKICAgICAgICB9LAogICAgICAgIHBhcnNlRGlyZWN0aXZlQXJndW1lbnRzOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiBlLnNwbGl0KC9bIF0rLykuZmlsdGVyKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCAmJiB0WzBdICE9PSAiLSI7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgcGFyc2VEaXJlY3RpdmVPcHRpb25zOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiBlLnNwbGl0KC9bIF0rLykuZmlsdGVyKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCAmJiB0WzBdID09PSAiLSI7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgaW50ZXJwcmV0RGlyZWN0aXZlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHN3aXRjaChlLmRpcmVjdGl2ZU5hbWUpewogICAgICAgICAgICAgICAgY2FzZSAib3B0aW9uczoiOgogICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0T3B0aW9uRGlyZWN0aXZlKGUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAidGl0bGU6IjoKICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LnRpdGxlID0gZS5kaXJlY3RpdmVSYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgImF1dGhvcjoiOgogICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuYXV0aG9yID0gZS5kaXJlY3RpdmVSYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgImVtYWlsOiI6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5lbWFpbCA9IGUuZGlyZWN0aXZlUmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuZGlyZWN0aXZlVmFsdWVzW2UuZGlyZWN0aXZlTmFtZV0gPSBlLmRpcmVjdGl2ZVJhd1ZhbHVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBpbnRlcnByZXRPcHRpb25EaXJlY3RpdmU6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgZS5kaXJlY3RpdmVBcmd1bWVudHMuZm9yRWFjaChmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB2YXIgcjQgPSB0LnNwbGl0KCI6Iik7CiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbcjRbMF1dID0gdGhpcy5jb252ZXJ0TGlzcHlWYWx1ZShyNFsxXSk7CiAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydExpc3B5VmFsdWU6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgc3dpdGNoKGUpewogICAgICAgICAgICAgICAgY2FzZSAidCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgY2FzZSAibmlsIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHJldHVybiAvXlswLTldKyQvLnRlc3QoZSkgPyBwYXJzZUludChlKSA6IGU7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBhcnNlUGFyYWdyYXBoOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmxleGVyLnBlZWtOZXh0VG9rZW4oKSwgdCA9IGMuY3JlYXRlUGFyYWdyYXBoKFtdKTsKICAgICAgICAgICAgdGhpcy5zZXROb2RlT3JpZ2luRnJvbVRva2VuKHQsIGUpOwogICAgICAgICAgICBmb3IodmFyIHI0ID0gW107IHRoaXMubGV4ZXIuaGFzTmV4dCgpOyl7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMubGV4ZXIucGVla05leHRUb2tlbigpOwogICAgICAgICAgICAgICAgaWYgKG4udHlwZSAhPT0gby50b2tlbnMubGluZSB8fCBuLmluZGVudGF0aW9uIDwgZS5pbmRlbnRhdGlvbikgYnJlYWs7CiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpLCByNC5wdXNoKG4uY29udGVudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHQuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVUZXh0Tm9kZShyNC5qb2luKGBcbmApKSksIHQ7CiAgICAgICAgfSwKICAgICAgICBwYXJzZVRleHQ6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxleGVyLmdldE5leHRUb2tlbigpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUZXh0Tm9kZSh0LmNvbnRlbnQsIGUpOwogICAgICAgIH0sCiAgICAgICAgY3JlYXRlVGV4dE5vZGU6IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgcmV0dXJuIHQgPyBjLmNyZWF0ZVRleHQobnVsbCwgewogICAgICAgICAgICAgICAgdmFsdWU6IGUKICAgICAgICAgICAgfSkgOiB0aGlzLmlubGluZVBhcnNlci5wYXJzZUVtcGhhc2lzKGUpOwogICAgICAgIH0KICAgIH07CiAgICB4MS5wcm90b3R5cGUub3JpZ2luYWxQYXJzZUVsZW1lbnQgPSB4MS5wcm90b3R5cGUucGFyc2VFbGVtZW50OwogICAgZnVuY3Rpb24gTygpIHsKICAgICAgICB0aGlzLnByZUVtcGhhc2lzID0gYCAJXFwoJyJgLCB0aGlzLnBvc3RFbXBoYXNpcyA9IGAtIAkuLDohPzsnIlxcKWAsIHRoaXMuYm9yZGVyRm9yYmlkZGVuID0gYCAJXHJcbiwiJ2AsIHRoaXMuYm9keVJlZ2V4cCA9ICJbXFxzXFxTXSo/IiwgdGhpcy5tYXJrZXJzID0gIiovXz1+KyIsIHRoaXMuZW1waGFzaXNQYXR0ZXJuID0gdGhpcy5idWlsZEVtcGhhc2lzUGF0dGVybigpLCB0aGlzLmxpbmtQYXR0ZXJuID0gL1xbXFsoW15cXV0qKVxdKD86XFsoW15cXV0qKVxdKT9cXS9nOwogICAgfQogICAgTy5wcm90b3R5cGUgPSB7CiAgICAgICAgcGFyc2VFbXBoYXNpczogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9IHRoaXMuZW1waGFzaXNQYXR0ZXJuOwogICAgICAgICAgICB0Lmxhc3RJbmRleCA9IDA7CiAgICAgICAgICAgIGZvcih2YXIgcjQgPSBbXSwgbiwgaTQgPSAwLCBzOyBuID0gdC5leGVjKGUpOyl7CiAgICAgICAgICAgICAgICB2YXIgYSA9IG5bMF0sIGggPSBuWzFdLCBkID0gblsyXSwgdiA9IG5bM10sIG0gPSBuWzRdOwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBrID0gdC5sYXN0SW5kZXggLSBhLmxlbmd0aCwgeTEgPSBlLnN1YnN0cmluZyhpNCwgayArIGgubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICBzID0gdC5sYXN0SW5kZXgsIHI0LnB1c2godGhpcy5wYXJzZUxpbmsoeTEpKSwgdC5sYXN0SW5kZXggPSBzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIEEgPSBbCiAgICAgICAgICAgICAgICAgICAgYy5jcmVhdGVUZXh0KG51bGwsIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHYKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwgViA9IHRoaXMuZW1waGFzaXplRWxlbWVudEJ5TWFya2VyKEEsIGQpOwogICAgICAgICAgICAgICAgcjQucHVzaChWKSwgaTQgPSB0Lmxhc3RJbmRleCAtIG0ubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAodC5sYXN0SW5kZXggPT09IDAgfHwgdC5sYXN0SW5kZXggIT09IGUubGVuZ3RoIC0gMSkgJiYgcjQucHVzaCh0aGlzLnBhcnNlTGluayhlLnN1YnN0cmluZyhpNCkpKSwgcjQubGVuZ3RoID09PSAxID8gcjRbMF0gOiBjLmNyZWF0ZUlubGluZUNvbnRhaW5lcihyNCk7CiAgICAgICAgfSwKICAgICAgICBkZXB0aDogMCwKICAgICAgICBwYXJzZUxpbms6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxpbmtQYXR0ZXJuOwogICAgICAgICAgICB0Lmxhc3RJbmRleCA9IDA7CiAgICAgICAgICAgIGZvcih2YXIgcjQsIG4gPSBbXSwgaTQgPSAwLCBzOyByNCA9IHQuZXhlYyhlKTspewogICAgICAgICAgICAgICAgdmFyIGEgPSByNFswXSwgaCA9IHI0WzFdLCBkID0gcjRbMl0sIHYgPSB0Lmxhc3RJbmRleCAtIGEubGVuZ3RoLCBtID0gZS5zdWJzdHJpbmcoaTQsIHYpOwogICAgICAgICAgICAgICAgbi5wdXNoKGMuY3JlYXRlVGV4dChudWxsLCB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG0KICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHZhciBrID0gYy5jcmVhdGVMaW5rKFtdKTsKICAgICAgICAgICAgICAgIGsuc3JjID0gaCwgZCA/IChzID0gdC5sYXN0SW5kZXgsIGsuYXBwZW5kQ2hpbGQodGhpcy5wYXJzZUVtcGhhc2lzKGQpKSwgdC5sYXN0SW5kZXggPSBzKSA6IGsuYXBwZW5kQ2hpbGQoYy5jcmVhdGVUZXh0KG51bGwsIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaAogICAgICAgICAgICAgICAgfSkpLCBuLnB1c2goayksIGk0ID0gdC5sYXN0SW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICh0Lmxhc3RJbmRleCA9PT0gMCB8fCB0Lmxhc3RJbmRleCAhPT0gZS5sZW5ndGggLSAxKSAmJiBuLnB1c2goYy5jcmVhdGVUZXh0KG51bGwsIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBlLnN1YnN0cmluZyhpNCkKICAgICAgICAgICAgfSkpLCBjLmNyZWF0ZUlubGluZUNvbnRhaW5lcihuKTsKICAgICAgICB9LAogICAgICAgIGVtcGhhc2l6ZUVsZW1lbnRCeU1hcmtlcjogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICBzd2l0Y2godCl7CiAgICAgICAgICAgICAgICBjYXNlICIqIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5jcmVhdGVCb2xkKGUpOwogICAgICAgICAgICAgICAgY2FzZSAiLyI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY3JlYXRlSXRhbGljKGUpOwogICAgICAgICAgICAgICAgY2FzZSAiXyI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY3JlYXRlVW5kZXJsaW5lKGUpOwogICAgICAgICAgICAgICAgY2FzZSAiPSI6CiAgICAgICAgICAgICAgICBjYXNlICJ+IjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5jcmVhdGVDb2RlKGUpOwogICAgICAgICAgICAgICAgY2FzZSAiKyI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY3JlYXRlRGFzaGVkKGUpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBidWlsZEVtcGhhc2lzUGF0dGVybjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCIoWyIgKyB0aGlzLnByZUVtcGhhc2lzICsgYF18Xnxccj9cbikoW2AgKyB0aGlzLm1hcmtlcnMgKyAiXSkoW14iICsgdGhpcy5ib3JkZXJGb3JiaWRkZW4gKyAiXXxbXiIgKyB0aGlzLmJvcmRlckZvcmJpZGRlbiArICJdIiArIHRoaXMuYm9keVJlZ2V4cCArICJbXiIgKyB0aGlzLmJvcmRlckZvcmJpZGRlbiArICJdKVxcMihbIiArIHRoaXMucG9zdEVtcGhhc2lzICsgYF18JHxccj9cbilgLCAiZyIpOwogICAgICAgIH0KICAgIH07CiAgICB0eXBlb2YgTiAhPSAidW5kZWZpbmVkIiAmJiAoTi5QYXJzZXIgPSB4MSwgTi5JbmxpbmVQYXJzZXIgPSBPKTsKfSk7CnZhciBVID0gZygoSSk9PnsKICAgIHZhciBsID0gYigpLk5vZGU7CiAgICBmdW5jdGlvbiBNKCkgewogICAgfQogICAgTS5wcm90b3R5cGUgPSB7CiAgICAgICAgZXhwb3J0T3B0aW9uczogewogICAgICAgICAgICBoZWFkZXJPZmZzZXQ6IDEsCiAgICAgICAgICAgIGV4cG9ydEZyb21MaW5lTnVtYmVyOiAhMSwKICAgICAgICAgICAgc3VwcHJlc3NTdWJTY3JpcHRIYW5kbGluZzogITEsCiAgICAgICAgICAgIHN1cHByZXNzQXV0b0xpbms6ICExLAogICAgICAgICAgICB0cmFuc2xhdGVTeW1ib2xBcnJvdzogITEsCiAgICAgICAgICAgIHN1cHByZXNzQ2hlY2tib3hIYW5kbGluZzogITEsCiAgICAgICAgICAgIGN1c3RvbURpcmVjdGl2ZUhhbmRsZXI6IG51bGwsCiAgICAgICAgICAgIGh0bWxDbGFzc1ByZWZpeDogbnVsbCwKICAgICAgICAgICAgaHRtbElkUHJlZml4OiBudWxsCiAgICAgICAgfSwKICAgICAgICB1bnRpdGxlZDogIlVudGl0bGVkIiwKICAgICAgICByZXN1bHQ6IG51bGwsCiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICB0aGlzLm9yZ0RvY3VtZW50ID0gZSwgdGhpcy5kb2N1bWVudE9wdGlvbnMgPSBlLm9wdGlvbnMgfHwgewogICAgICAgICAgICB9LCB0aGlzLmV4cG9ydE9wdGlvbnMgPSB0IHx8IHsKICAgICAgICAgICAgfSwgdGhpcy5oZWFkZXJzID0gW10sIHRoaXMuaGVhZGVyT2Zmc2V0ID0gdHlwZW9mIHRoaXMuZXhwb3J0T3B0aW9ucy5oZWFkZXJPZmZzZXQgPT0gIm51bWJlciIgPyB0aGlzLmV4cG9ydE9wdGlvbnMuaGVhZGVyT2Zmc2V0IDogMSwgdGhpcy5zZWN0aW9uTnVtYmVycyA9IFsKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgXTsKICAgICAgICB9LAogICAgICAgIGNyZWF0ZVRvY0l0ZW06IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHI0ID0gW107CiAgICAgICAgICAgIHI0LnBhcmVudCA9IHQ7CiAgICAgICAgICAgIHZhciBuID0gewogICAgICAgICAgICAgICAgaGVhZGVyTm9kZTogZSwKICAgICAgICAgICAgICAgIGNoaWxkVG9jczogcjQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfSwKICAgICAgICBjb21wdXRlVG9jOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHR5cGVvZiBlICE9ICJudW1iZXIiICYmIChlID0gSW5maW5pdHkpOwogICAgICAgICAgICB2YXIgdCA9IFtdOwogICAgICAgICAgICB0LnBhcmVudCA9IG51bGw7CiAgICAgICAgICAgIGZvcih2YXIgcjQgPSAxLCBuID0gdCwgaTQgPSAwOyBpNCA8IHRoaXMuaGVhZGVycy5sZW5ndGg7ICsraTQpewogICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLmhlYWRlcnNbaTRdOwogICAgICAgICAgICAgICAgaWYgKCEocy5sZXZlbCA+IGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBzLmxldmVsIC0gcjQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPiAwKSBmb3IodmFyIGggPSAwOyBoIDwgYTsgKytoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4ubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGwuY3JlYXRlSGVhZGVyKFtdLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHI0ICsgaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNlY3Rpb25OdW1iZXJUZXh0ID0gIiIsIG4ucHVzaCh0aGlzLmNyZWF0ZVRvY0l0ZW0oZCwgbikpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuW24ubGVuZ3RoIC0gMV0uY2hpbGRUb2NzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhIDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICBhID0gLWE7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgdiA9IDA7IHYgPCBhOyArK3YpbiA9IG4ucGFyZW50OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBuLnB1c2godGhpcy5jcmVhdGVUb2NJdGVtKHMsIG4pKSwgcjQgPSBzLmxldmVsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgIH0sCiAgICAgICAgY29udmVydE5vZGU6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHI0IHx8IChlLnR5cGUgPT09IGwudHlwZXMuZGlyZWN0aXZlID8gKGUuZGlyZWN0aXZlTmFtZSA9PT0gImV4YW1wbGUiIHx8IGUuZGlyZWN0aXZlTmFtZSA9PT0gInNyYyIpICYmIChyNCA9ICEwKSA6IGUudHlwZSA9PT0gbC50eXBlcy5wcmVmb3JtYXR0ZWQgJiYgKHI0ID0gITApKSwgdHlwZW9mIGUgPT0gInN0cmluZyIgJiYgKGUgPSBsLmNyZWF0ZVRleHQobnVsbCwgewogICAgICAgICAgICAgICAgdmFsdWU6IGUKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB2YXIgbiA9IGUuY2hpbGRyZW4gPyB0aGlzLmNvbnZlcnROb2Rlc0ludGVybmFsKGUuY2hpbGRyZW4sIHQsIHI0KSA6ICIiLCBpNCwgcyA9IHRoaXMuY29tcHV0ZUF1eERhdGFGb3JOb2RlKGUpOwogICAgICAgICAgICBzd2l0Y2goZS50eXBlKXsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy5oZWFkZXI6CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIG4uaW5kZXhPZigiVE9ETyAiKSA9PT0gMCA/IGEgPSAidG9kbyIgOiBuLmluZGV4T2YoIkRPTkUgIikgPT09IDAgJiYgKGEgPSAiZG9uZSIpOwogICAgICAgICAgICAgICAgICAgIHZhciBoID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBpZiAodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGUubGV2ZWwsIHYgPSB0aGlzLnNlY3Rpb25OdW1iZXJzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPiB2KSBmb3IodmFyIG0gPSBkIC0gdiwgayA9IDA7IGsgPCBtOyArK2spdGhpcy5zZWN0aW9uTnVtYmVyc1tkIC0gMSAtIGtdID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkIDwgdiAmJiAodGhpcy5zZWN0aW9uTnVtYmVycy5sZW5ndGggPSBkKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uTnVtYmVyc1tkIC0gMV0rKywgaCA9IHRoaXMuc2VjdGlvbk51bWJlcnMuam9pbigiLiIpLCBlLnNlY3Rpb25OdW1iZXJUZXh0ID0gaDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRIZWFkZXIoZSwgbiwgcywgYSwgaCksIHQgJiYgdGhpcy5oZWFkZXJzLnB1c2goZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMub3JkZXJlZExpc3Q6CiAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRPcmRlcmVkTGlzdChlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy51bm9yZGVyZWRMaXN0OgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0VW5vcmRlcmVkTGlzdChlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy5kZWZpbml0aW9uTGlzdDoKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydERlZmluaXRpb25MaXN0KGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBsLnR5cGVzLmxpc3RFbGVtZW50OgogICAgICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmaW5pdGlvbkxpc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gdGhpcy5jb252ZXJ0Tm9kZXNJbnRlcm5hbChlLnRlcm0sIHQsIHI0KTsKICAgICAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnREZWZpbml0aW9uSXRlbShlLCBuLCBzLCB5Miwgbik7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGk0ID0gdGhpcy5jb252ZXJ0TGlzdEl0ZW0oZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMucGFyYWdyYXBoOgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0UGFyYWdyYXBoKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBsLnR5cGVzLnByZWZvcm1hdHRlZDoKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydFByZWZvcm1hdHRlZChlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy50YWJsZToKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydFRhYmxlKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBsLnR5cGVzLnRhYmxlUm93OgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0VGFibGVSb3coZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMudGFibGVDZWxsOgogICAgICAgICAgICAgICAgICAgIGUuaXNIZWFkZXIgPyBpNCA9IHRoaXMuY29udmVydFRhYmxlSGVhZGVyKGUsIG4sIHMpIDogaTQgPSB0aGlzLmNvbnZlcnRUYWJsZUNlbGwoZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMuaG9yaXpvbnRhbFJ1bGU6CiAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRIb3Jpem9udGFsUnVsZShlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy5pbmxpbmVDb250YWluZXI6CiAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRJbmxpbmVDb250YWluZXIoZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMuYm9sZDoKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydEJvbGQoZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMuaXRhbGljOgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0SXRhbGljKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBsLnR5cGVzLnVuZGVybGluZToKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydFVuZGVybGluZShlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy5jb2RlOgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0Q29kZShlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy5kYXNoZWQ6CiAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnREYXNoZWQoZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMubGluazoKICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydExpbmsoZSwgbiwgcyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGwudHlwZXMuZGlyZWN0aXZlOgogICAgICAgICAgICAgICAgICAgIHN3aXRjaChlLmRpcmVjdGl2ZU5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJxdW90ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydFF1b3RlKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImV4YW1wbGUiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRFeGFtcGxlKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInNyYyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpNCA9IHRoaXMuY29udmVydFNyYyhlLCBuLCBzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJodG1sIjoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiaHRtbDoiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaTQgPSB0aGlzLmNvbnZlcnRIVE1MKGUsIG4sIHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydE9wdGlvbnMuY3VzdG9tRGlyZWN0aXZlSGFuZGxlciAmJiB0aGlzLmV4cG9ydE9wdGlvbnMuY3VzdG9tRGlyZWN0aXZlSGFuZGxlcltlLmRpcmVjdGl2ZU5hbWVdID8gaTQgPSB0aGlzLmV4cG9ydE9wdGlvbnMuY3VzdG9tRGlyZWN0aXZlSGFuZGxlcltlLmRpcmVjdGl2ZU5hbWVdKGUsIG4sIHMpIDogaTQgPSBuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgbC50eXBlcy50ZXh0OgogICAgICAgICAgICAgICAgICAgIGk0ID0gdGhpcy5jb252ZXJ0VGV4dChlLnZhbHVlLCByNCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCJVbmtub3duIG5vZGUgdHlwZTogIiArIGUudHlwZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBvc3RQcm9jZXNzID09ICJmdW5jdGlvbiIgJiYgKGk0ID0gdGhpcy5wb3N0UHJvY2VzcyhlLCBpNCwgcjQpKSwgaTQ7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0VGV4dDogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICB2YXIgcjQgPSB0aGlzLmVzY2FwZVNwZWNpYWxDaGFycyhlLCB0KTsKICAgICAgICAgICAgcmV0dXJuICF0aGlzLmV4cG9ydE9wdGlvbnMuc3VwcHJlc3NTdWJTY3JpcHRIYW5kbGluZyAmJiAhdCAmJiAocjQgPSB0aGlzLm1ha2VTdWJzY3JpcHRzKHI0LCB0KSksIHRoaXMuZXhwb3J0T3B0aW9ucy5zdXBwcmVzc0F1dG9MaW5rIHx8IChyNCA9IHRoaXMubGlua1VSTChyNCkpLCByNDsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRIVE1MOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnROb2Rlc0ludGVybmFsOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICBmb3IodmFyIG4gPSBbXSwgaTQgPSAwOyBpNCA8IGUubGVuZ3RoOyArK2k0KXsKICAgICAgICAgICAgICAgIHZhciBzID0gZVtpNF0sIGEgPSB0aGlzLmNvbnZlcnROb2RlKHMsIHQsIHI0KTsKICAgICAgICAgICAgICAgIG4ucHVzaChhKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5jb21iaW5lTm9kZXNUZXh0cyhuKTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRIZWFkZXJCbG9jazogZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICB0aHJvdyBFcnJvcigiY29udmVydEhlYWRlckJsb2NrIGlzIG5vdCBpbXBsZW1lbnRlZCIpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydEhlYWRlclRyZWU6IGZ1bmN0aW9uKGUsIHQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEhlYWRlckJsb2NrKGUsIHQpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydE5vZGVzVG9IZWFkZXJUcmVlOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICB2YXIgbiA9IFtdLCBpNCA9IFtdOwogICAgICAgICAgICB0eXBlb2YgdCA9PSAidW5kZWZpbmVkIiAmJiAodCA9IDApLCB0eXBlb2YgcjQgPT0gInVuZGVmaW5lZCIgJiYgKHI0ID0gbnVsbCk7CiAgICAgICAgICAgIGZvcih2YXIgcyA9IHQ7IHMgPCBlLmxlbmd0aDspewogICAgICAgICAgICAgICAgdmFyIGEgPSBlW3NdLCBoID0gYS50eXBlID09PSBsLnR5cGVzLmhlYWRlcjsKICAgICAgICAgICAgICAgIGlmICghaCkgewogICAgICAgICAgICAgICAgICAgIGk0LnB1c2goYSksIHMgPSBzICsgMTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyNCAmJiBhLmxldmVsIDw9IHI0LmxldmVsKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciBkID0gdGhpcy5jb252ZXJ0Tm9kZXNUb0hlYWRlclRyZWUoZSwgcyArIDEsIGEpOwogICAgICAgICAgICAgICAgbi5wdXNoKGQpLCBzID0gZC5uZXh0SW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGhlYWRlcjogcjQsCiAgICAgICAgICAgICAgICBjaGlsZE5vZGVzOiBpNCwKICAgICAgICAgICAgICAgIG5leHRJbmRleDogcywKICAgICAgICAgICAgICAgIGNoaWxkQmxvY2tzOiBuCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0Tm9kZXM6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnROb2Rlc0ludGVybmFsKGUsIHQsIHI0KTsKICAgICAgICB9LAogICAgICAgIGNvbWJpbmVOb2Rlc1RleHRzOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiBlLmpvaW4oIiIpOwogICAgICAgIH0sCiAgICAgICAgZ2V0Tm9kZVRleHRDb250ZW50OiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiBlLnR5cGUgPT09IGwudHlwZXMudGV4dCA/IHRoaXMuZXNjYXBlU3BlY2lhbENoYXJzKGUudmFsdWUpIDogZS5jaGlsZHJlbiA/IGUuY2hpbGRyZW4ubWFwKHRoaXMuZ2V0Tm9kZVRleHRDb250ZW50LCB0aGlzKS5qb2luKCIiKSA6ICIiOwogICAgICAgIH0sCiAgICAgICAgZXNjYXBlU3BlY2lhbENoYXJzOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHRocm93IEVycm9yKCJJbXBsZW1lbnQgZXNjYXBlU3BlY2lhbENoYXJzIik7CiAgICAgICAgfSwKICAgICAgICB1cmxQYXR0ZXJuOiAvXGIoPzpodHRwcz86XC9cL3x3d3dcZHswLDN9Wy5dfFthLXowLTkuXC1dK1suXVthLXpdezIsNH1cLykoPzpbXlxzKCk8Pl0rfFwoKFteXHMoKTw+XSt8KFwoW15ccygpPD5dK1wpKSkqXCkpKyg/OlwoKFteXHMoKTw+XSt8KFwoW15ccygpPD5dK1wpKSkqXCl8W15cc2AhKClcW1xde307OiciLiw8Pj/Cq8K74oCc4oCd4oCY4oCZXSkvaWcsCiAgICAgICAgbGlua1VSTDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9IHRoaXM7CiAgICAgICAgICAgIHJldHVybiBlLnJlcGxhY2UodGhpcy51cmxQYXR0ZXJuLCBmdW5jdGlvbihyNCkgewogICAgICAgICAgICAgICAgcmV0dXJuIChyNC5pbmRleE9mKCI6Ly8iKSA8IDAgJiYgKHI0ID0gImh0dHA6Ly8iICsgcjQpLCB0Lm1ha2VMaW5rKHI0KSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgbWFrZUxpbms6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdGhyb3cgRXJyb3IoIkltcGxlbWVudCBtYWtlTGluayIpOwogICAgICAgIH0sCiAgICAgICAgbWFrZVN1YnNjcmlwdHM6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRPcHRpb25zWyJeIl0gPT09ICJ7fSIgPyBlLnJlcGxhY2UoL1xiKFteXyBcdF0qKV97KFtefV0qKX0vZywgdGhpcy5tYWtlU3Vic2NyaXB0KSA6IHRoaXMuZG9jdW1lbnRPcHRpb25zWyJeIl0gPyBlLnJlcGxhY2UoL1xiKFteXyBcdF0qKV8oW15fXSopXGIvZywgdGhpcy5tYWtlU3Vic2NyaXB0KSA6IGU7CiAgICAgICAgfSwKICAgICAgICBtYWtlU3Vic2NyaXB0OiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICB0aHJvdyBFcnJvcigiSW1wbGVtZW50IG1ha2VTdWJzY3JpcHQiKTsKICAgICAgICB9LAogICAgICAgIHN0cmlwUGFyYW1ldGVyc0Zyb21VUkw6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvXD8uKiQvLCAiIik7CiAgICAgICAgfSwKICAgICAgICBpbWFnZUV4dGVuc2lvblBhdHRlcm46IG5ldyBSZWdFeHAoIigiICsgWwogICAgICAgICAgICAiYm1wIiwKICAgICAgICAgICAgInBuZyIsCiAgICAgICAgICAgICJqcGVnIiwKICAgICAgICAgICAgImpwZyIsCiAgICAgICAgICAgICJnaWYiLAogICAgICAgICAgICAidGlmZiIsCiAgICAgICAgICAgICJ0aWYiLAogICAgICAgICAgICAieGJtIiwKICAgICAgICAgICAgInhwbSIsCiAgICAgICAgICAgICJwYm0iLAogICAgICAgICAgICAicGdtIiwKICAgICAgICAgICAgInBwbSIsCiAgICAgICAgICAgICJzdmciCiAgICAgICAgXS5qb2luKCJ8IikgKyAiKSQiLCAiaSIpCiAgICB9OwogICAgdHlwZW9mIEkgIT0gInVuZGVmaW5lZCIgJiYgKEkuQ29udmVydGVyID0gTSk7Cn0pOwp2YXIgXyA9IGcoKCQpPT57CiAgICB2YXIgZWUgPSBVKCkuQ29udmVydGVyLCB6ID0gYigpLk5vZGU7CiAgICBmdW5jdGlvbiBxKGUsIHQpIHsKICAgICAgICB0aGlzLmluaXRpYWxpemUoZSwgdCksIHRoaXMucmVzdWx0ID0gdGhpcy5jb252ZXJ0KCk7CiAgICB9CiAgICBxLnByb3RvdHlwZSA9IHsKICAgICAgICBfX3Byb3RvX186IGVlLnByb3RvdHlwZSwKICAgICAgICBjb252ZXJ0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm9yZ0RvY3VtZW50LnRpdGxlID8gdGhpcy5jb252ZXJ0Tm9kZSh0aGlzLm9yZ0RvY3VtZW50LnRpdGxlKSA6IHRoaXMudW50aXRsZWQsIHQgPSB0aGlzLnRhZygiaCIgKyBNYXRoLm1heChOdW1iZXIodGhpcy5oZWFkZXJPZmZzZXQpLCAxKSwgZSksIHI0ID0gdGhpcy5jb252ZXJ0Tm9kZXModGhpcy5vcmdEb2N1bWVudC5ub2RlcywgITApLCBuID0gdGhpcy5jb21wdXRlVG9jKHRoaXMuZG9jdW1lbnRPcHRpb25zLnRvYyksIGk0ID0gdGhpcy50b2NUb0hUTUwobik7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB0aXRsZTogZSwKICAgICAgICAgICAgICAgIHRpdGxlSFRNTDogdCwKICAgICAgICAgICAgICAgIGNvbnRlbnRIVE1MOiByNCwKICAgICAgICAgICAgICAgIHRvY0hUTUw6IGk0LAogICAgICAgICAgICAgICAgdG9jOiBuLAogICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICsgaTQgKyBgXG5gICsgcjQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0b2NUb0hUTUw6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgZnVuY3Rpb24gdChyNCkgewogICAgICAgICAgICAgICAgZm9yKHZhciBuID0gIiIsIGk0ID0gMDsgaTQgPCByNC5sZW5ndGg7ICsraTQpewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gcjRbaTRdLCBhID0gcy5oZWFkZXJOb2RlLnNlY3Rpb25OdW1iZXJUZXh0LCBoID0gdGhpcy5kb2N1bWVudE9wdGlvbnMubnVtID8gdGhpcy5pbmxpbmVUYWcoInNwYW4iLCBhLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAic2VjdGlvbi1udW1iZXIiCiAgICAgICAgICAgICAgICAgICAgfSkgOiAiIiwgZCA9IHRoaXMuZ2V0Tm9kZVRleHRDb250ZW50KHMuaGVhZGVyTm9kZSksIHYgPSB0aGlzLmlubGluZVRhZygiYSIsIGggKyBkLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICIjaGVhZGVyLSIgKyBhLnJlcGxhY2UoL1wuL2csICItIikKICAgICAgICAgICAgICAgICAgICB9KSwgbSA9IHMuY2hpbGRUb2NzLmxlbmd0aCA/IHQuY2FsbCh0aGlzLCBzLmNoaWxkVG9jcykgOiAiIjsKICAgICAgICAgICAgICAgICAgICBuICs9IHRoaXMudGFnKCJsaSIsIHYgKyBtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZygidWwiLCBuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIGUpOwogICAgICAgIH0sCiAgICAgICAgY29tcHV0ZUF1eERhdGFGb3JOb2RlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGZvcig7IGUucGFyZW50ICYmIGUucGFyZW50LnR5cGUgPT09IHoudHlwZXMuaW5saW5lQ29udGFpbmVyOyllID0gZS5wYXJlbnQ7CiAgICAgICAgICAgIGZvcih2YXIgdCA9IGUucHJldmlvdXNTaWJsaW5nLCByNCA9ICIiOyB0ICYmIHQudHlwZSA9PT0gei50eXBlcy5kaXJlY3RpdmUgJiYgdC5kaXJlY3RpdmVOYW1lID09PSAiYXR0cl9odG1sOiI7KXI0ICs9IHQuZGlyZWN0aXZlUmF3VmFsdWUgKyAiICIsIHQgPSB0LnByZXZpb3VzU2libGluZzsKICAgICAgICAgICAgcmV0dXJuIHI0OwogICAgICAgIH0sCiAgICAgICAgb3JnQ2xhc3NOYW1lOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydE9wdGlvbnMuaHRtbENsYXNzUHJlZml4ID8gdGhpcy5leHBvcnRPcHRpb25zLmh0bWxDbGFzc1ByZWZpeCArIGUgOiBlOwogICAgICAgIH0sCiAgICAgICAgb3JnSWQ6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0T3B0aW9ucy5odG1sSWRQcmVmaXggPyB0aGlzLmV4cG9ydE9wdGlvbnMuaHRtbElkUHJlZml4ICsgZSA6IGU7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0SGVhZGVyOiBmdW5jdGlvbihlLCB0LCByNCwgbiwgaTQpIHsKICAgICAgICAgICAgdmFyIHMgPSB7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBuICYmICh0ID0gdGhpcy5pbmxpbmVUYWcoInNwYW4iLCB0LnN1YnN0cmluZygwLCA0KSwgewogICAgICAgICAgICAgICAgY2xhc3M6ICJ0YXNrLXN0YXR1cyAiICsgbgogICAgICAgICAgICB9KSArIHQuc3Vic3RyaW5nKDUpKSwgaTQgJiYgKHQgPSB0aGlzLmlubGluZVRhZygic3BhbiIsIGk0LCB7CiAgICAgICAgICAgICAgICBjbGFzczogInNlY3Rpb24tbnVtYmVyIgogICAgICAgICAgICB9KSArIHQsIHMuaWQgPSAiaGVhZGVyLSIgKyBpNC5yZXBsYWNlKC9cLi9nLCAiLSIpKSwgbiAmJiAocy5jbGFzcyA9ICJ0YXNrLXN0YXR1cyAiICsgbiksIHRoaXMudGFnKCJoIiArICh0aGlzLmhlYWRlck9mZnNldCArIGUubGV2ZWwpLCB0LCBzLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0T3JkZXJlZExpc3Q6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZygib2wiLCB0LCBudWxsLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0VW5vcmRlcmVkTGlzdDogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJ1bCIsIHQsIG51bGwsIHI0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnREZWZpbml0aW9uTGlzdDogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJkbCIsIHQsIG51bGwsIHI0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnREZWZpbml0aW9uSXRlbTogZnVuY3Rpb24oZSwgdCwgcjQsIG4sIGk0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZygiZHQiLCBuKSArIHRoaXMudGFnKCJkZCIsIGk0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRMaXN0SXRlbTogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgaWYgKHRoaXMuZXhwb3J0T3B0aW9ucy5zdXBwcmVzc0NoZWNrYm94SGFuZGxpbmcpIHJldHVybiB0aGlzLnRhZygibGkiLCB0LCBudWxsLCByNCk7CiAgICAgICAgICAgIHZhciBuID0gewogICAgICAgICAgICB9LCBpNCA9IHQ7CiAgICAgICAgICAgIGlmICgvXlxzKlxbKFh8IHwtKVxdKFtcc1xTXSopLy5leGVjKGk0KSkgewogICAgICAgICAgICAgICAgaTQgPSBSZWdFeHAuJDI7CiAgICAgICAgICAgICAgICB2YXIgcyA9IFJlZ0V4cC4kMSwgYSA9IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiY2hlY2tib3giCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgc3dpdGNoKHMpewogICAgICAgICAgICAgICAgICAgIGNhc2UgIlgiOgogICAgICAgICAgICAgICAgICAgICAgICBhLmNoZWNrZWQgPSAidHJ1ZSIsIG5bImRhdGEtY2hlY2tib3gtc3RhdHVzIl0gPSAiZG9uZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgIi0iOgogICAgICAgICAgICAgICAgICAgICAgICBuWyJkYXRhLWNoZWNrYm94LXN0YXR1cyJdID0gImludGVybWVkaWF0ZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIG5bImRhdGEtY2hlY2tib3gtc3RhdHVzIl0gPSAidW5kb25lIjsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpNCA9IHRoaXMuaW5saW5lVGFnKCJpbnB1dCIsIG51bGwsIGEpICsgaTQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJsaSIsIGk0LCBuLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0UGFyYWdyYXBoOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50YWcoInAiLCB0LCBudWxsLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0UHJlZm9ybWF0dGVkOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50YWcoInByZSIsIHQsIG51bGwsIHI0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRUYWJsZTogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJ0YWJsZSIsIHRoaXMudGFnKCJ0Ym9keSIsIHQpLCBudWxsLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0VGFibGVSb3c6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZygidHIiLCB0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRUYWJsZUhlYWRlcjogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJ0aCIsIHQpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydFRhYmxlQ2VsbDogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJ0ZCIsIHQpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydEhvcml6b250YWxSdWxlOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50YWcoImhyIiwgbnVsbCwgbnVsbCwgcjQpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydElubGluZUNvbnRhaW5lcjogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0Qm9sZDogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5saW5lVGFnKCJiIiwgdCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0SXRhbGljOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5pbmxpbmVUYWcoImkiLCB0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRVbmRlcmxpbmU6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmlubGluZVRhZygic3BhbiIsIHQsIHsKICAgICAgICAgICAgICAgIHN0eWxlOiAidGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsiCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgY29udmVydENvZGU6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmlubGluZVRhZygiY29kZSIsIHQpOwogICAgICAgIH0sCiAgICAgICAgY29udmVydERhc2hlZDogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5saW5lVGFnKCJkZWwiLCB0KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRMaW5rOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICB2YXIgbiA9IHRoaXMuc3RyaXBQYXJhbWV0ZXJzRnJvbVVSTChlLnNyYyk7CiAgICAgICAgICAgIGlmICh0aGlzLmltYWdlRXh0ZW5zaW9uUGF0dGVybi5leGVjKG4pKSB7CiAgICAgICAgICAgICAgICB2YXIgaTQgPSB0aGlzLmdldE5vZGVUZXh0Q29udGVudChlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlubGluZVRhZygiaW1nIiwgbnVsbCwgewogICAgICAgICAgICAgICAgICAgIHNyYzogZS5zcmMsCiAgICAgICAgICAgICAgICAgICAgYWx0OiBpNCwKICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTQKICAgICAgICAgICAgICAgIH0sIHI0KTsKICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0aGlzLmlubGluZVRhZygiYSIsIHQsIHsKICAgICAgICAgICAgICAgIGhyZWY6IGUuc3JjCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgY29udmVydFF1b3RlOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy50YWcoImJsb2NrcXVvdGUiLCB0LCBudWxsLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0RXhhbXBsZTogZnVuY3Rpb24oZSwgdCwgcjQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnKCJwcmUiLCB0LCBudWxsLCByNCk7CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0U3JjOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICB2YXIgbiA9IGUuZGlyZWN0aXZlQXJndW1lbnRzLmxlbmd0aCA/IGUuZGlyZWN0aXZlQXJndW1lbnRzWzBdIDogInVua25vd24iOwogICAgICAgICAgICByZXR1cm4gdCA9IHRoaXMudGFnKCJjb2RlIiwgdCwgewogICAgICAgICAgICAgICAgY2xhc3M6ICJsYW5ndWFnZS0iICsgbgogICAgICAgICAgICB9LCByNCksIHRoaXMudGFnKCJwcmUiLCB0LCB7CiAgICAgICAgICAgICAgICBjbGFzczogInByZXR0eXByaW50IgogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRIVE1MOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gZS5kaXJlY3RpdmVOYW1lID09PSAiaHRtbDoiID8gZS5kaXJlY3RpdmVSYXdWYWx1ZSA6IGUuZGlyZWN0aXZlTmFtZSA9PT0gImh0bWwiID8gZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgcmV0dXJuIG4udmFsdWU7CiAgICAgICAgICAgIH0pLmpvaW4oYFxuYCkgOiB0OwogICAgICAgIH0sCiAgICAgICAgY29udmVydEhlYWRlckJsb2NrOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICB0ID0gdCB8fCAwLCByNCA9IHI0IHx8IDA7CiAgICAgICAgICAgIHZhciBuID0gW10sIGk1ID0gZS5oZWFkZXI7CiAgICAgICAgICAgIGk1ICYmIG4ucHVzaCh0aGlzLmNvbnZlcnROb2RlKGk1KSk7CiAgICAgICAgICAgIHZhciBzID0gdGhpcy5jb252ZXJ0Tm9kZXMoZS5jaGlsZE5vZGVzKTsKICAgICAgICAgICAgbi5wdXNoKHMpOwogICAgICAgICAgICB2YXIgYSA9IGUuY2hpbGRCbG9ja3MubWFwKGZ1bmN0aW9uKGQsIHYpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRIZWFkZXJCbG9jayhkLCB0ICsgMSwgdik7CiAgICAgICAgICAgIH0sIHRoaXMpLmpvaW4oYFxuYCk7CiAgICAgICAgICAgIG4ucHVzaChhKTsKICAgICAgICAgICAgdmFyIGggPSBuLmpvaW4oYFxuYCk7CiAgICAgICAgICAgIHJldHVybiBpNSA/IHRoaXMudGFnKCJzZWN0aW9uIiwgYFxuYCArIG4uam9pbihgXG5gKSwgewogICAgICAgICAgICAgICAgY2xhc3M6ICJibG9jayBibG9jay1sZXZlbC0iICsgdAogICAgICAgICAgICB9KSA6IGg7CiAgICAgICAgfSwKICAgICAgICByZXBsYWNlTWFwOiB7CiAgICAgICAgICAgICImIjogWwogICAgICAgICAgICAgICAgIiYjMzg7IiwKICAgICAgICAgICAgICAgIG51bGwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgIjwiOiBbCiAgICAgICAgICAgICAgICAiJiM2MDsiLAogICAgICAgICAgICAgICAgbnVsbAogICAgICAgICAgICBdLAogICAgICAgICAgICAiPiI6IFsKICAgICAgICAgICAgICAgICImIzYyOyIsCiAgICAgICAgICAgICAgICBudWxsCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICciJzogWwogICAgICAgICAgICAgICAgIiYjMzQ7IiwKICAgICAgICAgICAgICAgIG51bGwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgIiciOiBbCiAgICAgICAgICAgICAgICAiJiMzOTsiLAogICAgICAgICAgICAgICAgbnVsbAogICAgICAgICAgICBdLAogICAgICAgICAgICAiLT4iOiBbCiAgICAgICAgICAgICAgICAiJiMxMDEzMjsiLAogICAgICAgICAgICAgICAgZnVuY3Rpb24oZSwgdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cG9ydE9wdGlvbnMudHJhbnNsYXRlU3ltYm9sQXJyb3cgJiYgIXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHJlcGxhY2VSZWdleHA6IG51bGwsCiAgICAgICAgZXNjYXBlU3BlY2lhbENoYXJzOiBmdW5jdGlvbihlLCB0KSB7CiAgICAgICAgICAgIHRoaXMucmVwbGFjZVJlZ2V4cCB8fCAodGhpcy5yZXBsYWNlUmVnZXhwID0gbmV3IFJlZ0V4cChPYmplY3Qua2V5cyh0aGlzLnJlcGxhY2VNYXApLmpvaW4oInwiKSwgImciKSk7CiAgICAgICAgICAgIHZhciByNCA9IHRoaXMucmVwbGFjZU1hcCwgbiA9IHRoaXM7CiAgICAgICAgICAgIHJldHVybiBlLnJlcGxhY2UodGhpcy5yZXBsYWNlUmVnZXhwLCBmdW5jdGlvbihpNSkgewogICAgICAgICAgICAgICAgaWYgKCFyNFtpNV0pIHRocm93IEVycm9yKCJlc2NhcGVTcGVjaWFsQ2hhcnM6IEludmFsaWQgbWF0Y2giKTsKICAgICAgICAgICAgICAgIHZhciBzID0gcjRbaTVdWzFdOwogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzID09ICJmdW5jdGlvbiIgJiYgIXMuY2FsbChuLCBlLCB0KSA/IGk1IDogcjRbaTVdWzBdOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHBvc3RQcm9jZXNzOiBmdW5jdGlvbihlLCB0LCByNCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5leHBvcnRPcHRpb25zLmV4cG9ydEZyb21MaW5lTnVtYmVyICYmIHR5cGVvZiBlLmZyb21MaW5lTnVtYmVyID09ICJudW1iZXIiICYmICh0ID0gdGhpcy5pbmxpbmVUYWcoImRpdiIsIHQsIHsKICAgICAgICAgICAgICAgICJkYXRhLWxpbmUtbnVtYmVyIjogZS5mcm9tTGluZU51bWJlcgogICAgICAgICAgICB9KSksIHQ7CiAgICAgICAgfSwKICAgICAgICBtYWtlTGluazogZnVuY3Rpb24oZSkgewogICAgICAgICAgICByZXR1cm4gJzxhIGhyZWY9IicgKyBlICsgJyI+JyArIGRlY29kZVVSSUNvbXBvbmVudChlKSArICI8L2E+IjsKICAgICAgICB9LAogICAgICAgIG1ha2VTdWJzY3JpcHQ6IGZ1bmN0aW9uKGUsIHQsIHI0KSB7CiAgICAgICAgICAgIHJldHVybiAnPHNwYW4gY2xhc3M9Im9yZy1zdWJzY3JpcHQtcGFyZW50Ij4nICsgdCArICc8L3NwYW4+PHNwYW4gY2xhc3M9Im9yZy1zdWJzY3JpcHQtY2hpbGQiPicgKyByNCArICI8L3NwYW4+IjsKICAgICAgICB9LAogICAgICAgIGF0dHJpYnV0ZXNPYmplY3RUb1N0cmluZzogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgdCA9ICIiOwogICAgICAgICAgICBmb3IodmFyIHI0IGluIGUpaWYgKGUuaGFzT3duUHJvcGVydHkocjQpKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGVbcjRdOwogICAgICAgICAgICAgICAgcjQgPT09ICJjbGFzcyIgPyBuID0gdGhpcy5vcmdDbGFzc05hbWUobikgOiByNCA9PT0gImlkIiAmJiAobiA9IHRoaXMub3JnSWQobikpLCB0ICs9ICIgIiArIHI0ICsgJz0iJyArIG4gKyAnIic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfSwKICAgICAgICBpbmxpbmVUYWc6IGZ1bmN0aW9uKGUsIHQsIHI0LCBuKSB7CiAgICAgICAgICAgIHI0ID0gcjQgfHwgewogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgaTUgPSAiPCIgKyBlOwogICAgICAgICAgICByZXR1cm4gbiAmJiAoaTUgKz0gIiAiICsgbiksIGk1ICs9IHRoaXMuYXR0cmlidXRlc09iamVjdFRvU3RyaW5nKHI0KSwgdCA9PT0gbnVsbCA/IGk1ICsgIi8+IiA6IChpNSArPSAiPiIgKyB0ICsgIjwvIiArIGUgKyAiPiIsIGk1KTsKICAgICAgICB9LAogICAgICAgIHRhZzogZnVuY3Rpb24oZSwgdCwgcjQsIG4pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5saW5lVGFnKGUsIHQsIHI0LCBuKSArIGBcbmA7CiAgICAgICAgfQogICAgfTsKICAgIHR5cGVvZiAkICE9ICJ1bmRlZmluZWQiICYmICgkLkNvbnZlcnRlckhUTUwgPSBxKTsKfSk7CnZhciBGID0gZygoSCk9PnsKICAgIGlmICh0eXBlb2YgSCAhPSAidW5kZWZpbmVkIikgewogICAgICAgIGxldCBlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICBmb3IodmFyIHI0IGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyNCkgJiYgKEhbcjRdID0gdFtyNF0pOwogICAgICAgIH07CiAgICAgICAgaGUgPSBlLCBlKFAoKSksIGUoUygpKSwgZShiKCkpLCBlKFAoKSksIGUodygpKSwgZShfKCkpOwogICAgfQogICAgdmFyIGhlOwp9KTsKdmFyIHRlID0gQihGKCkpLCByZSA9IEIoRigpKSwgeyBQYXJzZXI6IGRlICwgSW5saW5lUGFyc2VyOiBmZSAsIExleGVyOiB2ZSAsIE5vZGU6IGtlICwgU3RyZWFtOiBtZSAsIENvbnZlcnRlckhUTUw6IGdlICB9ID0gdGU7CnZhciBleHBvcnRfZGVmYXVsdCA9IHJlLmRlZmF1bHQ7CmNvbnN0IG1vZCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgICBDb252ZXJ0ZXJIVE1MOiBnZSwKICAgICAgICBJbmxpbmVQYXJzZXI6IGZlLAogICAgICAgIExleGVyOiB2ZSwKICAgICAgICBOb2RlOiBrZSwKICAgICAgICBQYXJzZXI6IGRlLAogICAgICAgIFN0cmVhbTogbWUsCiAgICAgICAgZGVmYXVsdDogZXhwb3J0X2RlZmF1bHQKICAgIH07Cn0oKTsKY2xhc3MgTm9kZURldGFpbCBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHsKICAgIGNvbnN0cnVjdG9yKGZldGNoTm9kZTIpewogICAgICAgIHN1cGVyKCk7CiAgICAgICAgdGhpcy5mZXRjaE5vZGUgPSBmZXRjaE5vZGUyOwogICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgibm9kZS1kZXRhaWwiKTsKICAgICAgICB0aGlzLnRodW1ibmFpbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICAgICAgICB0aGlzLnRodW1ibmFpbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgidGh1bWJuYWlsIik7CiAgICAgICAgdGhpcy50aHVtYm5haWxFbGVtZW50LmhpZGRlbiA9IHRydWU7CiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnRodW1ibmFpbEVsZW1lbnQpOwogICAgICAgIHRoaXMudGl0bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOwogICAgICAgIHRoaXMudGl0bGVFbGVtZW50LmlubmVyVGV4dCA9ICJ0aXRsZSI7CiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlRWxlbWVudCk7CiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7CiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQuaW5uZXJUZXh0ID0gImRlc2NyaXB0aW9uIjsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuZGVzY3JpcHRpb25FbGVtZW50KTsKICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbCcpOwogICAgICAgIGNvbnN0IG1hc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFzaycpOwogICAgICAgIHRoaXMubW9kYWxPcGVuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIGlmIChtb2RhbCAhPSBudWxsICYmIG1hc2sgIT0gbnVsbCAmJiAhaXNOdWxsKHRoaXMubW9kYWxPcGVuRWxlbWVudCkpIHsKICAgICAgICAgICAgdGhpcy5tb2RhbE9wZW5FbGVtZW50LmlkID0gIm9wZW4iOwogICAgICAgICAgICB0aGlzLm1vZGFsT3BlbkVsZW1lbnQuaW5uZXJUZXh0ID0gImNsaWNrIHRvIG9wZW4gY29udGVudCI7CiAgICAgICAgICAgIHRoaXMubW9kYWxPcGVuRWxlbWVudC5vbmNsaWNrID0gKCk9PnsKICAgICAgICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgbWFzay5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbWFzay5vbmNsaWNrID0gKCk9PnsKICAgICAgICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgbWFzay5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLm1vZGFsT3BlbkVsZW1lbnQpOwogICAgICAgICAgICB0aGlzLm1vZGFsV2luZG93RWxlbWVudCA9IG1vZGFsOwogICAgICAgIH0KICAgIH0KICAgIHJlbG9hZERldGFpbCA9IGFzeW5jICgpPT57CiAgICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUpIHsKICAgICAgICAgICAgY29uc3QgcmVtb3RlTGF0ZXN0Tm9kZSA9IGF3YWl0IHRoaXMuZmV0Y2hOb2RlKHRoaXMuY3VycmVudE5vZGUuaGFzaCk7CiAgICAgICAgICAgIGlmICghaXNOdWxsKHJlbW90ZUxhdGVzdE5vZGUpKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldERldGFpbChyZW1vdGVMYXRlc3ROb2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CiAgICBhc3luYyBzZXREZXRhaWwobm9kZSkgewogICAgICAgIGlmIChpc051bGwodGhpcy50aXRsZUVsZW1lbnQpIHx8IGlzTnVsbCh0aGlzLnRodW1ibmFpbEVsZW1lbnQpIHx8IGlzTnVsbCh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkpIHJldHVybjsKICAgICAgICB0aGlzLnRpdGxlRWxlbWVudC5pbm5lclRleHQgPSBub2RlLnRpdGxlLnN1YnN0cmluZygwLCAyNSk7CiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQuaW5uZXJUZXh0ID0gbm9kZS5kZXNjcmlwdGlvbjsKICAgICAgICBjb25zdCBvcmdQYXRoRGF0YSA9IG9yZ21vZGVSZXNvdXJjZVBhdGgobm9kZS5oYXNoKTsKICAgICAgICBpZiAoQmxvYk1ldGEudmFsaWRhdGlvbihub2RlKSAmJiAobm9kZS5leHRlbnRpb24gPT0gIi5qcGVnIiB8fCBub2RlLmV4dGVudGlvbiA9PSAiLnBuZyIgfHwgbm9kZS5leHRlbnRpb24gPT0gIi5qcGciIHx8IG5vZGUuZXh0ZW50aW9uID09ICIuZ2lmIikpIHsKICAgICAgICAgICAgY29uc3QgYmxvYlBhdGhEYXRhID0gYmxvYlJlc291cmNlUGF0aChub2RlLmhhc2gpOwogICAgICAgICAgICB0aGlzLnRodW1ibmFpbEVsZW1lbnQuc3JjID0gcmVtb3RlU3RvcmFnZVVSTCArIGJsb2JQYXRoRGF0YS5wcmVmaXggKyBibG9iUGF0aERhdGEuaGFzaERpciArIGJsb2JQYXRoRGF0YS5oYXNoICsgbm9kZS5leHRlbnRpb247CiAgICAgICAgICAgIHRoaXMudGh1bWJuYWlsRWxlbWVudC5oaWRkZW4gPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAobm9kZS50aHVtYm5haWwgPT0gIiIpIHsKICAgICAgICAgICAgICAgIHRoaXMudGh1bWJuYWlsRWxlbWVudC5oaWRkZW4gPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy50aHVtYm5haWxFbGVtZW50LnNyYyA9IG5vZGUudGh1bWJuYWlsOwogICAgICAgICAgICAgICAgdGhpcy50aHVtYm5haWxFbGVtZW50LmhpZGRlbiA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLm1vZGFsV2luZG93RWxlbWVudCkgewogICAgICAgICAgICB3aGlsZSh0aGlzLm1vZGFsV2luZG93RWxlbWVudC5maXJzdENoaWxkKXsKICAgICAgICAgICAgICAgIHRoaXMubW9kYWxXaW5kb3dFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubW9kYWxXaW5kb3dFbGVtZW50LmZpcnN0Q2hpbGQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG9yZ1RleHQgPSBhd2FpdCByZW1vdGVPcmdHZXQobm9kZS5oYXNoKTsKICAgICAgICAgICAgY29uc3QgaHRtbCA9IG9yZzJIdG1sKG9yZ1RleHQpOwogICAgICAgICAgICBpZiAoaHRtbCAhPSAiIikgewogICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFsKICAgICAgICAgICAgICAgICAgICBodG1sLmNvbnRlbnRIVE1MCiAgICAgICAgICAgICAgICBdLCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQvaHRtbCcKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7CiAgICAgICAgICAgICAgICBpZnJhbWUuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAgICAgICAgIHRoaXMubW9kYWxXaW5kb3dFbGVtZW50LmFwcGVuZENoaWxkKGlmcmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgcHJvcHMgPSBvYmpUb1JlY3VyaXN2ZUFjY29yZGlvbk1lbnUoZG9jdW1lbnQsIG5vZGUpOwogICAgICAgIGlmIChpc051bGwodGhpcy5wcm9wZXJ0aWVzKSkgewogICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJwcm9wczogIikpOwogICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wczsKICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnByb3BlcnRpZXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucmVwbGFjZUNoaWxkKHByb3BzLCB0aGlzLnByb3BlcnRpZXMpOwogICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wczsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGFnc1Jvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgICAgIGlmIChpc051bGwodGhpcy50YWdzKSkgewogICAgICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzUm9vdDsKICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnRhZ3MpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucmVwbGFjZUNoaWxkKHRhZ3NSb290LCB0aGlzLnRhZ3MpOwogICAgICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzUm9vdDsKICAgICAgICB9CiAgICAgICAgT2JqZWN0LmVudHJpZXMobm9kZS52ZWN0b3IpLmZvckVhY2goYXN5bmMgKFt0YXJnZXQsIGxhYmVsXSk9PnsKICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGF3YWl0IHRoaXMuZmV0Y2hOb2RlKHRhcmdldCk7CiAgICAgICAgICAgIGlmIChub2RlKSB7CiAgICAgICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgICAgICBsaS5pbm5lclRleHQgPSBub2RlLnRpdGxlOwogICAgICAgICAgICAgICAgdGFnc1Jvb3QuYXBwZW5kQ2hpbGQobGkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7CiAgICB9Cn0KY2xhc3MgRWRpdGFibGVOb2RlRGV0YWlsIGV4dGVuZHMgTm9kZURldGFpbCB7CiAgICByZW1vdGVPcGVuT3JnRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgcmVtb3RlT3BlbkJsb2JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICByZW1vdGVPcGVuTWV0YUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIGpzb25UZXh0QXJlYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpOwogICAgdGFnU2VsZWN0b3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgIHRhZ0luc2VydGVyQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogICAgdGFnTGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgY29uc3RydWN0b3IoZmV0Y2hOb2RlMSwgdGFnSGFzaERpY3QsIHVwZGF0ZU5vZGUsIHJlbG9hZDEpewogICAgICAgIHN1cGVyKGZldGNoTm9kZTEpOwogICAgICAgIHRoaXMudGFnSGFzaERpY3QgPSB0YWdIYXNoRGljdDsKICAgICAgICB0aGlzLnVwZGF0ZU5vZGUgPSB1cGRhdGVOb2RlOwogICAgICAgIHRoaXMucmVsb2FkID0gcmVsb2FkMTsKICAgICAgICB0aGlzLnJlbW90ZU9wZW5PcmdFbGVtZW50LmlubmVyVGV4dCA9ICJ4ZGdPcGVuT3JnIjsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMucmVtb3RlT3Blbk9yZ0VsZW1lbnQpOwogICAgICAgIHRoaXMucmVtb3RlT3BlbkJsb2JFbGVtZW50LmlubmVyVGV4dCA9ICJ4ZGdPcGVuQmxvYiI7CiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnJlbW90ZU9wZW5CbG9iRWxlbWVudCk7CiAgICAgICAgdGhpcy5yZW1vdGVPcGVuTWV0YUVsZW1lbnQuaW5uZXJUZXh0ID0gInhkZ09wZW5NZXRhIjsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMucmVtb3RlT3Blbk1ldGFFbGVtZW50KTsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMudGFnTGlzdEVsZW1lbnQpOwogICAgICAgIGNvbnN0IHRhZ0RpY3QgPSB0YWdIYXNoRGljdCgpOwogICAgICAgIGNvbnN0IGRhdGFsaXN0ID0gT2JqZWN0LnZhbHVlcyh0YWdEaWN0KS5tYXAoKGUpPT5lLnRpdGxlCiAgICAgICAgKTsKICAgICAgICB0aGlzLnRhZ1NlbGVjdG9yRWxlbWVudCA9IENyZWF0ZUF1dG9jb21wbGV0ZUlucHV0KGRvY3VtZW50LCAibGktdGFnLWRhdGFsaXN0IiwgZGF0YWxpc3QpOwogICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy50YWdTZWxlY3RvckVsZW1lbnQpOwogICAgICAgIHRoaXMudGFnSW5zZXJ0ZXJCdXR0b25FbGVtZW50LnRleHRDb250ZW50ID0gJ3RhZyBpbnNlcnQnOwogICAgICAgIHRoaXMudGFnSW5zZXJ0ZXJCdXR0b25FbGVtZW50Lm9uY2xpY2sgPSB0aGlzLmluc2VydFRhZzsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMudGFnSW5zZXJ0ZXJCdXR0b25FbGVtZW50KTsKICAgICAgICB0aGlzLmpzb25UZXh0QXJlYUVsZW1lbnQudmFsdWUgPSAidGV4dCI7CiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmpzb25UZXh0QXJlYUVsZW1lbnQpOwogICAgfQogICAgaW5zZXJ0VGFnID0gYXN5bmMgKCk9PnsKICAgICAgICBjb25zdCBub2RlID0gSlNPTi5wYXJzZSh0aGlzLmpzb25UZXh0QXJlYUVsZW1lbnQudmFsdWUpOwogICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudGFnSGFzaERpY3QoKVt0aGlzLnRhZ1NlbGVjdG9yRWxlbWVudC52YWx1ZV07CiAgICAgICAgaWYgKE5vZGUxLnZhbGlkYXRpb24obm9kZSkpIHsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0YWcuaGFzaDsKICAgICAgICAgICAgbm9kZS52ZWN0b3JbaW5kZXhdID0gbm9kZS52ZWN0b3JbaW5kZXhdID8/IHsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbm9kZS52ZWN0b3JbaW5kZXhdWyJ0YWciXSA9IDE7CiAgICAgICAgICAgIHRoaXMuanNvblRleHRBcmVhRWxlbWVudC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5vZGUpOwogICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZU5vZGUobm9kZSwgbmV3IEZvcm1EYXRhKTsKICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTsKICAgICAgICB9CiAgICB9OwogICAgYXN5bmMgc2V0RGV0YWlsKG5vZGUpIHsKICAgICAgICBhd2FpdCBzdXBlci5zZXREZXRhaWwobm9kZSk7CiAgICAgICAgY29uc3Qgb3JnUGF0aERhdGEgPSBvcmdtb2RlUmVzb3VyY2VQYXRoKG5vZGUuaGFzaCk7CiAgICAgICAgdGhpcy5qc29uVGV4dEFyZWFFbGVtZW50LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkobm9kZSk7CiAgICAgICAgaWYgKHRoaXMucmVtb3RlT3Blbk9yZ0VsZW1lbnQpIHsKICAgICAgICAgICAgcmVtb3ZlQWxsQ2hpbGQodGhpcy5yZW1vdGVPcGVuT3JnRWxlbWVudCk7CiAgICAgICAgICAgIGNvbnN0IHhkZ09wZW5PcmdQYXRoID0gcmVtb3RlU3RvcmFnZVVSTCArICJyZW1vdGUteGRnLWxpa2Utb3Blbi8iICsgb3JnUGF0aERhdGEucHJlZml4ICsgb3JnUGF0aERhdGEuaGFzaERpciArIG9yZ1BhdGhEYXRhLmhhc2ggKyBvcmdQYXRoRGF0YS5leHRlbnRpb247CiAgICAgICAgICAgIGNvbnN0IGVsZW1zID0gUGF0aEVsZW1lbnQoIm9yZyIsICIvIiArIG9yZ1BhdGhEYXRhLnByZWZpeCArIG9yZ1BhdGhEYXRhLmhhc2hEaXIgKyBvcmdQYXRoRGF0YS5oYXNoICsgb3JnUGF0aERhdGEuZXh0ZW50aW9uLCB4ZGdPcGVuT3JnUGF0aCk7CiAgICAgICAgICAgIGVsZW1zLmZvckVhY2goKGUpPT57CiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdGVPcGVuT3JnRWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlT3Blbk9yZ0VsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5yZW1vdGVPcGVuQmxvYkVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKEJsb2JNZXRhLnZhbGlkYXRpb24obm9kZSkpIHsKICAgICAgICAgICAgICAgIHJlbW92ZUFsbENoaWxkKHRoaXMucmVtb3RlT3BlbkJsb2JFbGVtZW50KTsKICAgICAgICAgICAgICAgIGNvbnN0IGJsb2JQYXRoRGF0YSA9IGJsb2JSZXNvdXJjZVBhdGgobm9kZS5oYXNoKTsKICAgICAgICAgICAgICAgIGNvbnN0IHhkZ09wZW5CbG9iUGF0aCA9IHJlbW90ZVN0b3JhZ2VVUkwgKyAicmVtb3RlLXhkZy1saWtlLW9wZW4vIiArIGJsb2JQYXRoRGF0YS5wcmVmaXggKyBibG9iUGF0aERhdGEuaGFzaERpciArIGJsb2JQYXRoRGF0YS5oYXNoICsgbm9kZS5leHRlbnRpb247CiAgICAgICAgICAgICAgICBjb25zdCBlbGVtcyA9IFBhdGhFbGVtZW50KCJ0ZXh0IiwgIi8iICsgYmxvYlBhdGhEYXRhLnByZWZpeCArIGJsb2JQYXRoRGF0YS5oYXNoRGlyICsgYmxvYlBhdGhEYXRhLmhhc2ggKyBub2RlLmV4dGVudGlvbiwgeGRnT3BlbkJsb2JQYXRoKTsKICAgICAgICAgICAgICAgIGVsZW1zLmZvckVhY2goKGUpPT57CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVtb3RlT3BlbkJsb2JFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlT3BlbkJsb2JFbGVtZW50LmFwcGVuZENoaWxkKGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5yZW1vdGVPcGVuQmxvYkVsZW1lbnQuaGlkZGVuID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbW90ZU9wZW5CbG9iRWxlbWVudC5oaWRkZW4gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLnJlbW90ZU9wZW5NZXRhRWxlbWVudCkgewogICAgICAgICAgICByZW1vdmVBbGxDaGlsZCh0aGlzLnJlbW90ZU9wZW5NZXRhRWxlbWVudCk7CiAgICAgICAgICAgIGNvbnN0IG1ldGFQYXRoRGF0YSA9IG1ldGFSZXNvdXJjZVBhdGgobm9kZS5oYXNoKTsKICAgICAgICAgICAgY29uc3QgeGRnT3Blbk1ldGFQYXRoID0gcmVtb3RlU3RvcmFnZVVSTCArICJyZW1vdGUteGRnLWxpa2Utb3Blbi8iICsgbWV0YVBhdGhEYXRhLnByZWZpeCArIG1ldGFQYXRoRGF0YS5oYXNoRGlyICsgbWV0YVBhdGhEYXRhLmhhc2ggKyBtZXRhUGF0aERhdGEuZXh0ZW50aW9uOwogICAgICAgICAgICBjb25zdCBlbGVtcyA9IFBhdGhFbGVtZW50KCJ0ZXh0IiwgIi8iICsgbWV0YVBhdGhEYXRhLnByZWZpeCArIG1ldGFQYXRoRGF0YS5oYXNoRGlyICsgbWV0YVBhdGhEYXRhLmhhc2ggKyBtZXRhUGF0aERhdGEuZXh0ZW50aW9uLCB4ZGdPcGVuTWV0YVBhdGgpOwogICAgICAgICAgICBlbGVtcy5mb3JFYWNoKChlKT0+ewogICAgICAgICAgICAgICAgaWYgKHRoaXMucmVtb3RlT3Blbk1ldGFFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdGVPcGVuTWV0YUVsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICB0aGlzLnJlbG9hZFRhZ1NlbGVjdG9yRGF0YUxpc3QoKTsKICAgIH0KICAgIHJlbG9hZFRhZ1NlbGVjdG9yRGF0YUxpc3QgPSAoKT0+ewogICAgICAgIGNvbnN0IHRhZ0RpY3QxID0gdGhpcy50YWdIYXNoRGljdCgpOwogICAgICAgIGNvbnN0IGRhdGFsaXN0MSA9IE9iamVjdC52YWx1ZXModGFnRGljdDEpLm1hcCgoZSk9PmUudGl0bGUKICAgICAgICApOwogICAgICAgIGNvbnN0IGRsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxpLXRhZy1kYXRhbGlzdCIpOwogICAgICAgIGlmICghaXNOdWxsKGRsKSkgewogICAgICAgICAgICB3aGlsZShkbC5maXJzdENoaWxkKXsKICAgICAgICAgICAgICAgIGRsLnJlbW92ZUNoaWxkKGRsLmZpcnN0Q2hpbGQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRhdGFsaXN0MS5mb3JFYWNoKChlKT0+ewogICAgICAgICAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpOwogICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gZTsKICAgICAgICAgICAgICAgIGRsLmFwcGVuZENoaWxkKG9wdGlvbik7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07Cn0KY29uc3Qgb2JqVG9SZWN1cmlzdmVBY2NvcmRpb25NZW51ID0gKGRvY3VtZW50Miwgb2JqKT0+ewogICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50Mi5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgcm9vdC5jbGFzc0xpc3QuYWRkKCdhY2NvcmRpb24tY2hpbGQnKTsKICAgIE9iamVjdC5lbnRyaWVzKG9iaikuZm9yRWFjaCgoW2tleTIsIHZhbHVlXSk9PnsKICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50Mi5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQyLmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7CiAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gYCR7a2V5Mi5zdWJzdHJpbmcoMCwgMTApfTogYDsKICAgICAgICBsaS5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JykgewogICAgICAgICAgICBjb25zdCBhY2NvcmRpb24gPSBkb2N1bWVudDIuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgYWNjb3JkaW9uLnR5cGUgPSAnY2hlY2tib3gnOwogICAgICAgICAgICBhY2NvcmRpb24uY2xhc3NMaXN0LmFkZCgndG9nZ2xlJyk7CiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGFjY29yZGlvbik7CiAgICAgICAgICAgIGNvbnN0IHVsID0gb2JqVG9SZWN1cmlzdmVBY2NvcmRpb25NZW51KGRvY3VtZW50MiwgdmFsdWUpOwogICAgICAgICAgICBsaS5hcHBlbmRDaGlsZCh1bCk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7CiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gZG9jdW1lbnQyLmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CiAgICAgICAgICAgIGNoaWxkLnZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTsKICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoY2hpbGQpOwogICAgICAgIH0KICAgICAgICByb290LmFwcGVuZENoaWxkKGxpKTsKICAgIH0pOwogICAgcmV0dXJuIHJvb3Q7Cn07CmNvbnN0IHJlbW92ZUFsbENoaWxkID0gKHRhcmdldCk9PnsKICAgIHdoaWxlKHRhcmdldC5maXJzdENoaWxkKXsKICAgICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQodGFyZ2V0LmZpcnN0Q2hpbGQpOwogICAgfQp9Owpjb25zdCB0ZXh0VG9DbGlwQm9hcmQgPSAoZG9jdW1lbnQyLCB0ZXh0Mik9PnsKICAgIGNvbnN0IHRlbXBFbGVtZW50ID0gZG9jdW1lbnQyLmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7CiAgICB0ZW1wRWxlbWVudC50ZXh0Q29udGVudCA9IHRleHQyOwogICAgZG9jdW1lbnQyLmJvZHkuYXBwZW5kQ2hpbGQodGVtcEVsZW1lbnQpOwogICAgZG9jdW1lbnQyLmdldFNlbGVjdGlvbigpPy5zZWxlY3RBbGxDaGlsZHJlbih0ZW1wRWxlbWVudCk7CiAgICB0ZW1wRWxlbWVudC5zZWxlY3QoKTsKICAgIHZhciBzdWNjZXNzID0gZG9jdW1lbnQyLmV4ZWNDb21tYW5kKCdjb3B5Jyk7CiAgICBkb2N1bWVudDIuYm9keS5yZW1vdmVDaGlsZCh0ZW1wRWxlbWVudCk7CiAgICByZXR1cm4gc3VjY2VzczsKfTsKY29uc3QgUGF0aEVsZW1lbnQgPSAobmFtZSwgY29weVN0cmluZywgb25DbGlja1JlcXVlc3RQYXRoKT0+ewogICAgY29uc3QgZWxlbXMgPSBbXTsKICAgIGNvbnN0IGNvcHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgIGNvcHkub25jbGljayA9ICgpPT57CiAgICAgICAgdGV4dFRvQ2xpcEJvYXJkKGRvY3VtZW50LCBjb3B5U3RyaW5nKTsKICAgIH07CiAgICBjb3B5LmlubmVyVGV4dCA9IGAke25hbWV9OiBwYXRoVG9DbGlwYm9hcmRgOwogICAgZWxlbXMucHVzaChjb3B5KTsKICAgIGNvbnN0IHJlcXVlc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgIHJlcXVlc3Qub25jbGljayA9ICgpPT57CiAgICAgICAgR2V0UmVxdWVzdChvbkNsaWNrUmVxdWVzdFBhdGgpOwogICAgfTsKICAgIHJlcXVlc3QuaW5uZXJUZXh0ID0gYCR7bmFtZX06IHJlbW90ZVhkZ09wZW5gOwogICAgZWxlbXMucHVzaChyZXF1ZXN0KTsKICAgIHJldHVybiBlbGVtczsKfTsKY29uc3QgcmVtb3RlT3JnR2V0ID0gYXN5bmMgKGhhc2g0LCBmb3JjZSA9IGZhbHNlKT0+ewogICAgY29uc3QgcGF0aFN0cnVjdCA9IG9yZ21vZGVSZXNvdXJjZVBhdGgoaGFzaDQpOwogICAgY29uc3QgcGF0aCA9IHJlbW90ZVN0b3JhZ2VVUkwgKyBwYXRoU3RydWN0LnByZWZpeCArIHBhdGhTdHJ1Y3QuaGFzaERpciArIHBhdGhTdHJ1Y3QuaGFzaCArIHBhdGhTdHJ1Y3QuZXh0ZW50aW9uOwogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHZXRSZXF1ZXN0KHBhdGgpOwogICAgaWYgKGlzTnVsbChyZXNwb25zZSkpIHJldHVybiAiIjsKICAgIGNvbnN0IHRleHQyID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogICAgaWYgKGlzTnVsbCh0ZXh0MikpIHsKICAgICAgICBjb25zb2xlLndhcm4oIlRleHTjgajjgZfjgabop6Pph4jjgafjgY3jgarjgYTjgoLjga7jgpLlj5blvpfjgZfjgb7jgZfjgZ8iKTsKICAgICAgICByZXR1cm4gIiI7CiAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKGByZW1vdGVPcmdHZXQ6ICR7dGV4dDJ9YCk7CiAgICAgICAgcmV0dXJuIHRleHQyOwogICAgfQp9Owpjb25zdCBvcmcySHRtbCA9IChvcmdUZXh0KT0+ewogICAgY29uc3Qgb3JnRG9jdW1lbnQgPSBuZXcgbW9kLlBhcnNlcigpLnBhcnNlKG9yZ1RleHQpOwogICAgY29uc3QgaHRtbCA9IG9yZ0RvY3VtZW50LmNvbnZlcnQobW9kLkNvbnZlcnRlckhUTUwsIHsKICAgIH0pOwogICAgcmV0dXJuIGh0bWw7Cn07CmNvbnN0IEZvcmNlR3JhcGhVcGRhdGUgPSAobm9kZXMsIGhlaWdodCwgd2lkdGgpPT57CiAgICBjb25zdCBCT1VOQ0UgPSAwLjA1OwogICAgY29uc3QgQ09VTE9NQiA9IDYwMDsKICAgIGNvbnN0IEFUVEVOVUFUSU9OID0gMC43OwogICAgY29uc3QgcmV0ID0gT2JqZWN0LmVudHJpZXMobm9kZXMpLm1hcCgoW2tleTIsIHRhcmdldF0pPT57CiAgICAgICAgbGV0IHZ4ID0gMDsKICAgICAgICBsZXQgdnkgPSAwOwogICAgICAgIGlmICh0YXJnZXQubW92YWJsZSkgewogICAgICAgICAgICBsZXQgZnggPSAwOwogICAgICAgICAgICBsZXQgZnkgPSAwOwogICAgICAgICAgICBPYmplY3QuZW50cmllcyhub2RlcykuZm9yRWFjaCgoW2VkZ2VUYXJnZXRVcmksIG5dKT0+ewogICAgICAgICAgICAgICAgaWYgKGtleTIgIT0gZWRnZVRhcmdldFVyaSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RYID0gdGFyZ2V0LnggLSBuLng7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdFkgPSB0YXJnZXQueSAtIG4ueTsKICAgICAgICAgICAgICAgICAgICBjb25zdCByc3EgPSBkaXN0WCAqIGRpc3RYICsgZGlzdFkgKiBkaXN0WTsKICAgICAgICAgICAgICAgICAgICBmeCArPSBDT1VMT01CICogZGlzdFggLyByc3E7CiAgICAgICAgICAgICAgICAgICAgZnkgKz0gQ09VTE9NQiAqIGRpc3RZIC8gcnNxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gewogICAgICAgICAgICAgICAgLi4udGFyZ2V0LmxpbmtzLAogICAgICAgICAgICAgICAgLi4udGFyZ2V0LnJlZmVyZXJzCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG1lcmdlZCkuZm9yRWFjaCgoW3RhcmdldFVyaSwgZWRnZUluZm9dKT0+ewogICAgICAgICAgICAgICAgaWYgKHRhcmdldC5ub2RlSGFzaCAhPSB0YXJnZXRVcmkpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbm9kZXNbdGFyZ2V0VXJpXTsKICAgICAgICAgICAgICAgICAgICBpZiAobikgewogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhlZGdlSW5mbykuZm9yRWFjaCgoW2hhc2g0LCB3ZWlnaHRdKT0+ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdFggPSBuLnggLSB0YXJnZXQueDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RZID0gbi55IC0gdGFyZ2V0Lnk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmeCArPSBCT1VOQ0UgKiBkaXN0WDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ5ICs9IEJPVU5DRSAqIGRpc3RZOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2eCA9ICh0YXJnZXQudnggKyBmeCkgKiBBVFRFTlVBVElPTjsKICAgICAgICAgICAgdnkgPSAodGFyZ2V0LnZ5ICsgZnkpICogQVRURU5VQVRJT047CiAgICAgICAgfQogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIGtleTIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG1vdmFibGU6IHRhcmdldC5tb3ZhYmxlLAogICAgICAgICAgICAgICAgbm9kZUhhc2g6IHRhcmdldC5ub2RlSGFzaCwKICAgICAgICAgICAgICAgIHRpdGxlOiB0YXJnZXQudGl0bGUsCiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRhcmdldC50aHVtYm5haWwsCiAgICAgICAgICAgICAgICB2eDogdngsCiAgICAgICAgICAgICAgICB2eTogdnksCiAgICAgICAgICAgICAgICB4OiB0YXJnZXQueCArIHZ4LAogICAgICAgICAgICAgICAgeTogdGFyZ2V0LnkgKyB2eSwKICAgICAgICAgICAgICAgIGxpbmtzOiB0YXJnZXQubGlua3MsCiAgICAgICAgICAgICAgICByZWZlcmVyczogdGFyZ2V0LnJlZmVyZXJzCiAgICAgICAgICAgIH0KICAgICAgICBdOwogICAgfSk7CiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKHJldCk7Cn07CmNvbnN0IE5vZGVUb0ZvcmNlTm9kZSA9IChub2RlKT0+ewogICAgY29uc3QgcmV0ID0gewogICAgICAgIG1vdmFibGU6IHRydWUsCiAgICAgICAgbm9kZUhhc2g6IG5vZGUuaGFzaCwKICAgICAgICB0aXRsZTogbm9kZS50aXRsZSwKICAgICAgICB0aHVtYm5haWw6IG5vZGUudGh1bWJuYWlsLAogICAgICAgIHZ4OiAwLAogICAgICAgIHZ5OiAwLAogICAgICAgIHg6IDAsCiAgICAgICAgeTogMCwKICAgICAgICBsaW5rczogbm9kZS52ZWN0b3IsCiAgICAgICAgcmVmZXJlcnM6IG5vZGUucmVmZXJlcnMKICAgIH07CiAgICByZXR1cm4gcmV0Owp9OwpjbGFzcyBOb1Njb3BlR3JhcGggewogICAgaW5pdCA9ICgpPT57CiAgICB9OwogICAgdXBkYXRlID0gKCk9PnsKICAgIH07CiAgICByZWxvYWQgPSBhc3luYyAoKT0+ewogICAgfTsKICAgIGRyYXcgPSAoKT0+ewogICAgfTsKICAgIHJlbW92ZURlcGVuZGFuY3kgPSAoKT0+ewogICAgfTsKfQpjbGFzcyBTY29wZUdyYXBoTWFuYWdlciB7CiAgICBidWZmZXJTaXplID0gMTA7CiAgICBoaXN0b3J5ID0gQXJyYXkoKTsKICAgIGhpc3RvcnlJbmRleCA9IC0xOwogICAgY3VycmVudFNjb3BlR3JhcGggPSBuZXcgTm9TY29wZUdyYXBoKCk7CiAgICBmZXRjaE5vZGUgPSBhc3luYyAoaGFzaDQpPT57CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH07CiAgICBvbk5vZGVTZWxlY3RlZE9mVmlldyA9ICgpPT57CiAgICB9OwogICAgY29uc3RydWN0b3IoKXsKICAgIH0KICAgIGRlcGVuZGFuY3lNb2R1bGVJbmplY3Rpb24oY2FudmFzLCBzdG9yZSwgb25Ob2RlU2VsZWN0ZWRPZlZpZXcpIHsKICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIgPSBjYW52YXM7CiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlOwogICAgICAgIHRoaXMub25Ob2RlU2VsZWN0ZWRPZlZpZXcgPSBvbk5vZGVTZWxlY3RlZE9mVmlldzsKICAgIH0KICAgIHJlc3RhcnQgPSBhc3luYyAoaGFzaDQpPT57CiAgICAgICAgY29uc3Qgbm9kZSA9IGF3YWl0IHRoaXMuc3RvcmU/LmZldGNoKGhhc2g0KTsKICAgICAgICBpZiAoaXNOdWxsKG5vZGUpKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5oyH5a6a44OP44OD44K344OlOiAke2hhc2g0fSDjgafjg47jg7zjg4njgpLjg5Xjgqfjg4Pjg4HjgafjgY3jgb7jgZvjgpPjgafjgZfjgZ9gKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoaXNOdWxsKHRoaXMuY2FudmFzTWFuYWdlcikgfHwgaXNOdWxsKHRoaXMuc3RvcmUpIHx8IGlzTnVsbCh0aGlzLm9uTm9kZVNlbGVjdGVkT2ZWaWV3KSkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIuW/heimgeOBquS+neWtmOOBjOazqOWFpeOBleOCjOOBpuOBhOOBvuOBm+OCkyIpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuY2FudmFzTWFuYWdlci5yZW1vdmVBbGxFdmVudExpc3RuZXIoKTsKICAgICAgICBjb25zdCBzY29wZSA9IG5ldyBTaW5nbGVOb2RlVGFyZ2V0U2NvcGVHcmFwaChub2RlLCB0aGlzLnN0b3JlLmZldGNoLCB0aGlzLmNhbnZhc01hbmFnZXIsIHRoaXMub25Ob2RlU2VsZWN0ZWRPZlZpZXcsIHRoaXMucmVzdGFydCk7CiAgICAgICAgaWYgKHNjb3BlKSB7CiAgICAgICAgICAgIGF3YWl0IHNjb3BlLnJlc2V0KCk7CiAgICAgICAgICAgIHRoaXMucHVzaFNjb3BlKHNjb3BlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwogICAgcHVzaFNjb3BlKHNjb3BlKSB7CiAgICAgICAgdGhpcy5jdXJyZW50U2NvcGVHcmFwaC5yZW1vdmVEZXBlbmRhbmN5KCk7CiAgICAgICAgdGhpcy5jdXJyZW50U2NvcGVHcmFwaCA9IHNjb3BlOwogICAgfQogICAgdXBkYXRlID0gKCk9PnsKICAgICAgICB0aGlzLmN1cnJlbnRTY29wZUdyYXBoLnVwZGF0ZSgpOwogICAgfTsKICAgIGRyYXcgPSAoKT0+ewogICAgICAgIHRoaXMuY3VycmVudFNjb3BlR3JhcGguZHJhdygpOwogICAgfTsKICAgIGN1cnJlbnRTY29wZVJlbG9hZCA9IGFzeW5jICgpPT57CiAgICAgICAgYXdhaXQgdGhpcy5jdXJyZW50U2NvcGVHcmFwaC5yZWxvYWQoKTsKICAgIH07Cn0KY2xhc3MgU2luZ2xlTm9kZVRhcmdldFNjb3BlR3JhcGggewogICAgZ3JhcGhOb2RlcyA9IHsKICAgIH07CiAgICBub2RlcyA9IHsKICAgIH07CiAgICBncmFwaElkID0gLTE7CiAgICBpc1JlYnVpbGRpbmcgPSBmYWxzZTsKICAgIHVwZGF0YWluZyA9IGZhbHNlOwogICAgY29uc3RydWN0b3IodGFyZ2V0LCBmZXRjaE5vZGUzID0gYXN5bmMgKHVyaSk9PnsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSwgY2FudmFzTWFuYWdlciwgb25Ob2RlU2VsZWN0ZWRPZlZpZXcsIG5leHRHcmFwaFJlbmRlcil7CiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgICAgICAgdGhpcy5mZXRjaE5vZGUgPSBmZXRjaE5vZGUzOwogICAgICAgIHRoaXMuY2FudmFzTWFuYWdlciA9IGNhbnZhc01hbmFnZXI7CiAgICAgICAgdGhpcy5vbk5vZGVTZWxlY3RlZE9mVmlldyA9IG9uTm9kZVNlbGVjdGVkT2ZWaWV3OwogICAgICAgIHRoaXMubmV4dEdyYXBoUmVuZGVyID0gbmV4dEdyYXBoUmVuZGVyOwogICAgICAgIGlmICh0YXJnZXQuaGFzaCAhPSAiNTQ1ZWE1Mzg0NjEwMDNlZmRjOGM4MWMyNDQ1MzFiMDAzZjZmMjZjZmNjZjZjMDA3M2IzMjM5ZmRlZGY0OTQ0NiIpIHsKICAgICAgICAgICAgdGhpcy5ub2Rlc1t0YXJnZXQuaGFzaF0gPSBOb2RlVG9Gb3JjZU5vZGUodGFyZ2V0KTsKICAgICAgICAgICAgaWYgKGNhbnZhc01hbmFnZXIuZ3JhcGhDYW52YXMpIHsKICAgICAgICAgICAgICAgIHRoaXMubm9kZXNbdGFyZ2V0Lmhhc2hdLnggPSBjYW52YXNNYW5hZ2VyLmdyYXBoQ2FudmFzLndpZHRoIC8gMjsKICAgICAgICAgICAgICAgIHRoaXMubm9kZXNbdGFyZ2V0Lmhhc2hdLnkgPSBjYW52YXNNYW5hZ2VyLmdyYXBoQ2FudmFzLmhlaWdodCAvIDI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlZGdlcyA9IChuKT0+ewogICAgICAgIGNvbnN0IHJldCA9IHsKICAgICAgICAgICAgLi4ubi52ZWN0b3IsCiAgICAgICAgICAgIC4uLm4ucmVmZXJlcnMKICAgICAgICB9OwogICAgICAgIGRlbGV0ZSByZXRbbi5oYXNoXTsKICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmV0KTsKICAgIH07CiAgICByZW1vdmVEZXBlbmRhbmN5ID0gKCk9PnsKICAgICAgICBpZiAoaXNOdWxsKHRoaXMuZ3JhcGgpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5jYW52YXNNYW5hZ2VyLnJlbW92ZUV2ZW50TGlzdG5lcignbW91c2Vtb3ZlJywgdGhpcy5ncmFwaC5wb2ludGluZ19jaGVjayk7CiAgICAgICAgdGhpcy5jYW52YXNNYW5hZ2VyLnJlbW92ZUV2ZW50TGlzdG5lcignbW91c2Vkb3duJywgdGhpcy5ncmFwaC5kcmFnX3N0YXJ0KTsKICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIucmVtb3ZlRXZlbnRMaXN0bmVyKCdtb3VzZXVwJywgdGhpcy5ncmFwaC5kcmFnX2VuZCk7CiAgICAgICAgdGhpcy5jYW52YXNNYW5hZ2VyLnJlbW92ZUV2ZW50TGlzdG5lcignZGJsY2xpY2snLCB0aGlzLmdyYXBoLmRvdWJsZUNsaWNrKTsKICAgIH07CiAgICByZXNldCA9IGFzeW5jICgpPT57CiAgICAgICAgY29uc3QgbGlua3MgPSB0aGlzLmVkZ2VzKHRoaXMudGFyZ2V0KTsKICAgICAgICBjb25zdCB0ZW1wTm9kZURpY3QgPSB7CiAgICAgICAgfTsKICAgICAgICBpZiAodGhpcy50YXJnZXQuaGFzaCAhPSAiNTQ1ZWE1Mzg0NjEwMDNlZmRjOGM4MWMyNDQ1MzFiMDAzZjZmMjZjZmNjZjZjMDA3M2IzMjM5ZmRlZGY0OTQ0NiIpIHsKICAgICAgICAgICAgY29uc3QgY3JpdGVyaWEgPSBOb2RlVG9Gb3JjZU5vZGUodGhpcy50YXJnZXQpOwogICAgICAgICAgICBjcml0ZXJpYS5tb3ZhYmxlID0gZmFsc2U7CiAgICAgICAgICAgIHRlbXBOb2RlRGljdFt0aGlzLnRhcmdldC5oYXNoXSA9IGNyaXRlcmlhOwogICAgICAgIH0KICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IFtoYXNoNCwgZWRnZV0gb2YgbGlua3MpewogICAgICAgICAgICBjb25zdCBhID0gYXdhaXQgdGhpcy5mZXRjaE5vZGUoaGFzaDQpOwogICAgICAgICAgICBpZiAoYSkgewogICAgICAgICAgICAgICAgaWYgKGEuaGFzaCAhPSAiNTQ1ZWE1Mzg0NjEwMDNlZmRjOGM4MWMyNDQ1MzFiMDAzZjZmMjZjZmNjZjZjMDA3M2IzMjM5ZmRlZGY0OTQ0NiIpIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wTm9kZURpY3RbYS5oYXNoXSA9IE5vZGVUb0ZvcmNlTm9kZShhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5jYW52YXNNYW5hZ2VyKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmdyYXBoKSB7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gbmV3IEdyYXBoKHRoaXMuY2FudmFzTWFuYWdlci5pZCgpLCAzMCwgdHJ1ZSwgZmFsc2UsIG51bGwsIHRoaXMuYWN0aXZhdGVOb2RlQ2FsbGJhY2ssIHRoaXMuZGVBY3RpdmF0ZU5vZGVDYWxsYmFjaywgdGhpcy5kb3VibGVDbGlja2VkTm9kZUNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIHRoaXMuZ3JhcGhJZCA9IHRoaXMuZ3JhcGguaWQ7CiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIuYWRkRXZlbnRMaXN0bmVyKCdtb3VzZW1vdmUnLCB0aGlzLmdyYXBoLnBvaW50aW5nX2NoZWNrKTsKICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzTWFuYWdlci5hZGRFdmVudExpc3RuZXIoJ21vdXNlZG93bicsIHRoaXMuZ3JhcGguZHJhZ19zdGFydCk7CiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIuYWRkRXZlbnRMaXN0bmVyKCdtb3VzZXVwJywgdGhpcy5ncmFwaC5kcmFnX2VuZCk7CiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIuYWRkRXZlbnRMaXN0bmVyKCdkYmxjbGljaycsIHRoaXMuZ3JhcGguZG91YmxlQ2xpY2spOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucmVidWlsZEdyYXBoKHRoaXMubm9kZXMsIHRlbXBOb2RlRGljdCk7CiAgICAgICAgfQogICAgfTsKICAgIGFjdGl2YXRlTm9kZUNhbGxiYWNrID0gYXN5bmMgKGRlYWN0aXZhdGVOb2RlLCBhY3RpdmF0ZU5vZGUpPT57CiAgICAgICAgY29uc3Qgbm9kZSA9IGF3YWl0IHRoaXMuZmV0Y2hOb2RlKGFjdGl2YXRlTm9kZS5oYXNoKTsKICAgICAgICBpZiAobm9kZSkgewogICAgICAgICAgICB0aGlzLm9uTm9kZVNlbGVjdGVkT2ZWaWV3KG5vZGUpOwogICAgICAgIH0KICAgIH07CiAgICBkZUFjdGl2YXRlTm9kZUNhbGxiYWNrID0gKGRlYWN0aXZhdGVOb2RlKT0+ewogICAgfTsKICAgIGRvdWJsZUNsaWNrZWROb2RlQ2FsbGJhY2sgPSAobm9kZSk9PnsKICAgICAgICB0aGlzLm5leHRHcmFwaFJlbmRlcihub2RlLmhhc2gpOwogICAgfTsKICAgIHJlbG9hZCA9IGFzeW5jICgpPT57CiAgICAgICAgY29uc3QgcmVsYW9kZWRUYXJnZXQgPSBhd2FpdCB0aGlzLmZldGNoTm9kZSh0aGlzLnRhcmdldC5oYXNoKTsKICAgICAgICBpZiAocmVsYW9kZWRUYXJnZXQpIHRoaXMudGFyZ2V0ID0gcmVsYW9kZWRUYXJnZXQ7CiAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpOwogICAgfTsKICAgIGdyYXBoVXBkYXRlVGltZXIgPSAwOwogICAgdXBkYXRlID0gKCk9PnsKICAgICAgICBpZiAodGhpcy5pc1JlYnVpbGRpbmcpIHJldHVybjsKICAgICAgICBpZiAodGhpcy51cGRhdGFpbmcpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCLliY3lm57jga7jgrDjg6njg5XjgqLjg4Pjg5fjg4fjg7zjg4jjgYzoqLHlrrnmmYLplpPlhoXjgavntYLkuobjgZfjgabjgYTjgarjgYTjgaPjgb3jgYQiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLnVwZGF0YWluZyA9IHRydWU7CiAgICAgICAgdGhpcy5Ub1N0YWJsZUdyYXBoKCk7CiAgICAgICAgdGhpcy51cGRhdGFpbmcgPSBmYWxzZTsKICAgIH07CiAgICBkcmF3ID0gKCk9PnsKICAgICAgICBpZiAodGhpcy5ncmFwaCkgewogICAgICAgICAgICB0aGlzLmdyYXBoLmRyYXcoKTsKICAgICAgICB9CiAgICB9OwogICAgVG9TdGFibGVHcmFwaCA9ICgpPT57CiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5ncmFwaE5vZGVzKS5mb3JFYWNoKChbaGFzaDQsIGdyYXBoTm9kZV0pPT57CiAgICAgICAgICAgIHRoaXMubm9kZXNbaGFzaDRdLnggPSBncmFwaE5vZGUueDsKICAgICAgICAgICAgdGhpcy5ub2Rlc1toYXNoNF0ueSA9IGdyYXBoTm9kZS55OwogICAgICAgIH0pOwogICAgICAgIHRoaXMubm9kZXMgPSBGb3JjZUdyYXBoVXBkYXRlKHRoaXMubm9kZXMsIHRoaXMuY2FudmFzTWFuYWdlci5oZWlnaHQoKSwgdGhpcy5jYW52YXNNYW5hZ2VyLndpZHRoKCkpOwogICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMubm9kZXMpLmZvckVhY2goKFtoYXNoNCwgbm9kZV0pPT57CiAgICAgICAgICAgIHRoaXMuZ3JhcGhOb2Rlc1toYXNoNF0ueCA9IG5vZGUueDsKICAgICAgICAgICAgdGhpcy5ncmFwaE5vZGVzW2hhc2g0XS55ID0gbm9kZS55OwogICAgICAgIH0pOwogICAgfTsKICAgIHJlYnVpbGRHcmFwaCA9IChiZWZvcmVOb2RlRGljdCwgbm9kZXMpPT57CiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLmdyYXBoKSkgcmV0dXJuOwogICAgICAgIHRoaXMuaXNSZWJ1aWxkaW5nID0gdHJ1ZTsKICAgICAgICBHcmFwaC5DbGVhcih0aGlzLmdyYXBoSWQpOwogICAgICAgIHRoaXMuZ3JhcGhOb2RlcyA9IHsKICAgICAgICB9OwogICAgICAgIGNvbnN0IGdyYXBoID0gdGhpcy5ncmFwaDsKICAgICAgICBPYmplY3QudmFsdWVzKG5vZGVzKS5mb3JFYWNoKChmb3JjZU5vZGUpPT57CiAgICAgICAgICAgIGlmIChiZWZvcmVOb2RlRGljdFtmb3JjZU5vZGUubm9kZUhhc2hdKSB7CiAgICAgICAgICAgICAgICBmb3JjZU5vZGUueCA9IGJlZm9yZU5vZGVEaWN0W2ZvcmNlTm9kZS5ub2RlSGFzaF0ueDsKICAgICAgICAgICAgICAgIGZvcmNlTm9kZS55ID0gYmVmb3JlTm9kZURpY3RbZm9yY2VOb2RlLm5vZGVIYXNoXS55OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yY2VOb2RlLnggPSBSYW5nZVJhbmRvbSgwLCB0aGlzLmNhbnZhc01hbmFnZXIud2lkdGgoKSk7CiAgICAgICAgICAgICAgICBmb3JjZU5vZGUueSA9IFJhbmdlUmFuZG9tKDAsIHRoaXMuY2FudmFzTWFuYWdlci5oZWlnaHQoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZ3JhcGhOb2RlID0gZ3JhcGgubm9kZShmb3JjZU5vZGUueCwgZm9yY2VOb2RlLnksIDQwLCAiIiwgZm9yY2VOb2RlLm5vZGVIYXNoKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYG1ha2Ugbm9kZSAke2ZvcmNlTm9kZS50aXRsZX1gKTsKICAgICAgICAgICAgaWYgKGlzTnVsbChncmFwaE5vZGUpKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICBpZiAoZm9yY2VOb2RlLnRodW1ibmFpbCAhPSAiIikgewogICAgICAgICAgICAgICAgZ3JhcGhOb2RlLnNldEltYWdlKGZvcmNlTm9kZS50aHVtYm5haWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZ3JhcGhOb2RlLnNldFRleHQoZm9yY2VOb2RlLnRpdGxlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmdyYXBoTm9kZXNbZm9yY2VOb2RlLm5vZGVIYXNoXSA9IGdyYXBoTm9kZTsKICAgICAgICB9KTsKICAgICAgICBPYmplY3QudmFsdWVzKG5vZGVzKS5mb3JFYWNoKChmb3JjZU5vZGUpPT57CiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGZvcmNlTm9kZS5saW5rcykuZm9yRWFjaCgoW2tleTIsIGVkZ2VdKT0+ewogICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0MSA9IG5vZGVzW2tleTJdOwogICAgICAgICAgICAgICAgaWYgKCFpc051bGwodGFyZ2V0MSkgJiYgdGhpcy5ncmFwaE5vZGVzW3RhcmdldDEubm9kZUhhc2hdICYmIGZvcmNlTm9kZS5ub2RlSGFzaCAhPSB0YXJnZXQxLm5vZGVIYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRhcmdldDE7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG1ha2UgZWRnZSAke2ZvcmNlTm9kZS50aXRsZX0gLT4gJHt0LnRpdGxlfWApOwogICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGVkZ2UpLmZvckVhY2goKFtsYWJlbCwgd2VpZ2h0XSk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaE5vZGVzW2ZvcmNlTm9kZS5ub2RlSGFzaF0uYmlEaXJlY3Rpb25hbCh0aGlzLmdyYXBoTm9kZXNbdC5ub2RlSGFzaF0sICIiKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzOwogICAgICAgIHRoaXMuaXNSZWJ1aWxkaW5nID0gZmFsc2U7CiAgICB9Owp9CmNvbnN0IHZpZXdlclJlcXVlc3RPZlJlbW90ZUdldCA9IGFzeW5jIChoYXNoNCwgZm9yY2UgPSBmYWxzZSk9PnsKICAgIGNvbnN0IHBhdGhTdHJ1Y3QgPSBtZXRhUmVzb3VyY2VQYXRoKGhhc2g0KTsKICAgIGlmIChyZW1vdGVTdG9yYWdlVVJMID09ICIiKSB7CiAgICAgICAgY29uc29sZS53YXJuKGBcbiAgICDjg6rjg6Ljg7zjg4jjgrnjg4jjg6zjg7zjgrjjg5HjgrnjgYzoqK3lrprjgZXjgozjgabjgYTjgb7jgZvjgpPjgIJcbiAgICBIVE1M5YaF44Gn5LiL6KiY44Gu5L6L44Gu44KI44GG44Gr44OO44O844OJ5oOF5aCx44Gu6YWN572u5aC05omA44KS5a6a576p44GX44Gm44GP44Gg44GV44GE44CCXG4gICAg5L6LOlxuICAgIHZhciByZW1vdGVTdG9yYWdlVVJMID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BcmJhVm9qYWdhbnRvL2hvZ2VSZXBvc2l0b3J5L21haW4vIlxuICAgIGApOwogICAgfQogICAgY29uc3QgcGF0aCA9IHJlbW90ZVN0b3JhZ2VVUkwgKyBwYXRoU3RydWN0LnByZWZpeCArIHBhdGhTdHJ1Y3QuaGFzaERpciArIHBhdGhTdHJ1Y3QuaGFzaCArIHBhdGhTdHJ1Y3QuZXh0ZW50aW9uOwogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHZXRSZXF1ZXN0KHBhdGgpOwogICAgaWYgKGlzTnVsbChyZXNwb25zZSkpIHJldHVybiBbXTsKICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICBjb25zb2xlLmxvZyhqc29uKTsKICAgIGlmIChOb2RlMS52YWxpZGF0aW9uKGpzb24pKSB7CiAgICAgICAgY29uc29sZS5sb2coYHJlbW90ZUdldDogJHtqc29ufWApOwogICAgICAgIGNvbnN0IG5vZGVBcnJheSA9IFsKICAgICAgICAgICAganNvbgogICAgICAgIF07CiAgICAgICAgcmV0dXJuIG5vZGVBcnJheTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS53YXJuKCJOb2Rl44Go44GX44Gm6Kej6YeI44Gn44GN44Gq44GE44KC44Gu44KS5Y+W5b6X44GX44G+44GX44GfIik7CiAgICAgICAgcmV0dXJuIFtdOwogICAgfQp9OwpjbGFzcyBWaWV3ZXJBcHBsaWNhdGlvbiB7CiAgICBzdG9yZSA9IG5ldyBTdG9yZWROb2RlcygpOwogICAgc2NvcGVHcmFwaEhpc3RvcnkgPSBuZXcgU2NvcGVHcmFwaE1hbmFnZXIoKTsKICAgIHVwZGF0ZUZ1bmN0aW9ucyA9IFtdOwogICAgY29uc3RydWN0b3IoZG9jdW1lbnQyLCBjb250YWluZXJOb2RlKXsKICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQyOwogICAgICAgIHRoaXMuY29udGFpbmVyTm9kZSA9IGNvbnRhaW5lck5vZGU7CiAgICAgICAgdGhpcy5zdG9yZS5zZXRSZW1vdGVHZXRNZXRob2Qodmlld2VyUmVxdWVzdE9mUmVtb3RlR2V0KTsKICAgICAgICB0aGlzLnNjb3BlR3JhcGhIaXN0b3J5ID0gbmV3IFNjb3BlR3JhcGhNYW5hZ2VyKCk7CiAgICAgICAgdGhpcy5jYW52YXNNYW5hZ2VyID0gbmV3IENhbnZhc01hbmFnZXIodGhpcy5kb2N1bWVudCwgdGhpcy5jb250YWluZXJOb2RlKTsKICAgIH0KICAgIGluaXQgPSAoKT0+ewogICAgICAgIGlmIChpc051bGwodGhpcy5jYW52YXNNYW5hZ2VyKSB8fCBpc051bGwodGhpcy5jYW52YXNNYW5hZ2VyLmdyYXBoQ2FudmFzKSkgcmV0dXJuOwogICAgICAgIHRoaXMuY2FudmFzTWFuYWdlci5pbml0KCk7CiAgICAgICAgY29uc3QgZW50cnlQb2ludCA9IGJ1ZmZlclRvSGFzaCgiZW50cnlQb2ludCIpOwogICAgICAgIGNvbnN0IG4gPSBlbnRyeVBvaW50OwogICAgICAgIHRoaXMuc2NvcGVHcmFwaEhpc3RvcnkuZGVwZW5kYW5jeU1vZHVsZUluamVjdGlvbih0aGlzLmNhbnZhc01hbmFnZXIsIHRoaXMuc3RvcmUsIHRoaXMuYWN0aXZhdGVOb2RlKTsKICAgICAgICB0aGlzLnNjb3BlR3JhcGhIaXN0b3J5LnJlc3RhcnQobik7CiAgICAgICAgdGhpcy51cGRhdGUoKTsKICAgICAgICB0aGlzLmdsb2JhbE1lbnUgPSBHbG9iYWxNZW51LmluaXQodGhpcy5kb2N1bWVudCwgdGhpcy5jb250YWluZXJOb2RlLCB0aGlzLnJlbG9hZCwgdGhpcy5zY29wZUdyYXBoSGlzdG9yeSk7CiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdsb2NhbG1lbnUtZGl2JywgTG9jYWxNZW51LCB7CiAgICAgICAgICAgIGV4dGVuZHM6ICdkaXYnCiAgICAgICAgfSk7CiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdub2RlLWRldGFpbC1kaXYnLCBOb2RlRGV0YWlsLCB7CiAgICAgICAgICAgIGV4dGVuZHM6ICdkaXYnCiAgICAgICAgfSk7CiAgICB9OwogICAgcmVsb2FkID0gYXN5bmMgKCk9PnsKICAgICAgICBhd2FpdCB0aGlzLnNjb3BlR3JhcGhIaXN0b3J5LmN1cnJlbnRTY29wZVJlbG9hZCgpOwogICAgICAgIGlmICghaXNOdWxsKHRoaXMubG9jYWxNZW51KSkgewogICAgICAgICAgICB0aGlzLmxvY2FsTWVudS5yZWxvYWREZXRhaWwoKTsKICAgICAgICB9CiAgICB9OwogICAgYWN0aXZhdGVOb2RlID0gKG5vZGUpPT57CiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLmxvY2FsTWVudSkpIHsKICAgICAgICAgICAgdGhpcy5sb2NhbE1lbnUgPSBuZXcgTG9jYWxNZW51KHRoaXMuc3RvcmUudGFnSGFzaERpY3QsIHRoaXMuc3RvcmUuZmV0Y2gsIHRoaXMuc3RvcmUudXBkYXRlLCB0aGlzLnJlbG9hZCk7CiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmxvY2FsTWVudSk7CiAgICAgICAgfQogICAgICAgIHRoaXMubG9jYWxNZW51LnNldERldGFpbChub2RlKTsKICAgIH07CiAgICBzZXRVcGRhdGVGdW5jdGlvbiA9IChmbik9PnsKICAgICAgICB0aGlzLnVwZGF0ZUZ1bmN0aW9ucy5wdXNoKGZuKTsKICAgIH07CiAgICB1cGRhdGUgPSAoKT0+ewogICAgICAgIHRoaXMuY2FudmFzTWFuYWdlcj8udXBkYXRlKCk7CiAgICAgICAgdGhpcy5zY29wZUdyYXBoSGlzdG9yeS51cGRhdGUoKTsKICAgICAgICB0aGlzLnNjb3BlR3JhcGhIaXN0b3J5LmRyYXcoKTsKICAgICAgICB0aGlzLnVwZGF0ZUZ1bmN0aW9ucy5mb3JFYWNoKChlKT0+ewogICAgICAgICAgICBlKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTsKICAgIH07Cn0KY2xhc3MgTG9jYWxNZW51IGV4dGVuZHMgSFRNTERpdkVsZW1lbnQgewogICAgY29uc3RydWN0b3IodGFnSGFzaERpY3QxLCBmZXRjaE5vZGU0LCB1cGRhdGVOb2RlMSwgcmVsb2FkMil7CiAgICAgICAgc3VwZXIoKTsKICAgICAgICB0aGlzLmZldGNoTm9kZSA9IGZldGNoTm9kZTQ7CiAgICAgICAgdGhpcy51cGRhdGVOb2RlID0gdXBkYXRlTm9kZTE7CiAgICAgICAgdGhpcy5yZWxvYWQgPSByZWxvYWQyOwogICAgICAgIHRoaXMuaWQgPSAibmV0d29yay1ncmFwaC1sb2NhbC1tZW51IjsKICAgICAgICB0aGlzLmRldGFpbCA9IG5ldyBOb2RlRGV0YWlsKHRoaXMuZmV0Y2hOb2RlKTsKICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuZGV0YWlsKTsKICAgIH0KICAgIHNldERldGFpbChub2RlKSB7CiAgICAgICAgaWYgKGlzTnVsbCh0aGlzLmRldGFpbCkpIHJldHVybjsKICAgICAgICB0aGlzLmRldGFpbC5zZXREZXRhaWwobm9kZSk7CiAgICB9CiAgICByZWxvYWREZXRhaWwoKSB7CiAgICAgICAgaWYgKCFpc051bGwodGhpcy5kZXRhaWwpKSB7CiAgICAgICAgICAgIHRoaXMuZGV0YWlsLnJlbG9hZERldGFpbCgpOwogICAgICAgIH0KICAgIH0KfQpjbGFzcyBHbG9iYWxNZW51IHsKICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50Mywgcm9vdE5vZGUxLCByZWxvYWQzLCBzY29wZU1hbmFnZXIpewogICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDM7CiAgICAgICAgdGhpcy5yb290Tm9kZSA9IHJvb3ROb2RlMTsKICAgICAgICB0aGlzLnJlbG9hZCA9IHJlbG9hZDM7CiAgICAgICAgdGhpcy5zY29wZU1hbmFnZXIgPSBzY29wZU1hbmFnZXI7CiAgICAgICAgY29uc3QgdG9BbGxTY29wZSA9IGRvY3VtZW50My5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgICAgICB0b0FsbFNjb3BlLm9uY2xpY2sgPSAoKT0+ewogICAgICAgICAgICB0aGlzLnNjb3BlTWFuYWdlcj8ucmVzdGFydChidWZmZXJUb0hhc2goIm5vZGUiKSk7CiAgICAgICAgfTsKICAgICAgICB0b0FsbFNjb3BlLmlubmVyVGV4dCA9IGB0b0FsbFNjb3BlYDsKICAgICAgICByb290Tm9kZTEuYXBwZW5kQ2hpbGQodG9BbGxTY29wZSk7CiAgICAgICAgY29uc3QgdG9UYWdTY29wZSA9IGRvY3VtZW50My5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgICB0b1RhZ1Njb3BlLm9uY2xpY2sgPSAoKT0+ewogICAgICAgICAgICB0aGlzLnNjb3BlTWFuYWdlcj8ucmVzdGFydChidWZmZXJUb0hhc2goInRhZyIpKTsKICAgICAgICB9OwogICAgICAgIHRvVGFnU2NvcGUuaW5uZXJUZXh0ID0gYHRvVGFnU2NvcGVgOwogICAgICAgIHJvb3ROb2RlMS5hcHBlbmRDaGlsZCh0b1RhZ1Njb3BlKTsKICAgICAgICBjb25zdCB0b0Jsb2JTY29wZSA9IGRvY3VtZW50My5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgICB0b0Jsb2JTY29wZS5vbmNsaWNrID0gKCk9PnsKICAgICAgICAgICAgdGhpcy5zY29wZU1hbmFnZXI/LnJlc3RhcnQoYnVmZmVyVG9IYXNoKCJibG9iIikpOwogICAgICAgIH07CiAgICAgICAgdG9CbG9iU2NvcGUuaW5uZXJUZXh0ID0gYHRvQmxvYlNjb3BlYDsKICAgICAgICByb290Tm9kZTEuYXBwZW5kQ2hpbGQodG9CbG9iU2NvcGUpOwogICAgICAgIGNvbnN0IHRvVG9kYXlTY29wZSA9IGRvY3VtZW50My5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgICB0b1RvZGF5U2NvcGUub25jbGljayA9ICgpPT57CiAgICAgICAgICAgIGNvbnN0IHMgPSB0b2RheVN0cmluZygpOwogICAgICAgICAgICBpZiAocykgewogICAgICAgICAgICAgICAgdGhpcy5zY29wZU1hbmFnZXI/LnJlc3RhcnQoYnVmZmVyVG9IYXNoKHMpKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdG9Ub2RheVNjb3BlLmlubmVyVGV4dCA9IGB0b1RvZGF5U2NvcGVgOwogICAgICAgIHJvb3ROb2RlMS5hcHBlbmRDaGlsZCh0b1RvZGF5U2NvcGUpOwogICAgfQogICAgc3RhdGljIGluaXQgPSAoZG9jdW1lbnQ0LCByb290RWxlbWVudCwgcmVsb2FkNCwgc2NvcGVNYW5hZ2VyMSk9PnsKICAgICAgICBjb25zdCBnbG9iYWxNZW51ID0gZG9jdW1lbnQ0LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIGlmIChpc051bGwoZ2xvYmFsTWVudSkpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgZ2xvYmFsTWVudS5pZCA9ICJuZXR3b3JrLWdyYXBoLWdsb2JhbC1tZW51IjsKICAgICAgICByb290RWxlbWVudC5hcHBlbmRDaGlsZChnbG9iYWxNZW51KTsKICAgICAgICBjb25zdCBpNSA9IG5ldyBHbG9iYWxNZW51KGRvY3VtZW50NCwgZ2xvYmFsTWVudSwgcmVsb2FkNCwgc2NvcGVNYW5hZ2VyMSk7CiAgICAgICAgcmV0dXJuIGk1OwogICAgfTsKfQp3aW5kb3cub25sb2FkID0gKCk9PnsKICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNuZXR3b3JrLWdyYXBoIik7CiAgICBpZiAoY29udGFpbmVyKSB7CiAgICAgICAgY29uc3QgYXBwID0gbmV3IFZpZXdlckFwcGxpY2F0aW9uKGRvY3VtZW50LCBjb250YWluZXIpOwogICAgICAgIGFwcC5pbml0KCk7CiAgICB9Cn07Cg=="></script>
</body>

</html>

<!--

* LICENSE

\`\`\`
MIT License

Copyright (c) 2021 ArbaVojaganto

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
\`\`\`

\`\`\`
MIT License

Copyright (c) 2020 Paul Fears

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
\`\`\`

\`\`\`
MIT License

Copyright 2018-2021 the Deno authors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
\`\`\`

\`\`\`
  
Copyright (c) 2014 Masafumi Oyamada

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
\`\`\`
-->
`
addEventListener("fetch", (event: any) => {
  event.respondWith(
    new Response(html, {
      status: 200,
      headers: {
        server: "denosr",
        "content-type": "text/html",
      },
    })
  );
});
    